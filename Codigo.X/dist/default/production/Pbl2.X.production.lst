

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Jul 04 16:53:12 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    81                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    82   000000                     
    83                           ; Version 2.40
    84                           ; Generated 17/11/2021 GMT
    85                           ; 
    86                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution. Publication is not required when
   100                           ;        this file is used in an embedded application.
   101                           ; 
   102                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   103                           ;        software without specific prior written permission.
   104                           ; 
   105                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   106                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   107                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   108                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   109                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   110                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   111                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   112                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   113                           ; 
   114                           ; 
   115                           ; Code-generator required, PIC18F4550 Definitions
   116                           ; 
   117                           ; SFR Addresses
   118   000000                     
   119                           	psect	idataBANK0
   120   005976                     __pidataBANK0:
   121                           	callstack 0
   122                           
   123                           ;initializer for _msgs
   124   005976  CE                 	db	low STR_1
   125   005977  7F                 	db	high STR_1
   126   005978  96                 	db	low STR_2
   127   005979  7F                 	db	high STR_2
   128   00597A  EA                 	db	low STR_3
   129   00597B  7F                 	db	high STR_3
   130   00597C  B2                 	db	low STR_4
   131   00597D  7F                 	db	high STR_4
   132   00597E  C0                 	db	low STR_5
   133   00597F  7F                 	db	high STR_5
   134   005980  88                 	db	low STR_6
   135   005981  7F                 	db	high STR_6
   136   005982  DC                 	db	low STR_7
   137   005983  7F                 	db	high STR_7
   138   005984  A4                 	db	low STR_8
   139   005985  7F                 	db	high STR_8
   140   005986  68                 	db	low STR_9
   141   005987  7F                 	db	high STR_9
   142   005988  46                 	db	low STR_10
   143   005989  7F                 	db	high STR_10
   144   00598A  78                 	db	low STR_11
   145   00598B  7F                 	db	high STR_11
   146   00598C  57                 	db	low STR_12
   147   00598D  7F                 	db	high STR_12
   148                           
   149                           	psect	nvCOMRAM
   150   00004D                     __pnvCOMRAM:
   151                           	callstack 0
   152   00004D                     _time:
   153                           	callstack 0
   154   00004D                     	ds	2
   155                           
   156                           	psect	mediumconst
   157   007EA0                     __pmediumconst:
   158                           	callstack 0
   159   007EA0  00                 	db	0
   160   007EA1                     STR_28:
   161   007EA1  50                 	db	80	;'P'
   162   007EA2  72                 	db	114	;'r'
   163   007EA3  6F                 	db	111	;'o'
   164   007EA4  74                 	db	116	;'t'
   165   007EA5  6F                 	db	111	;'o'
   166   007EA6  63                 	db	99	;'c'
   167   007EA7  6F                 	db	111	;'o'
   168   007EA8  6C                 	db	108	;'l'
   169   007EA9  6F                 	db	111	;'o'
   170   007EAA  3A                 	db	58	;':'
   171   007EAB  20                 	db	32
   172   007EAC  50                 	db	80	;'P'
   173   007EAD  53                 	db	83	;'S'
   174   007EAE  4D                 	db	77	;'M'
   175   007EAF  49                 	db	73	;'I'
   176   007EB0  4E                 	db	78	;'N'
   177   007EB1  31                 	db	49	;'1'
   178   007EB2  58                 	db	88	;'X'
   179   007EB3  30                 	db	48	;'0'
   180   007EB4  30                 	db	48	;'0'
   181   007EB5  0D                 	db	13
   182   007EB6  00                 	db	0
   183   007EB7                     STR_18:
   184   007EB7  50                 	db	80	;'P'
   185   007EB8  72                 	db	114	;'r'
   186   007EB9  6F                 	db	111	;'o'
   187   007EBA  74                 	db	116	;'t'
   188   007EBB  6F                 	db	111	;'o'
   189   007EBC  63                 	db	99	;'c'
   190   007EBD  6F                 	db	111	;'o'
   191   007EBE  6C                 	db	108	;'l'
   192   007EBF  6F                 	db	111	;'o'
   193   007EC0  3A                 	db	58	;':'
   194   007EC1  20                 	db	32
   195   007EC2  50                 	db	80	;'P'
   196   007EC3  53                 	db	83	;'S'
   197   007EC4  4D                 	db	77	;'M'
   198   007EC5  41                 	db	65	;'A'
   199   007EC6  58                 	db	88	;'X'
   200   007EC7  31                 	db	49	;'1'
   201   007EC8  58                 	db	88	;'X'
   202   007EC9  30                 	db	48	;'0'
   203   007ECA  30                 	db	48	;'0'
   204   007ECB  0D                 	db	13
   205   007ECC  00                 	db	0
   206   007ECD                     STR_33:
   207   007ECD  50                 	db	80	;'P'
   208   007ECE  72                 	db	114	;'r'
   209   007ECF  6F                 	db	111	;'o'
   210   007ED0  74                 	db	116	;'t'
   211   007ED1  6F                 	db	111	;'o'
   212   007ED2  63                 	db	99	;'c'
   213   007ED3  6F                 	db	111	;'o'
   214   007ED4  6C                 	db	108	;'l'
   215   007ED5  6F                 	db	111	;'o'
   216   007ED6  3A                 	db	58	;':'
   217   007ED7  20                 	db	32
   218   007ED8  50                 	db	80	;'P'
   219   007ED9  53                 	db	83	;'S'
   220   007EDA  4D                 	db	77	;'M'
   221   007EDB  49                 	db	73	;'I'
   222   007EDC  4E                 	db	78	;'N'
   223   007EDD  32                 	db	50	;'2'
   224   007EDE  58                 	db	88	;'X'
   225   007EDF  30                 	db	48	;'0'
   226   007EE0  30                 	db	48	;'0'
   227   007EE1  0D                 	db	13
   228   007EE2  00                 	db	0
   229   007EE3                     STR_23:
   230   007EE3  50                 	db	80	;'P'
   231   007EE4  72                 	db	114	;'r'
   232   007EE5  6F                 	db	111	;'o'
   233   007EE6  74                 	db	116	;'t'
   234   007EE7  6F                 	db	111	;'o'
   235   007EE8  63                 	db	99	;'c'
   236   007EE9  6F                 	db	111	;'o'
   237   007EEA  6C                 	db	108	;'l'
   238   007EEB  6F                 	db	111	;'o'
   239   007EEC  3A                 	db	58	;':'
   240   007EED  20                 	db	32
   241   007EEE  50                 	db	80	;'P'
   242   007EEF  53                 	db	83	;'S'
   243   007EF0  4D                 	db	77	;'M'
   244   007EF1  41                 	db	65	;'A'
   245   007EF2  58                 	db	88	;'X'
   246   007EF3  32                 	db	50	;'2'
   247   007EF4  58                 	db	88	;'X'
   248   007EF5  30                 	db	48	;'0'
   249   007EF6  30                 	db	48	;'0'
   250   007EF7  0D                 	db	13
   251   007EF8  00                 	db	0
   252   007EF9                     STR_14:
   253   007EF9  50                 	db	80	;'P'
   254   007EFA  72                 	db	114	;'r'
   255   007EFB  6F                 	db	111	;'o'
   256   007EFC  74                 	db	116	;'t'
   257   007EFD  6F                 	db	111	;'o'
   258   007EFE  63                 	db	99	;'c'
   259   007EFF  6F                 	db	111	;'o'
   260   007F00  6C                 	db	108	;'l'
   261   007F01  6F                 	db	111	;'o'
   262   007F02  3A                 	db	58	;':'
   263   007F03  20                 	db	32
   264   007F04  50                 	db	80	;'P'
   265   007F05  53                 	db	83	;'S'
   266   007F06  54                 	db	84	;'T'
   267   007F07  49                 	db	73	;'I'
   268   007F08  4D                 	db	77	;'M'
   269   007F09  45                 	db	69	;'E'
   270   007F0A  58                 	db	88	;'X'
   271   007F0B  30                 	db	48	;'0'
   272   007F0C  30                 	db	48	;'0'
   273   007F0D  0D                 	db	13
   274   007F0E  00                 	db	0
   275   007F0F                     STR_13:
   276   007F0F  20                 	db	32
   277   007F10  20                 	db	32
   278   007F11  20                 	db	32
   279   007F12  20                 	db	32
   280   007F13  20                 	db	32
   281   007F14  20                 	db	32
   282   007F15  20                 	db	32
   283   007F16  20                 	db	32
   284   007F17  20                 	db	32
   285   007F18  20                 	db	32
   286   007F19  20                 	db	32
   287   007F1A  20                 	db	32
   288   007F1B  20                 	db	32
   289   007F1C  20                 	db	32
   290   007F1D  20                 	db	32
   291   007F1E  20                 	db	32
   292   007F1F  20                 	db	32
   293   007F20  20                 	db	32
   294   007F21  20                 	db	32
   295   007F22  20                 	db	32
   296   007F23  00                 	db	0
   297   007F24                     STR_39:
   298   007F24  45                 	db	69	;'E'
   299   007F25  6E                 	db	110	;'n'
   300   007F26  67                 	db	103	;'g'
   301   007F27  6C                 	db	108	;'l'
   302   007F28  69                 	db	105	;'i'
   303   007F29  73                 	db	115	;'s'
   304   007F2A  68                 	db	104	;'h'
   305   007F2B  20                 	db	32
   306   007F2C  20                 	db	32
   307   007F2D  20                 	db	32
   308   007F2E  20                 	db	32
   309   007F2F  20                 	db	32
   310   007F30  20                 	db	32
   311   007F31  20                 	db	32
   312   007F32  20                 	db	32
   313   007F33  20                 	db	32
   314   007F34  00                 	db	0
   315   007F35                     STR_37:
   316   007F35  50                 	db	80	;'P'
   317   007F36  6F                 	db	111	;'o'
   318   007F37  72                 	db	114	;'r'
   319   007F38  74                 	db	116	;'t'
   320   007F39  75                 	db	117	;'u'
   321   007F3A  67                 	db	103	;'g'
   322   007F3B  75                 	db	117	;'u'
   323   007F3C  65                 	db	101	;'e'
   324   007F3D  73                 	db	115	;'s'
   325   007F3E  20                 	db	32
   326   007F3F  20                 	db	32
   327   007F40  20                 	db	32
   328   007F41  20                 	db	32
   329   007F42  20                 	db	32
   330   007F43  20                 	db	32
   331   007F44  20                 	db	32
   332   007F45  00                 	db	0
   333   007F46                     STR_10:
   334   007F46  43                 	db	67	;'C'
   335   007F47  68                 	db	104	;'h'
   336   007F48  61                 	db	97	;'a'
   337   007F49  6E                 	db	110	;'n'
   338   007F4A  67                 	db	103	;'g'
   339   007F4B  65                 	db	101	;'e'
   340   007F4C  20                 	db	32
   341   007F4D  74                 	db	116	;'t'
   342   007F4E  69                 	db	105	;'i'
   343   007F4F  6D                 	db	109	;'m'
   344   007F50  65                 	db	101	;'e'
   345   007F51  20                 	db	32
   346   007F52  20                 	db	32
   347   007F53  20                 	db	32
   348   007F54  20                 	db	32
   349   007F55  20                 	db	32
   350   007F56  00                 	db	0
   351   007F57                     STR_12:
   352   007F57  43                 	db	67	;'C'
   353   007F58  68                 	db	104	;'h'
   354   007F59  61                 	db	97	;'a'
   355   007F5A  6E                 	db	110	;'n'
   356   007F5B  67                 	db	103	;'g'
   357   007F5C  65                 	db	101	;'e'
   358   007F5D  20                 	db	32
   359   007F5E  6C                 	db	108	;'l'
   360   007F5F  61                 	db	97	;'a'
   361   007F60  6E                 	db	110	;'n'
   362   007F61  67                 	db	103	;'g'
   363   007F62  75                 	db	117	;'u'
   364   007F63  61                 	db	97	;'a'
   365   007F64  67                 	db	103	;'g'
   366   007F65  65                 	db	101	;'e'
   367   007F66  20                 	db	32
   368   007F67  00                 	db	0
   369   007F68                     STR_9:
   370   007F68  41                 	db	65	;'A'
   371   007F69  6C                 	db	108	;'l'
   372   007F6A  74                 	db	116	;'t'
   373   007F6B  65                 	db	101	;'e'
   374   007F6C  72                 	db	114	;'r'
   375   007F6D  61                 	db	97	;'a'
   376   007F6E  72                 	db	114	;'r'
   377   007F6F  20                 	db	32
   378   007F70  74                 	db	116	;'t'
   379   007F71  65                 	db	101	;'e'
   380   007F72  6D                 	db	109	;'m'
   381   007F73  70                 	db	112	;'p'
   382   007F74  6F                 	db	111	;'o'
   383   007F75  20                 	db	32
   384   007F76  20                 	db	32
   385   007F77  00                 	db	0
   386   007F78                     STR_11:
   387   007F78  41                 	db	65	;'A'
   388   007F79  6C                 	db	108	;'l'
   389   007F7A  74                 	db	116	;'t'
   390   007F7B  65                 	db	101	;'e'
   391   007F7C  72                 	db	114	;'r'
   392   007F7D  61                 	db	97	;'a'
   393   007F7E  72                 	db	114	;'r'
   394   007F7F  20                 	db	32
   395   007F80  69                 	db	105	;'i'
   396   007F81  64                 	db	100	;'d'
   397   007F82  69                 	db	105	;'i'
   398   007F83  6F                 	db	111	;'o'
   399   007F84  6D                 	db	109	;'m'
   400   007F85  61                 	db	97	;'a'
   401   007F86  20                 	db	32
   402   007F87  00                 	db	0
   403   007F88                     STR_6:
   404   007F88  4D                 	db	77	;'M'
   405   007F89  69                 	db	105	;'i'
   406   007F8A  6E                 	db	110	;'n'
   407   007F8B  20                 	db	32
   408   007F8C  61                 	db	97	;'a'
   409   007F8D  6C                 	db	108	;'l'
   410   007F8E  61                 	db	97	;'a'
   411   007F8F  72                 	db	114	;'r'
   412   007F90  6D                 	db	109	;'m'
   413   007F91  20                 	db	32
   414   007F92  31                 	db	49	;'1'
   415   007F93  20                 	db	32
   416   007F94  20                 	db	32
   417   007F95  00                 	db	0
   418   007F96                     STR_2:
   419   007F96  4D                 	db	77	;'M'
   420   007F97  61                 	db	97	;'a'
   421   007F98  78                 	db	120	;'x'
   422   007F99  20                 	db	32
   423   007F9A  61                 	db	97	;'a'
   424   007F9B  6C                 	db	108	;'l'
   425   007F9C  61                 	db	97	;'a'
   426   007F9D  72                 	db	114	;'r'
   427   007F9E  6D                 	db	109	;'m'
   428   007F9F  20                 	db	32
   429   007FA0  31                 	db	49	;'1'
   430   007FA1  20                 	db	32
   431   007FA2  20                 	db	32
   432   007FA3  00                 	db	0
   433   007FA4                     STR_8:
   434   007FA4  4D                 	db	77	;'M'
   435   007FA5  69                 	db	105	;'i'
   436   007FA6  6E                 	db	110	;'n'
   437   007FA7  20                 	db	32
   438   007FA8  61                 	db	97	;'a'
   439   007FA9  6C                 	db	108	;'l'
   440   007FAA  61                 	db	97	;'a'
   441   007FAB  72                 	db	114	;'r'
   442   007FAC  6D                 	db	109	;'m'
   443   007FAD  20                 	db	32
   444   007FAE  32                 	db	50	;'2'
   445   007FAF  20                 	db	32
   446   007FB0  20                 	db	32
   447   007FB1  00                 	db	0
   448   007FB2                     STR_4:
   449   007FB2  4D                 	db	77	;'M'
   450   007FB3  61                 	db	97	;'a'
   451   007FB4  78                 	db	120	;'x'
   452   007FB5  20                 	db	32
   453   007FB6  61                 	db	97	;'a'
   454   007FB7  6C                 	db	108	;'l'
   455   007FB8  61                 	db	97	;'a'
   456   007FB9  72                 	db	114	;'r'
   457   007FBA  6D                 	db	109	;'m'
   458   007FBB  20                 	db	32
   459   007FBC  32                 	db	50	;'2'
   460   007FBD  20                 	db	32
   461   007FBE  20                 	db	32
   462   007FBF  00                 	db	0
   463   007FC0                     STR_5:
   464   007FC0  4D                 	db	77	;'M'
   465   007FC1  69                 	db	105	;'i'
   466   007FC2  6E                 	db	110	;'n'
   467   007FC3  20                 	db	32
   468   007FC4  61                 	db	97	;'a'
   469   007FC5  6C                 	db	108	;'l'
   470   007FC6  61                 	db	97	;'a'
   471   007FC7  72                 	db	114	;'r'
   472   007FC8  6D                 	db	109	;'m'
   473   007FC9  65                 	db	101	;'e'
   474   007FCA  20                 	db	32
   475   007FCB  31                 	db	49	;'1'
   476   007FCC  20                 	db	32
   477   007FCD  00                 	db	0
   478   007FCE                     STR_1:
   479   007FCE  4D                 	db	77	;'M'
   480   007FCF  61                 	db	97	;'a'
   481   007FD0  78                 	db	120	;'x'
   482   007FD1  20                 	db	32
   483   007FD2  61                 	db	97	;'a'
   484   007FD3  6C                 	db	108	;'l'
   485   007FD4  61                 	db	97	;'a'
   486   007FD5  72                 	db	114	;'r'
   487   007FD6  6D                 	db	109	;'m'
   488   007FD7  65                 	db	101	;'e'
   489   007FD8  20                 	db	32
   490   007FD9  31                 	db	49	;'1'
   491   007FDA  20                 	db	32
   492   007FDB  00                 	db	0
   493   007FDC                     STR_7:
   494   007FDC  4D                 	db	77	;'M'
   495   007FDD  69                 	db	105	;'i'
   496   007FDE  6E                 	db	110	;'n'
   497   007FDF  20                 	db	32
   498   007FE0  61                 	db	97	;'a'
   499   007FE1  6C                 	db	108	;'l'
   500   007FE2  61                 	db	97	;'a'
   501   007FE3  72                 	db	114	;'r'
   502   007FE4  6D                 	db	109	;'m'
   503   007FE5  65                 	db	101	;'e'
   504   007FE6  20                 	db	32
   505   007FE7  32                 	db	50	;'2'
   506   007FE8  20                 	db	32
   507   007FE9  00                 	db	0
   508   007FEA                     STR_3:
   509   007FEA  4D                 	db	77	;'M'
   510   007FEB  61                 	db	97	;'a'
   511   007FEC  78                 	db	120	;'x'
   512   007FED  20                 	db	32
   513   007FEE  61                 	db	97	;'a'
   514   007FEF  6C                 	db	108	;'l'
   515   007FF0  61                 	db	97	;'a'
   516   007FF1  72                 	db	114	;'r'
   517   007FF2  6D                 	db	109	;'m'
   518   007FF3  65                 	db	101	;'e'
   519   007FF4  20                 	db	32
   520   007FF5  32                 	db	50	;'2'
   521   007FF6  20                 	db	32
   522   007FF7  00                 	db	0
   523   007FF8                     STR_16:
   524   007FF8  20                 	db	32
   525   007FF9  61                 	db	97	;'a'
   526   007FFA  64                 	db	100	;'d'
   527   007FFB  63                 	db	99	;'c'
   528   007FFC  3D                 	db	61	;'='
   529   007FFD  00                 	db	0
   530   007FFE  00                 	db	0	; dummy byte at the end
   531   000000                     
   532                           ; #config settings
   533                           
   534                           	psect	cinit
   535   005B0C                     __pcinit:
   536                           	callstack 0
   537   005B0C                     start_initialization:
   538                           	callstack 0
   539   005B0C                     __initialization:
   540                           	callstack 0
   541                           
   542                           ; Initialize objects allocated to BANK0 (24 bytes)
   543                           ; load TBLPTR registers with __pidataBANK0
   544   005B0C  0E76               	movlw	low __pidataBANK0
   545   005B0E  6EF6               	movwf	tblptrl,c
   546   005B10  0E59               	movlw	high __pidataBANK0
   547   005B12  6EF7               	movwf	tblptrh,c
   548   005B14  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   549   005B16  6EF8               	movwf	tblptru,c
   550   005B18  EE00  F060         	lfsr	0,__pdataBANK0
   551   005B1C  EE10 F018          	lfsr	1,24
   552   005B20                     copy_data0:
   553   005B20  0009               	tblrd		*+
   554   005B22  CFF5 FFEE          	movff	tablat,postinc0
   555   005B26  50E5               	movf	postdec1,w,c
   556   005B28  50E1               	movf	fsr1l,w,c
   557   005B2A  E1FA               	bnz	copy_data0
   558                           
   559                           ; Clear objects allocated to COMRAM (22 bytes)
   560   005B2C  EE00  F037         	lfsr	0,__pbssCOMRAM
   561   005B30  0E16               	movlw	22
   562   005B32                     clear_0:
   563   005B32  6AEE               	clrf	postinc0,c
   564   005B34  06E8               	decf	wreg,f,c
   565   005B36  E1FD               	bnz	clear_0
   566   005B38                     end_of_initialization:
   567                           	callstack 0
   568   005B38                     __end_of__initialization:
   569                           	callstack 0
   570   005B38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   571   005B3A  6EF8               	movwf	tblptru,c
   572   005B3C  0100               	movlb	0
   573   005B3E  EF51  F02D         	goto	_main	;jump to C main() function
   574                           
   575                           	psect	bssCOMRAM
   576   000037                     __pbssCOMRAM:
   577                           	callstack 0
   578   000037                     _buffer:
   579                           	callstack 0
   580   000037                     	ds	15
   581   000046                     _key_ant:
   582                           	callstack 0
   583   000046                     	ds	2
   584   000048                     _pos:
   585                           	callstack 0
   586   000048                     	ds	1
   587   000049                     _a:
   588                           	callstack 0
   589   000049                     	ds	1
   590   00004A                     _language:
   591                           	callstack 0
   592   00004A                     	ds	1
   593   00004B                     _state:
   594                           	callstack 0
   595   00004B                     	ds	1
   596   00004C                     _started:
   597                           	callstack 0
   598   00004C                     	ds	1
   599                           
   600                           	psect	dataBANK0
   601   000060                     __pdataBANK0:
   602                           	callstack 0
   603   000060                     _msgs:
   604                           	callstack 0
   605   000060                     	ds	24
   606                           
   607                           	psect	cstackCOMRAM
   608   000001                     __pcstackCOMRAM:
   609                           	callstack 0
   610   000001                     ?_getTime:
   611                           	callstack 0
   612   000001                     ?_adcRead:
   613                           	callstack 0
   614   000001                     ?___wmul:
   615                           	callstack 0
   616   000001                     ?___awdiv:
   617                           	callstack 0
   618   000001                     ?___fladd:
   619                           	callstack 0
   620   000001                     serialSend@c:
   621                           	callstack 0
   622   000001                     serialRead@resp:
   623                           	callstack 0
   624   000001                     i2c_write_bit@bit:
   625                           	callstack 0
   626   000001                     i2c_read_bit@bit:
   627                           	callstack 0
   628   000001                     lcdCommand4@cmd:
   629                           	callstack 0
   630   000001                     lcdData4@cmd:
   631                           	callstack 0
   632   000001                     ledState@state:
   633                           	callstack 0
   634   000001                     setState@newState:
   635                           	callstack 0
   636   000001                     adcRead@a:
   637                           	callstack 0
   638   000001                     ___wmul@multiplier:
   639                           	callstack 0
   640   000001                     ___awdiv@dividend:
   641                           	callstack 0
   642   000001                     delay_50us@us:
   643                           	callstack 0
   644   000001                     ___flge@ff1:
   645                           	callstack 0
   646   000001                     ___fladd@b:
   647                           	callstack 0
   648                           
   649                           ; 4 bytes @ 0x0
   650   000001                     	ds	1
   651   000002                     ??_ledState:
   652   000002                     i2cWriteByte@send_stop:
   653                           	callstack 0
   654   000002                     i2cReadByte@send_stop:
   655                           	callstack 0
   656   000002                     serialString@str:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0x1
   660   000002                     	ds	1
   661   000003                     ??_i2cReadByte:
   662   000003                     i2cWriteByte@byte:
   663                           	callstack 0
   664   000003                     adcRead@ADvalor:
   665                           	callstack 0
   666   000003                     setTime@newTime:
   667                           	callstack 0
   668   000003                     ___wmul@multiplicand:
   669                           	callstack 0
   670   000003                     ___awdiv@divisor:
   671                           	callstack 0
   672                           
   673                           ; 2 bytes @ 0x2
   674   000003                     	ds	1
   675   000004                     i2cWriteByte@send_start:
   676                           	callstack 0
   677   000004                     i2cReadByte@nack:
   678                           	callstack 0
   679   000004                     ledState@num:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0x3
   683   000004                     	ds	1
   684   000005                     i2cWriteByte@bit:
   685                           	callstack 0
   686   000005                     ___awdiv@counter:
   687                           	callstack 0
   688   000005                     i2cReadByte@bit:
   689                           	callstack 0
   690   000005                     ___wmul@product:
   691                           	callstack 0
   692   000005                     delay_50us@i:
   693                           	callstack 0
   694   000005                     ___flge@ff2:
   695                           	callstack 0
   696   000005                     ___fladd@a:
   697                           	callstack 0
   698                           
   699                           ; 4 bytes @ 0x4
   700   000005                     	ds	1
   701   000006                     ___awdiv@sign:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x5
   705   000006                     	ds	1
   706   000007                     i2cReadByte@byte:
   707                           	callstack 0
   708   000007                     timerReset@tempo:
   709                           	callstack 0
   710   000007                     ___awdiv@quotient:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x6
   714   000007                     	ds	1
   715   000008                     ?_dsReadData:
   716                           	callstack 0
   717   000008                     dsReadData@address:
   718                           	callstack 0
   719                           
   720                           ; 2 bytes @ 0x7
   721   000008                     	ds	1
   722   000009                     ??___fladd:
   723   000009                     ??___flge:
   724   000009                     ?___awmod:
   725                           	callstack 0
   726   000009                     delay_50us@l:
   727                           	callstack 0
   728   000009                     timerReset@ciclos:
   729                           	callstack 0
   730   000009                     ___awmod@dividend:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x8
   734   000009                     	ds	1
   735   00000A                     ??_dsReadData:
   736                           
   737                           ; 1 bytes @ 0x9
   738   00000A                     	ds	1
   739   00000B                     lcdData@valor:
   740                           	callstack 0
   741   00000B                     dsReadData@result:
   742                           	callstack 0
   743   00000B                     ___awmod@divisor:
   744                           	callstack 0
   745   00000B                     delay_ms@ms:
   746                           	callstack 0
   747                           
   748                           ; 4 bytes @ 0xA
   749   00000B                     	ds	1
   750   00000C                     lcdString@msg:
   751                           	callstack 0
   752                           
   753                           ; 2 bytes @ 0xB
   754   00000C                     	ds	1
   755   00000D                     ___awmod@counter:
   756                           	callstack 0
   757   00000D                     ___fladd@signs:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0xC
   761   00000D                     	ds	1
   762   00000E                     ??_lcdString:
   763   00000E                     ___awmod@sign:
   764                           	callstack 0
   765   00000E                     ___fladd@aexp:
   766                           	callstack 0
   767                           
   768                           ; 1 bytes @ 0xD
   769   00000E                     	ds	1
   770   00000F                     ___fladd@bexp:
   771                           	callstack 0
   772   00000F                     delay_ms@l:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0xE
   776   00000F                     	ds	1
   777   000010                     ___fladd@grs:
   778                           	callstack 0
   779   000010                     lcdString@i:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0xF
   783   000010                     	ds	1
   784   000011                     dsWriteData@address:
   785                           	callstack 0
   786   000011                     delay_ms@i:
   787                           	callstack 0
   788                           
   789                           ; 4 bytes @ 0x10
   790   000011                     	ds	2
   791   000013                     dsWriteData@value:
   792                           	callstack 0
   793                           
   794                           ; 1 bytes @ 0x12
   795   000013                     	ds	1
   796   000014                     dsWriteData@i:
   797                           	callstack 0
   798                           
   799                           ; 4 bytes @ 0x13
   800   000014                     	ds	1
   801   000015                     ??_butRead:
   802   000015                     lcdCommand@cmd:
   803                           	callstack 0
   804                           
   805                           ; 1 bytes @ 0x14
   806   000015                     	ds	1
   807   000016                     
   808                           ; 1 bytes @ 0x15
   809   000016                     	ds	1
   810   000017                     butRead@num:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x16
   814   000017                     	ds	1
   815   000018                     ?_getAlarmLevel1a:
   816                           	callstack 0
   817   000018                     ?_getAlarmLevel2a:
   818                           	callstack 0
   819   000018                     ?_getAlarmLevel1b:
   820                           	callstack 0
   821   000018                     ?_getAlarmLevel2b:
   822                           	callstack 0
   823   000018                     setLanguage@newLanguage:
   824                           	callstack 0
   825                           
   826                           ; 1 bytes @ 0x17
   827   000018                     	ds	2
   828   00001A                     getAlarmLevel1a@tmp:
   829                           	callstack 0
   830   00001A                     getAlarmLevel2a@tmp:
   831                           	callstack 0
   832   00001A                     getAlarmLevel1b@tmp:
   833                           	callstack 0
   834   00001A                     getAlarmLevel2b@tmp:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x19
   838   00001A                     	ds	1
   839   00001B                     serialInt@val:
   840                           	callstack 0
   841   00001B                     lcdInt@val:
   842                           	callstack 0
   843   00001B                     setAlarmLevel1a@newAlarmLevel1a:
   844                           	callstack 0
   845   00001B                     setAlarmLevel2a@newAlarmLevel2a:
   846                           	callstack 0
   847   00001B                     setAlarmLevel1b@newAlarmLevel1b:
   848                           	callstack 0
   849   00001B                     setAlarmLevel2b@newAlarmLevel2b:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x1A
   853   00001B                     	ds	2
   854   00001D                     ?_eventRead:
   855                           	callstack 0
   856   00001D                     outputPrint@numTela:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0x1C
   860   00001D                     	ds	2
   861   00001F                     ??_eventRead:
   862   00001F                     outputPrint@idioma:
   863                           	callstack 0
   864                           
   865                           ; 2 bytes @ 0x1E
   866   00001F                     	ds	2
   867   000021                     ??_outputPrint:
   868   000021                     eventRead@ev:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x20
   872   000021                     	ds	2
   873   000023                     eventRead@temp:
   874                           	callstack 0
   875                           
   876                           ; 2 bytes @ 0x22
   877   000023                     	ds	2
   878   000025                     eventRead@ser:
   879                           	callstack 0
   880   000025                     outputPrint@i:
   881                           	callstack 0
   882                           
   883                           ; 2 bytes @ 0x24
   884   000025                     	ds	2
   885   000027                     outputPrint@i_290:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0x26
   889   000027                     	ds	2
   890   000029                     outputPrint@i_296:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0x28
   894   000029                     	ds	2
   895   00002B                     outputPrint@i_302:
   896                           	callstack 0
   897                           
   898                           ; 2 bytes @ 0x2A
   899   00002B                     	ds	2
   900   00002D                     outputPrint@i_308:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0x2C
   904   00002D                     	ds	2
   905   00002F                     outputPrint@i_312:
   906                           	callstack 0
   907                           
   908                           ; 2 bytes @ 0x2E
   909   00002F                     	ds	2
   910   000031                     ??_smLoop:
   911                           
   912                           ; 1 bytes @ 0x30
   913   000031                     	ds	3
   914   000034                     _smLoop$1291:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0x33
   918   000034                     	ds	2
   919   000036                     smLoop@evento:
   920                           	callstack 0
   921                           
   922                           ; 1 bytes @ 0x35
   923   000036                     	ds	1
   924   000037                     
   925                           ; 1 bytes @ 0x36
   926 ;;
   927 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   928 ;;
   929 ;; *************** function _main *****************
   930 ;; Defined at:
   931 ;;		line 14 in file "main.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         0       0       0       0       0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels required when called: 7
   951 ;; This function calls:
   952 ;;		_eventInit
   953 ;;		_getTime
   954 ;;		_outputInit
   955 ;;		_smInit
   956 ;;		_smLoop
   957 ;;		_timerInit
   958 ;;		_timerReset
   959 ;;		_timerWait
   960 ;;		_varInit
   961 ;; This function is called by:
   962 ;;		Startup code after reset
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text0
   967   005AA2                     __ptext0:
   968                           	callstack 0
   969   005AA2                     _main:
   970                           	callstack 24
   971   005AA2                     
   972                           ;main.c: 16:     timerInit();
   973   005AA2  EC2D  F02C         	call	_timerInit	;wreg free
   974                           
   975                           ;main.c: 17:     varInit();
   976   005AA6  EC72  F02C         	call	_varInit	;wreg free
   977                           
   978                           ;main.c: 18:     eventInit();
   979   005AAA  EC69  F02C         	call	_eventInit	;wreg free
   980                           
   981                           ;main.c: 19:     outputInit();
   982   005AAE  EC36  F02C         	call	_outputInit	;wreg free
   983                           
   984                           ;main.c: 20:     smInit();
   985   005AB2  EC59  F02C         	call	_smInit	;wreg free
   986   005AB6                     l4064:
   987                           
   988                           ;main.c: 22:         timerReset(getTime());
   989   005AB6  EC40  F02C         	call	_getTime	;wreg free
   990   005ABA  C001  F007         	movff	?_getTime,timerReset@tempo
   991   005ABE  C002  F008         	movff	?_getTime+1,timerReset@tempo+1
   992   005AC2  ECA1  F02D         	call	_timerReset	;wreg free
   993   005AC6                     
   994                           ;main.c: 23:         smLoop();
   995   005AC6  ECEE  F034         	call	_smLoop	;wreg free
   996   005ACA                     
   997                           ;main.c: 24:         timerWait();
   998   005ACA  EC61  F02C         	call	_timerWait	;wreg free
   999                           
  1000                           ;main.c: 25:     }
  1001   005ACE  EF5B  F02D         	goto	l4064
  1002   005AD2  EF00  F000         	goto	start
  1003   005AD6                     __end_of_main:
  1004                           	callstack 0
  1005                           
  1006 ;; *************** function _varInit *****************
  1007 ;; Defined at:
  1008 ;;		line 10 in file "var.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;		None
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0, cstack
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1022 ;;      Params:         0       0       0       0       0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1025 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1026 ;;Total ram usage:        0 bytes
  1027 ;; Hardware stack levels used: 1
  1028 ;; Hardware stack levels required when called: 2
  1029 ;; This function calls:
  1030 ;;		_dsInit
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text1
  1037   0058E4                     __ptext1:
  1038                           	callstack 0
  1039   0058E4                     _varInit:
  1040                           	callstack 28
  1041   0058E4                     
  1042                           ;var.c: 12:     state = 0;
  1043   0058E4  0E00               	movlw	0
  1044   0058E6  6E4B               	movwf	_state^0,c
  1045                           
  1046                           ;var.c: 13:     time = 99;
  1047   0058E8  0E00               	movlw	0
  1048   0058EA  6E4E               	movwf	(_time+1)^0,c
  1049   0058EC  0E63               	movlw	99
  1050   0058EE  6E4D               	movwf	_time^0,c
  1051   0058F0                     
  1052                           ;var.c: 14:     dsInit();
  1053   0058F0  EC26  F02C         	call	_dsInit	;wreg free
  1054   0058F4  0012               	return		;funcret
  1055   0058F6                     __end_of_varInit:
  1056                           	callstack 0
  1057                           
  1058 ;; *************** function _dsInit *****************
  1059 ;; Defined at:
  1060 ;;		line 9 in file "rtc.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		status,2, status,0, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1074 ;;      Params:         0       0       0       0       0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1077 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1078 ;;Total ram usage:        0 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 1
  1081 ;; This function calls:
  1082 ;;		_i2cInit
  1083 ;; This function is called by:
  1084 ;;		_varInit
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text2
  1089   00584C                     __ptext2:
  1090                           	callstack 0
  1091   00584C                     _dsInit:
  1092                           	callstack 28
  1093   00584C                     
  1094                           ;rtc.c: 10:  i2cInit();
  1095   00584C  EC23  F02C         	call	_i2cInit	;wreg free
  1096   005850  0012               	return		;funcret
  1097   005852                     __end_of_dsInit:
  1098                           	callstack 0
  1099                           
  1100 ;; *************** function _i2cInit *****************
  1101 ;; Defined at:
  1102 ;;		line 14 in file "i2c.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      void 
  1109 ;; Registers used:
  1110 ;;		status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1116 ;;      Params:         0       0       0       0       0       0       0       0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels used: 1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_dsInit
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text3
  1130   005846                     __ptext3:
  1131                           	callstack 0
  1132   005846                     _i2cInit:
  1133                           	callstack 28
  1134   005846                     
  1135                           ;i2c.c: 15:  ((((*(volatile __near unsigned char*)0xF93)) |= (1<<(0))));
  1136   005846  8093               	bsf	147,0,c	;volatile
  1137                           
  1138                           ;i2c.c: 16:  ((((*(volatile __near unsigned char*)0xF93)) |= (1<<(1))));
  1139   005848  8293               	bsf	147,1,c	;volatile
  1140   00584A  0012               	return		;funcret
  1141   00584C                     __end_of_i2cInit:
  1142                           	callstack 0
  1143                           
  1144 ;; *************** function _timerWait *****************
  1145 ;; Defined at:
  1146 ;;		line 27 in file "timer.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		None
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1160 ;;      Params:         0       0       0       0       0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1163 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; This function calls:
  1167 ;;		Nothing
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text4
  1174   0058C2                     __ptext4:
  1175                           	callstack 0
  1176   0058C2                     _timerWait:
  1177                           	callstack 30
  1178   0058C2                     l440:
  1179   0058C2  A4F2               	btfss	242,2,c	;volatile
  1180   0058C4  EF66  F02C         	goto	u2121
  1181   0058C8  EF68  F02C         	goto	u2120
  1182   0058CC                     u2121:
  1183   0058CC  EF61  F02C         	goto	l440
  1184   0058D0                     u2120:
  1185   0058D0  0012               	return		;funcret
  1186   0058D2                     __end_of_timerWait:
  1187                           	callstack 0
  1188                           
  1189 ;; *************** function _timerReset *****************
  1190 ;; Defined at:
  1191 ;;		line 33 in file "timer.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  tempo           2    6[COMRAM] unsigned int 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;  ciclos          2    8[COMRAM] unsigned int 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1205 ;;      Params:         2       0       0       0       0       0       0       0       0
  1206 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1208 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1209 ;;Total ram usage:        4 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; Hardware stack levels required when called: 1
  1212 ;; This function calls:
  1213 ;;		___wmul
  1214 ;; This function is called by:
  1215 ;;		_main
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text5
  1220   005B42                     __ptext5:
  1221                           	callstack 0
  1222   005B42                     _timerReset:
  1223                           	callstack 29
  1224   005B42                     
  1225                           ;timer.c: 35:     unsigned ciclos = tempo * 5;
  1226   005B42  C007  F001         	movff	timerReset@tempo,___wmul@multiplier
  1227   005B46  C008  F002         	movff	timerReset@tempo+1,___wmul@multiplier+1
  1228   005B4A  0E00               	movlw	0
  1229   005B4C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1230   005B4E  0E05               	movlw	5
  1231   005B50  6E03               	movwf	___wmul@multiplicand^0,c
  1232   005B52  ECF6  F02C         	call	___wmul	;wreg free
  1233   005B56  C001  F009         	movff	?___wmul,timerReset@ciclos
  1234   005B5A  C002  F00A         	movff	?___wmul+1,timerReset@ciclos+1
  1235   005B5E                     
  1236                           ;timer.c: 37:     ciclos = 65535 - ciclos;
  1237   005B5E  1E09               	comf	timerReset@ciclos^0,f,c
  1238   005B60  1E0A               	comf	(timerReset@ciclos+1)^0,f,c
  1239   005B62                     
  1240                           ;timer.c: 39:     ciclos -= 14;
  1241   005B62  0E0E               	movlw	14
  1242   005B64  5E09               	subwf	timerReset@ciclos^0,f,c
  1243   005B66  0E00               	movlw	0
  1244   005B68  5A0A               	subwfb	(timerReset@ciclos+1)^0,f,c
  1245   005B6A                     
  1246                           ;timer.c: 40:     (*(volatile __near unsigned char*)0xFD7) = (ciclos >> 8);
  1247   005B6A  500A               	movf	(timerReset@ciclos+1)^0,w,c
  1248   005B6C  6ED7               	movwf	215,c	;volatile
  1249   005B6E                     
  1250                           ;timer.c: 41:     (*(volatile __near unsigned char*)0xFD6) = (ciclos & 0x00FF);
  1251   005B6E  C009  FFD6         	movff	timerReset@ciclos,4054	;volatile
  1252   005B72                     
  1253                           ;timer.c: 43:     (((*(volatile __near unsigned char*)0xFF2)) = ((*(volatile __near unsi
      +                          gned char*)0xFF2)) & (~(1<<(2))));
  1254   005B72  50F2               	movf	242,w,c	;volatile
  1255   005B74  0BFB               	andlw	251
  1256   005B76  6EF2               	movwf	242,c	;volatile
  1257   005B78  0012               	return		;funcret
  1258   005B7A                     __end_of_timerReset:
  1259                           	callstack 0
  1260                           
  1261 ;; *************** function ___wmul *****************
  1262 ;; Defined at:
  1263 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\Umul16.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  multiplier      2    0[COMRAM] unsigned int 
  1266 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;  product         2    4[COMRAM] unsigned int 
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  2    0[COMRAM] unsigned int 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, prodl, prodh
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1278 ;;      Params:         4       0       0       0       0       0       0       0       0
  1279 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1280 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1281 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1282 ;;Total ram usage:        6 bytes
  1283 ;; Hardware stack levels used: 1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_timerReset
  1288 ;;		_bcd2dec
  1289 ;;		_pwmSet
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text6
  1294   0059EC                     __ptext6:
  1295                           	callstack 0
  1296   0059EC                     ___wmul:
  1297                           	callstack 29
  1298   0059EC  5001               	movf	___wmul@multiplier^0,w,c
  1299   0059EE  0203               	mulwf	___wmul@multiplicand^0,c
  1300   0059F0  CFF3 F005          	movff	prodl,___wmul@product
  1301   0059F4  CFF4 F006          	movff	prodh,___wmul@product+1
  1302   0059F8  5001               	movf	___wmul@multiplier^0,w,c
  1303   0059FA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1304   0059FC  50F3               	movf	243,w,c
  1305   0059FE  2606               	addwf	(___wmul@product+1)^0,f,c
  1306   005A00  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1307   005A02  0203               	mulwf	___wmul@multiplicand^0,c
  1308   005A04  50F3               	movf	243,w,c
  1309   005A06  2606               	addwf	(___wmul@product+1)^0,f,c
  1310   005A08  C005  F001         	movff	___wmul@product,?___wmul
  1311   005A0C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1312   005A10  0012               	return		;funcret
  1313   005A12                     __end_of___wmul:
  1314                           	callstack 0
  1315                           
  1316 ;; *************** function _timerInit *****************
  1317 ;; Defined at:
  1318 ;;		line 46 in file "timer.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;		None
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;		None
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg, status,2, status,0
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1332 ;;      Params:         0       0       0       0       0       0       0       0       0
  1333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1335 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1336 ;;Total ram usage:        0 bytes
  1337 ;; Hardware stack levels used: 1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_main
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text7
  1346   00585A                     __ptext7:
  1347                           	callstack 0
  1348   00585A                     _timerInit:
  1349                           	callstack 30
  1350   00585A                     
  1351                           ;timer.c: 47:     (*(volatile __near unsigned char*)0xFD5) = 0b00001000;
  1352   00585A  0E08               	movlw	8
  1353   00585C  6ED5               	movwf	213,c	;volatile
  1354   00585E                     
  1355                           ;timer.c: 48:     (((*(volatile __near unsigned char*)0xFD5)) |= (1<<(7)));
  1356   00585E  8ED5               	bsf	213,7,c	;volatile
  1357   005860  0012               	return		;funcret
  1358   005862                     __end_of_timerInit:
  1359                           	callstack 0
  1360                           
  1361 ;; *************** function _smLoop *****************
  1362 ;; Defined at:
  1363 ;;		line 18 in file "stateMachine.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  evento          1   53[COMRAM] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1377 ;;      Params:         0       0       0       0       0       0       0       0       0
  1378 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1379 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1380 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1381 ;;Total ram usage:        6 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 6
  1384 ;; This function calls:
  1385 ;;		_adcRead
  1386 ;;		_eventRead
  1387 ;;		_getAlarmLevel1a
  1388 ;;		_getAlarmLevel1b
  1389 ;;		_getAlarmLevel2a
  1390 ;;		_getAlarmLevel2b
  1391 ;;		_getLanguage
  1392 ;;		_getState
  1393 ;;		_getTime
  1394 ;;		_ledState
  1395 ;;		_outputPrint
  1396 ;;		_setAlarmLevel1a
  1397 ;;		_setAlarmLevel1b
  1398 ;;		_setAlarmLevel2a
  1399 ;;		_setAlarmLevel2b
  1400 ;;		_setLanguage
  1401 ;;		_setState
  1402 ;;		_setTime
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text8
  1409   0069DC                     __ptext8:
  1410                           	callstack 0
  1411   0069DC                     _smLoop:
  1412                           	callstack 24
  1413   0069DC                     
  1414                           ;stateMachine.c: 19:     unsigned char evento;;stateMachine.c: 23:     evento = eventRea
      +                          d();
  1415   0069DC  ECF9  F036         	call	_eventRead	;wreg free
  1416   0069E0  501D               	movf	?_eventRead^0,w,c
  1417   0069E2  6E36               	movwf	smLoop@evento^0,c
  1418   0069E4                     
  1419                           ;stateMachine.c: 27:     if(adcRead(1)>getAlarmLevel1a()){
  1420   0069E4  EC86  F02F         	call	_getAlarmLevel1a	;wreg free
  1421   0069E8  C018  F031         	movff	?_getAlarmLevel1a,??_smLoop
  1422   0069EC  C019  F032         	movff	?_getAlarmLevel1a+1,??_smLoop+1
  1423   0069F0  0E00               	movlw	0
  1424   0069F2  6E02               	movwf	(adcRead@a+1)^0,c
  1425   0069F4  0E01               	movlw	1
  1426   0069F6  6E01               	movwf	adcRead@a^0,c
  1427   0069F8  ECF7  F030         	call	_adcRead	;wreg free
  1428   0069FC  5001               	movf	?_adcRead^0,w,c
  1429   0069FE  5C31               	subwf	??_smLoop^0,w,c
  1430   006A00  5032               	movf	(??_smLoop+1)^0,w,c
  1431   006A02  0A80               	xorlw	128
  1432   006A04  6E33               	movwf	(??_smLoop+2)^0,c
  1433   006A06  5002               	movf	(?_adcRead+1)^0,w,c
  1434   006A08  0A80               	xorlw	128
  1435   006A0A  5833               	subwfb	(??_smLoop+2)^0,w,c
  1436   006A0C  B0D8               	btfsc	status,0,c
  1437   006A0E  EF0B  F035         	goto	u4131
  1438   006A12  EF0D  F035         	goto	u4130
  1439   006A16                     u4131:
  1440   006A16  EF14  F035         	goto	l3964
  1441   006A1A                     u4130:
  1442   006A1A                     
  1443                           ;stateMachine.c: 28:         ledState(0,1);
  1444   006A1A  0E01               	movlw	1
  1445   006A1C  6E01               	movwf	ledState@state^0,c
  1446   006A1E  0E00               	movlw	0
  1447   006A20  EC9F  F032         	call	_ledState
  1448                           
  1449                           ;stateMachine.c: 29:     }else{
  1450   006A24  EF19  F035         	goto	l394
  1451   006A28                     l3964:
  1452                           
  1453                           ;stateMachine.c: 30:         ledState(0,0);
  1454   006A28  0E00               	movlw	0
  1455   006A2A  6E01               	movwf	ledState@state^0,c
  1456   006A2C  0E00               	movlw	0
  1457   006A2E  EC9F  F032         	call	_ledState
  1458   006A32                     l394:
  1459                           
  1460                           ;stateMachine.c: 33:     if(adcRead(3)>getAlarmLevel2a()){
  1461   006A32  ECE8  F02F         	call	_getAlarmLevel2a	;wreg free
  1462   006A36  C018  F031         	movff	?_getAlarmLevel2a,??_smLoop
  1463   006A3A  C019  F032         	movff	?_getAlarmLevel2a+1,??_smLoop+1
  1464   006A3E  0E00               	movlw	0
  1465   006A40  6E02               	movwf	(adcRead@a+1)^0,c
  1466   006A42  0E03               	movlw	3
  1467   006A44  6E01               	movwf	adcRead@a^0,c
  1468   006A46  ECF7  F030         	call	_adcRead	;wreg free
  1469   006A4A  5001               	movf	?_adcRead^0,w,c
  1470   006A4C  5C31               	subwf	??_smLoop^0,w,c
  1471   006A4E  5032               	movf	(??_smLoop+1)^0,w,c
  1472   006A50  0A80               	xorlw	128
  1473   006A52  6E33               	movwf	(??_smLoop+2)^0,c
  1474   006A54  5002               	movf	(?_adcRead+1)^0,w,c
  1475   006A56  0A80               	xorlw	128
  1476   006A58  5833               	subwfb	(??_smLoop+2)^0,w,c
  1477   006A5A  B0D8               	btfsc	status,0,c
  1478   006A5C  EF32  F035         	goto	u4141
  1479   006A60  EF34  F035         	goto	u4140
  1480   006A64                     u4141:
  1481   006A64  EF3B  F035         	goto	l3968
  1482   006A68                     u4140:
  1483   006A68                     
  1484                           ;stateMachine.c: 34:         ledState(2,1);
  1485   006A68  0E01               	movlw	1
  1486   006A6A  6E01               	movwf	ledState@state^0,c
  1487   006A6C  0E02               	movlw	2
  1488   006A6E  EC9F  F032         	call	_ledState
  1489                           
  1490                           ;stateMachine.c: 35:     }else{
  1491   006A72  EF40  F035         	goto	l396
  1492   006A76                     l3968:
  1493                           
  1494                           ;stateMachine.c: 36:         ledState(2,0);
  1495   006A76  0E00               	movlw	0
  1496   006A78  6E01               	movwf	ledState@state^0,c
  1497   006A7A  0E02               	movlw	2
  1498   006A7C  EC9F  F032         	call	_ledState
  1499   006A80                     l396:
  1500                           
  1501                           ;stateMachine.c: 39:     if(adcRead(1)<getAlarmLevel1b()){
  1502   006A80  0E00               	movlw	0
  1503   006A82  6E02               	movwf	(adcRead@a+1)^0,c
  1504   006A84  0E01               	movlw	1
  1505   006A86  6E01               	movwf	adcRead@a^0,c
  1506   006A88  ECF7  F030         	call	_adcRead	;wreg free
  1507   006A8C  C001  F031         	movff	?_adcRead,??_smLoop
  1508   006A90  C002  F032         	movff	?_adcRead+1,??_smLoop+1
  1509   006A94  ECB7  F02F         	call	_getAlarmLevel1b	;wreg free
  1510   006A98  5018               	movf	?_getAlarmLevel1b^0,w,c
  1511   006A9A  5C31               	subwf	??_smLoop^0,w,c
  1512   006A9C  5032               	movf	(??_smLoop+1)^0,w,c
  1513   006A9E  0A80               	xorlw	128
  1514   006AA0  6E33               	movwf	(??_smLoop+2)^0,c
  1515   006AA2  5019               	movf	(?_getAlarmLevel1b+1)^0,w,c
  1516   006AA4  0A80               	xorlw	128
  1517   006AA6  5833               	subwfb	(??_smLoop+2)^0,w,c
  1518   006AA8  B0D8               	btfsc	status,0,c
  1519   006AAA  EF59  F035         	goto	u4151
  1520   006AAE  EF5B  F035         	goto	u4150
  1521   006AB2                     u4151:
  1522   006AB2  EF62  F035         	goto	l3972
  1523   006AB6                     u4150:
  1524   006AB6                     
  1525                           ;stateMachine.c: 40:         ledState(1,1);
  1526   006AB6  0E01               	movlw	1
  1527   006AB8  6E01               	movwf	ledState@state^0,c
  1528   006ABA  0E01               	movlw	1
  1529   006ABC  EC9F  F032         	call	_ledState
  1530                           
  1531                           ;stateMachine.c: 41:     }else{
  1532   006AC0  EF67  F035         	goto	l398
  1533   006AC4                     l3972:
  1534                           
  1535                           ;stateMachine.c: 42:         ledState(1,0);
  1536   006AC4  0E00               	movlw	0
  1537   006AC6  6E01               	movwf	ledState@state^0,c
  1538   006AC8  0E01               	movlw	1
  1539   006ACA  EC9F  F032         	call	_ledState
  1540   006ACE                     l398:
  1541                           
  1542                           ;stateMachine.c: 45:     if(adcRead(3)<getAlarmLevel2b()){
  1543   006ACE  0E00               	movlw	0
  1544   006AD0  6E02               	movwf	(adcRead@a+1)^0,c
  1545   006AD2  0E03               	movlw	3
  1546   006AD4  6E01               	movwf	adcRead@a^0,c
  1547   006AD6  ECF7  F030         	call	_adcRead	;wreg free
  1548   006ADA  C001  F031         	movff	?_adcRead,??_smLoop
  1549   006ADE  C002  F032         	movff	?_adcRead+1,??_smLoop+1
  1550   006AE2  EC19  F030         	call	_getAlarmLevel2b	;wreg free
  1551   006AE6  5018               	movf	?_getAlarmLevel2b^0,w,c
  1552   006AE8  5C31               	subwf	??_smLoop^0,w,c
  1553   006AEA  5032               	movf	(??_smLoop+1)^0,w,c
  1554   006AEC  0A80               	xorlw	128
  1555   006AEE  6E33               	movwf	(??_smLoop+2)^0,c
  1556   006AF0  5019               	movf	(?_getAlarmLevel2b+1)^0,w,c
  1557   006AF2  0A80               	xorlw	128
  1558   006AF4  5833               	subwfb	(??_smLoop+2)^0,w,c
  1559   006AF6  B0D8               	btfsc	status,0,c
  1560   006AF8  EF80  F035         	goto	u4161
  1561   006AFC  EF82  F035         	goto	u4160
  1562   006B00                     u4161:
  1563   006B00  EF89  F035         	goto	l3976
  1564   006B04                     u4160:
  1565   006B04                     
  1566                           ;stateMachine.c: 46:         ledState(3,1);
  1567   006B04  0E01               	movlw	1
  1568   006B06  6E01               	movwf	ledState@state^0,c
  1569   006B08  0E03               	movlw	3
  1570   006B0A  EC9F  F032         	call	_ledState
  1571                           
  1572                           ;stateMachine.c: 47:     }else{
  1573   006B0E  EFC0  F036         	goto	l4052
  1574   006B12                     l3976:
  1575                           
  1576                           ;stateMachine.c: 48:         ledState(3,0);
  1577   006B12  0E00               	movlw	0
  1578   006B14  6E01               	movwf	ledState@state^0,c
  1579   006B16  0E03               	movlw	3
  1580   006B18  EC9F  F032         	call	_ledState
  1581   006B1C  EFC0  F036         	goto	l4052
  1582   006B20                     l3978:
  1583                           
  1584                           ;stateMachine.c: 56:             if (evento == EV_RIGHT) {
  1585   006B20  0E03               	movlw	3
  1586   006B22  1836               	xorwf	smLoop@evento^0,w,c
  1587   006B24  A4D8               	btfss	status,2,c
  1588   006B26  EF97  F035         	goto	u4171
  1589   006B2A  EF99  F035         	goto	u4170
  1590   006B2E                     u4171:
  1591   006B2E  EFA3  F035         	goto	l3982
  1592   006B32                     u4170:
  1593   006B32                     
  1594                           ;stateMachine.c: 57:                 setAlarmLevel1a(getAlarmLevel1a() + 1);
  1595   006B32  EC86  F02F         	call	_getAlarmLevel1a	;wreg free
  1596   006B36  0E01               	movlw	1
  1597   006B38  2418               	addwf	?_getAlarmLevel1a^0,w,c
  1598   006B3A  6E1B               	movwf	setAlarmLevel1a@newAlarmLevel1a^0,c
  1599   006B3C  0E00               	movlw	0
  1600   006B3E  2019               	addwfc	(?_getAlarmLevel1a+1)^0,w,c
  1601   006B40  6E1C               	movwf	(setAlarmLevel1a@newAlarmLevel1a+1)^0,c
  1602   006B42  ECBD  F02D         	call	_setAlarmLevel1a	;wreg free
  1603   006B46                     l3982:
  1604                           
  1605                           ;stateMachine.c: 59:             if (evento == EV_LEFT) {
  1606   006B46  0E02               	movlw	2
  1607   006B48  1836               	xorwf	smLoop@evento^0,w,c
  1608   006B4A  A4D8               	btfss	status,2,c
  1609   006B4C  EFAA  F035         	goto	u4181
  1610   006B50  EFAC  F035         	goto	u4180
  1611   006B54                     u4181:
  1612   006B54  EFB6  F035         	goto	l3986
  1613   006B58                     u4180:
  1614   006B58                     
  1615                           ;stateMachine.c: 60:                 setAlarmLevel1a(getAlarmLevel1a() - 1);
  1616   006B58  EC86  F02F         	call	_getAlarmLevel1a	;wreg free
  1617   006B5C  0EFF               	movlw	255
  1618   006B5E  2418               	addwf	?_getAlarmLevel1a^0,w,c
  1619   006B60  6E1B               	movwf	setAlarmLevel1a@newAlarmLevel1a^0,c
  1620   006B62  0EFF               	movlw	255
  1621   006B64  2019               	addwfc	(?_getAlarmLevel1a+1)^0,w,c
  1622   006B66  6E1C               	movwf	(setAlarmLevel1a@newAlarmLevel1a+1)^0,c
  1623   006B68  ECBD  F02D         	call	_setAlarmLevel1a	;wreg free
  1624   006B6C                     l3986:
  1625                           
  1626                           ;stateMachine.c: 64:             if (evento == EV_ENTER) {
  1627   006B6C  0E04               	movlw	4
  1628   006B6E  1836               	xorwf	smLoop@evento^0,w,c
  1629   006B70  A4D8               	btfss	status,2,c
  1630   006B72  EFBD  F035         	goto	u4191
  1631   006B76  EFBF  F035         	goto	u4190
  1632   006B7A                     u4191:
  1633   006B7A  EFE6  F036         	goto	l4054
  1634   006B7E                     u4190:
  1635   006B7E                     
  1636                           ;stateMachine.c: 65:                 setState(STATE_ALARME_TEMP_MIN);
  1637   006B7E  0E02               	movlw	2
  1638   006B80  EC29  F02C         	call	_setState
  1639   006B84  EFE6  F036         	goto	l4054
  1640   006B88                     l3990:
  1641                           
  1642                           ;stateMachine.c: 70:             if (evento == EV_RIGHT) {
  1643   006B88  0E03               	movlw	3
  1644   006B8A  1836               	xorwf	smLoop@evento^0,w,c
  1645   006B8C  A4D8               	btfss	status,2,c
  1646   006B8E  EFCB  F035         	goto	u4201
  1647   006B92  EFCD  F035         	goto	u4200
  1648   006B96                     u4201:
  1649   006B96  EFD7  F035         	goto	l3994
  1650   006B9A                     u4200:
  1651   006B9A                     
  1652                           ;stateMachine.c: 71:                 setAlarmLevel2a(getAlarmLevel2a() + 1);
  1653   006B9A  ECE8  F02F         	call	_getAlarmLevel2a	;wreg free
  1654   006B9E  0E01               	movlw	1
  1655   006BA0  2418               	addwf	?_getAlarmLevel2a^0,w,c
  1656   006BA2  6E1B               	movwf	setAlarmLevel2a@newAlarmLevel2a^0,c
  1657   006BA4  0E00               	movlw	0
  1658   006BA6  2019               	addwfc	(?_getAlarmLevel2a+1)^0,w,c
  1659   006BA8  6E1C               	movwf	(setAlarmLevel2a@newAlarmLevel2a+1)^0,c
  1660   006BAA  ECF7  F02D         	call	_setAlarmLevel2a	;wreg free
  1661   006BAE                     l3994:
  1662                           
  1663                           ;stateMachine.c: 73:             if (evento == EV_LEFT) {
  1664   006BAE  0E02               	movlw	2
  1665   006BB0  1836               	xorwf	smLoop@evento^0,w,c
  1666   006BB2  A4D8               	btfss	status,2,c
  1667   006BB4  EFDE  F035         	goto	u4211
  1668   006BB8  EFE0  F035         	goto	u4210
  1669   006BBC                     u4211:
  1670   006BBC  EFEA  F035         	goto	l3998
  1671   006BC0                     u4210:
  1672   006BC0                     
  1673                           ;stateMachine.c: 74:                 setAlarmLevel2a(getAlarmLevel2a() - 1);
  1674   006BC0  ECE8  F02F         	call	_getAlarmLevel2a	;wreg free
  1675   006BC4  0EFF               	movlw	255
  1676   006BC6  2418               	addwf	?_getAlarmLevel2a^0,w,c
  1677   006BC8  6E1B               	movwf	setAlarmLevel2a@newAlarmLevel2a^0,c
  1678   006BCA  0EFF               	movlw	255
  1679   006BCC  2019               	addwfc	(?_getAlarmLevel2a+1)^0,w,c
  1680   006BCE  6E1C               	movwf	(setAlarmLevel2a@newAlarmLevel2a+1)^0,c
  1681   006BD0  ECF7  F02D         	call	_setAlarmLevel2a	;wreg free
  1682   006BD4                     l3998:
  1683                           
  1684                           ;stateMachine.c: 78:             if (evento == EV_ENTER) {
  1685   006BD4  0E04               	movlw	4
  1686   006BD6  1836               	xorwf	smLoop@evento^0,w,c
  1687   006BD8  A4D8               	btfss	status,2,c
  1688   006BDA  EFF1  F035         	goto	u4221
  1689   006BDE  EFF3  F035         	goto	u4220
  1690   006BE2                     u4221:
  1691   006BE2  EFE6  F036         	goto	l4054
  1692   006BE6                     u4220:
  1693   006BE6                     
  1694                           ;stateMachine.c: 79:                 setState(STATE_ALARME_PRESS_MIN);
  1695   006BE6  0E03               	movlw	3
  1696   006BE8  EC29  F02C         	call	_setState
  1697   006BEC  EFE6  F036         	goto	l4054
  1698   006BF0                     l4002:
  1699                           
  1700                           ;stateMachine.c: 84:             if (evento == EV_RIGHT) {
  1701   006BF0  0E03               	movlw	3
  1702   006BF2  1836               	xorwf	smLoop@evento^0,w,c
  1703   006BF4  A4D8               	btfss	status,2,c
  1704   006BF6  EFFF  F035         	goto	u4231
  1705   006BFA  EF01  F036         	goto	u4230
  1706   006BFE                     u4231:
  1707   006BFE  EF0B  F036         	goto	l4006
  1708   006C02                     u4230:
  1709   006C02                     
  1710                           ;stateMachine.c: 85:                 setAlarmLevel1b(getAlarmLevel1b() + 1);
  1711   006C02  ECB7  F02F         	call	_getAlarmLevel1b	;wreg free
  1712   006C06  0E01               	movlw	1
  1713   006C08  2418               	addwf	?_getAlarmLevel1b^0,w,c
  1714   006C0A  6E1B               	movwf	setAlarmLevel1b@newAlarmLevel1b^0,c
  1715   006C0C  0E00               	movlw	0
  1716   006C0E  2019               	addwfc	(?_getAlarmLevel1b+1)^0,w,c
  1717   006C10  6E1C               	movwf	(setAlarmLevel1b@newAlarmLevel1b+1)^0,c
  1718   006C12  ECDA  F02D         	call	_setAlarmLevel1b	;wreg free
  1719   006C16                     l4006:
  1720                           
  1721                           ;stateMachine.c: 87:             if (evento == EV_LEFT) {
  1722   006C16  0E02               	movlw	2
  1723   006C18  1836               	xorwf	smLoop@evento^0,w,c
  1724   006C1A  A4D8               	btfss	status,2,c
  1725   006C1C  EF12  F036         	goto	u4241
  1726   006C20  EF14  F036         	goto	u4240
  1727   006C24                     u4241:
  1728   006C24  EF1E  F036         	goto	l4010
  1729   006C28                     u4240:
  1730   006C28                     
  1731                           ;stateMachine.c: 88:                 setAlarmLevel1b(getAlarmLevel1b() - 1);
  1732   006C28  ECB7  F02F         	call	_getAlarmLevel1b	;wreg free
  1733   006C2C  0EFF               	movlw	255
  1734   006C2E  2418               	addwf	?_getAlarmLevel1b^0,w,c
  1735   006C30  6E1B               	movwf	setAlarmLevel1b@newAlarmLevel1b^0,c
  1736   006C32  0EFF               	movlw	255
  1737   006C34  2019               	addwfc	(?_getAlarmLevel1b+1)^0,w,c
  1738   006C36  6E1C               	movwf	(setAlarmLevel1b@newAlarmLevel1b+1)^0,c
  1739   006C38  ECDA  F02D         	call	_setAlarmLevel1b	;wreg free
  1740   006C3C                     l4010:
  1741                           
  1742                           ;stateMachine.c: 92:             if (evento == EV_ENTER) {
  1743   006C3C  0E04               	movlw	4
  1744   006C3E  1836               	xorwf	smLoop@evento^0,w,c
  1745   006C40  A4D8               	btfss	status,2,c
  1746   006C42  EF25  F036         	goto	u4251
  1747   006C46  EF27  F036         	goto	u4250
  1748   006C4A                     u4251:
  1749   006C4A  EFE6  F036         	goto	l4054
  1750   006C4E                     u4250:
  1751   006C4E                     
  1752                           ;stateMachine.c: 93:                 setState(STATE_ALARME_PRESS_MAX);
  1753   006C4E  0E01               	movlw	1
  1754   006C50  EC29  F02C         	call	_setState
  1755   006C54  EFE6  F036         	goto	l4054
  1756   006C58                     l4014:
  1757                           
  1758                           ;stateMachine.c: 98:             if (evento == EV_RIGHT) {
  1759   006C58  0E03               	movlw	3
  1760   006C5A  1836               	xorwf	smLoop@evento^0,w,c
  1761   006C5C  A4D8               	btfss	status,2,c
  1762   006C5E  EF33  F036         	goto	u4261
  1763   006C62  EF35  F036         	goto	u4260
  1764   006C66                     u4261:
  1765   006C66  EF3F  F036         	goto	l4018
  1766   006C6A                     u4260:
  1767   006C6A                     
  1768                           ;stateMachine.c: 99:                 setAlarmLevel2b(getAlarmLevel2b() + 1);
  1769   006C6A  EC19  F030         	call	_getAlarmLevel2b	;wreg free
  1770   006C6E  0E01               	movlw	1
  1771   006C70  2418               	addwf	?_getAlarmLevel2b^0,w,c
  1772   006C72  6E1B               	movwf	setAlarmLevel2b@newAlarmLevel2b^0,c
  1773   006C74  0E00               	movlw	0
  1774   006C76  2019               	addwfc	(?_getAlarmLevel2b+1)^0,w,c
  1775   006C78  6E1C               	movwf	(setAlarmLevel2b@newAlarmLevel2b+1)^0,c
  1776   006C7A  EC14  F02E         	call	_setAlarmLevel2b	;wreg free
  1777   006C7E                     l4018:
  1778                           
  1779                           ;stateMachine.c: 101:             if (evento == EV_LEFT) {
  1780   006C7E  0E02               	movlw	2
  1781   006C80  1836               	xorwf	smLoop@evento^0,w,c
  1782   006C82  A4D8               	btfss	status,2,c
  1783   006C84  EF46  F036         	goto	u4271
  1784   006C88  EF48  F036         	goto	u4270
  1785   006C8C                     u4271:
  1786   006C8C  EF52  F036         	goto	l4022
  1787   006C90                     u4270:
  1788   006C90                     
  1789                           ;stateMachine.c: 102:                 setAlarmLevel2b(getAlarmLevel2b() - 1);
  1790   006C90  EC19  F030         	call	_getAlarmLevel2b	;wreg free
  1791   006C94  0EFF               	movlw	255
  1792   006C96  2418               	addwf	?_getAlarmLevel2b^0,w,c
  1793   006C98  6E1B               	movwf	setAlarmLevel2b@newAlarmLevel2b^0,c
  1794   006C9A  0EFF               	movlw	255
  1795   006C9C  2019               	addwfc	(?_getAlarmLevel2b+1)^0,w,c
  1796   006C9E  6E1C               	movwf	(setAlarmLevel2b@newAlarmLevel2b+1)^0,c
  1797   006CA0  EC14  F02E         	call	_setAlarmLevel2b	;wreg free
  1798   006CA4                     l4022:
  1799                           
  1800                           ;stateMachine.c: 106:             if (evento == EV_ENTER) {
  1801   006CA4  0E04               	movlw	4
  1802   006CA6  1836               	xorwf	smLoop@evento^0,w,c
  1803   006CA8  A4D8               	btfss	status,2,c
  1804   006CAA  EF59  F036         	goto	u4281
  1805   006CAE  EF5B  F036         	goto	u4280
  1806   006CB2                     u4281:
  1807   006CB2  EFE6  F036         	goto	l4054
  1808   006CB6                     u4280:
  1809   006CB6                     
  1810                           ;stateMachine.c: 107:                 setState(STATE_TEMPO);
  1811   006CB6  0E04               	movlw	4
  1812   006CB8  EC29  F02C         	call	_setState
  1813   006CBC  EFE6  F036         	goto	l4054
  1814   006CC0                     l4026:
  1815                           
  1816                           ;stateMachine.c: 113:             if (evento == EV_RIGHT) {
  1817   006CC0  0E03               	movlw	3
  1818   006CC2  1836               	xorwf	smLoop@evento^0,w,c
  1819   006CC4  A4D8               	btfss	status,2,c
  1820   006CC6  EF67  F036         	goto	u4291
  1821   006CCA  EF69  F036         	goto	u4290
  1822   006CCE                     u4291:
  1823   006CCE  EF73  F036         	goto	l4030
  1824   006CD2                     u4290:
  1825   006CD2                     
  1826                           ;stateMachine.c: 114:                 setTime(getTime() + 1);
  1827   006CD2  EC40  F02C         	call	_getTime	;wreg free
  1828   006CD6  0E01               	movlw	1
  1829   006CD8  2401               	addwf	?_getTime^0,w,c
  1830   006CDA  6E03               	movwf	setTime@newTime^0,c
  1831   006CDC  0E00               	movlw	0
  1832   006CDE  2002               	addwfc	(?_getTime+1)^0,w,c
  1833   006CE0  6E04               	movwf	(setTime@newTime+1)^0,c
  1834   006CE2  EC3B  F02C         	call	_setTime	;wreg free
  1835   006CE6                     l4030:
  1836                           
  1837                           ;stateMachine.c: 116:             if (evento == EV_LEFT) {
  1838   006CE6  0E02               	movlw	2
  1839   006CE8  1836               	xorwf	smLoop@evento^0,w,c
  1840   006CEA  A4D8               	btfss	status,2,c
  1841   006CEC  EF7A  F036         	goto	u4301
  1842   006CF0  EF7C  F036         	goto	u4300
  1843   006CF4                     u4301:
  1844   006CF4  EF86  F036         	goto	l4034
  1845   006CF8                     u4300:
  1846   006CF8                     
  1847                           ;stateMachine.c: 117:                 setTime(getTime() - 1);
  1848   006CF8  EC40  F02C         	call	_getTime	;wreg free
  1849   006CFC  0EFF               	movlw	255
  1850   006CFE  2401               	addwf	?_getTime^0,w,c
  1851   006D00  6E03               	movwf	setTime@newTime^0,c
  1852   006D02  0EFF               	movlw	255
  1853   006D04  2002               	addwfc	(?_getTime+1)^0,w,c
  1854   006D06  6E04               	movwf	(setTime@newTime+1)^0,c
  1855   006D08  EC3B  F02C         	call	_setTime	;wreg free
  1856   006D0C                     l4034:
  1857                           
  1858                           ;stateMachine.c: 121:             if (evento == EV_ENTER) {
  1859   006D0C  0E04               	movlw	4
  1860   006D0E  1836               	xorwf	smLoop@evento^0,w,c
  1861   006D10  A4D8               	btfss	status,2,c
  1862   006D12  EF8D  F036         	goto	u4311
  1863   006D16  EF8F  F036         	goto	u4310
  1864   006D1A                     u4311:
  1865   006D1A  EFE6  F036         	goto	l4054
  1866   006D1E                     u4310:
  1867   006D1E                     
  1868                           ;stateMachine.c: 122:                 setState(STATE_IDIOMA);
  1869   006D1E  0E05               	movlw	5
  1870   006D20  EC29  F02C         	call	_setState
  1871   006D24  EFE6  F036         	goto	l4054
  1872   006D28                     l4038:
  1873                           
  1874                           ;stateMachine.c: 129:             if (evento == EV_RIGHT) {
  1875   006D28  0E03               	movlw	3
  1876   006D2A  1836               	xorwf	smLoop@evento^0,w,c
  1877   006D2C  A4D8               	btfss	status,2,c
  1878   006D2E  EF9B  F036         	goto	u4321
  1879   006D32  EF9D  F036         	goto	u4320
  1880   006D36                     u4321:
  1881   006D36  EFA3  F036         	goto	l4042
  1882   006D3A                     u4320:
  1883   006D3A                     
  1884                           ;stateMachine.c: 130:                 setLanguage(getLanguage() + 1);
  1885   006D3A  ECA5  F02C         	call	_getLanguage	;wreg free
  1886   006D3E  6E31               	movwf	??_smLoop^0,c
  1887   006D40  2831               	incf	??_smLoop^0,w,c
  1888   006D42  EC85  F02C         	call	_setLanguage
  1889   006D46                     l4042:
  1890                           
  1891                           ;stateMachine.c: 132:             if (evento == EV_LEFT) {
  1892   006D46  0E02               	movlw	2
  1893   006D48  1836               	xorwf	smLoop@evento^0,w,c
  1894   006D4A  A4D8               	btfss	status,2,c
  1895   006D4C  EFAA  F036         	goto	u4331
  1896   006D50  EFAC  F036         	goto	u4330
  1897   006D54                     u4331:
  1898   006D54  EFB2  F036         	goto	l4046
  1899   006D58                     u4330:
  1900   006D58                     
  1901                           ;stateMachine.c: 133:                 setLanguage(getLanguage() - 1);
  1902   006D58  ECA5  F02C         	call	_getLanguage	;wreg free
  1903   006D5C  6E31               	movwf	??_smLoop^0,c
  1904   006D5E  0431               	decf	??_smLoop^0,w,c
  1905   006D60  EC85  F02C         	call	_setLanguage
  1906   006D64                     l4046:
  1907                           
  1908                           ;stateMachine.c: 137:             if (evento == EV_ENTER) {
  1909   006D64  0E04               	movlw	4
  1910   006D66  1836               	xorwf	smLoop@evento^0,w,c
  1911   006D68  A4D8               	btfss	status,2,c
  1912   006D6A  EFB9  F036         	goto	u4341
  1913   006D6E  EFBB  F036         	goto	u4340
  1914   006D72                     u4341:
  1915   006D72  EFE6  F036         	goto	l4054
  1916   006D76                     u4340:
  1917   006D76                     
  1918                           ;stateMachine.c: 138:                 setState(STATE_ALARME_TEMP_MAX);
  1919   006D76  0E00               	movlw	0
  1920   006D78  EC29  F02C         	call	_setState
  1921   006D7C  EFE6  F036         	goto	l4054
  1922   006D80                     l4052:
  1923   006D80  EC21  F02C         	call	_getState	;wreg free
  1924   006D84  6E31               	movwf	??_smLoop^0,c
  1925   006D86  6A32               	clrf	(??_smLoop+1)^0,c
  1926                           
  1927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1928                           ; Switch size 1, requested type "simple"
  1929                           ; Number of cases is 1, Range of values is 0 to 0
  1930                           ; switch strategies available:
  1931                           ; Name         Instructions Cycles
  1932                           ; simple_byte            4     3 (average)
  1933                           ;	Chosen strategy is simple_byte
  1934   006D88  5032               	movf	(??_smLoop+1)^0,w,c
  1935   006D8A  0A00               	xorlw	0	; case 0
  1936   006D8C  B4D8               	btfsc	status,2,c
  1937   006D8E  EFCB  F036         	goto	l4210
  1938   006D92  EFE6  F036         	goto	l4054
  1939   006D96                     l4210:
  1940                           
  1941                           ; Switch size 1, requested type "simple"
  1942                           ; Number of cases is 6, Range of values is 0 to 5
  1943                           ; switch strategies available:
  1944                           ; Name         Instructions Cycles
  1945                           ; simple_byte           19    10 (average)
  1946                           ;	Chosen strategy is simple_byte
  1947   006D96  5031               	movf	??_smLoop^0,w,c
  1948   006D98  0A00               	xorlw	0	; case 0
  1949   006D9A  B4D8               	btfsc	status,2,c
  1950   006D9C  EF90  F035         	goto	l3978
  1951   006DA0  0A01               	xorlw	1	; case 1
  1952   006DA2  B4D8               	btfsc	status,2,c
  1953   006DA4  EFC4  F035         	goto	l3990
  1954   006DA8  0A03               	xorlw	3	; case 2
  1955   006DAA  B4D8               	btfsc	status,2,c
  1956   006DAC  EFF8  F035         	goto	l4002
  1957   006DB0  0A01               	xorlw	1	; case 3
  1958   006DB2  B4D8               	btfsc	status,2,c
  1959   006DB4  EF2C  F036         	goto	l4014
  1960   006DB8  0A07               	xorlw	7	; case 4
  1961   006DBA  B4D8               	btfsc	status,2,c
  1962   006DBC  EF60  F036         	goto	l4026
  1963   006DC0  0A01               	xorlw	1	; case 5
  1964   006DC2  B4D8               	btfsc	status,2,c
  1965   006DC4  EF94  F036         	goto	l4038
  1966   006DC8  EFE6  F036         	goto	l4054
  1967   006DCC                     l4054:
  1968                           
  1969                           ;stateMachine.c: 144:     outputPrint(getState(), getLanguage());
  1970   006DCC  ECA5  F02C         	call	_getLanguage	;wreg free
  1971   006DD0  6E31               	movwf	??_smLoop^0,c
  1972   006DD2  5031               	movf	??_smLoop^0,w,c
  1973   006DD4  6E34               	movwf	_smLoop$1291^0,c
  1974   006DD6  6A35               	clrf	(_smLoop$1291+1)^0,c
  1975   006DD8                     
  1976                           ;stateMachine.c: 144:     outputPrint(getState(), getLanguage());
  1977   006DD8  EC21  F02C         	call	_getState	;wreg free
  1978   006DDC  6E31               	movwf	??_smLoop^0,c
  1979   006DDE  5031               	movf	??_smLoop^0,w,c
  1980   006DE0  6E1D               	movwf	outputPrint@numTela^0,c
  1981   006DE2  6A1E               	clrf	(outputPrint@numTela+1)^0,c
  1982   006DE4  C034  F01F         	movff	_smLoop$1291,outputPrint@idioma
  1983   006DE8  C035  F020         	movff	_smLoop$1291+1,outputPrint@idioma+1
  1984   006DEC  EC6C  F03B         	call	_outputPrint	;wreg free
  1985   006DF0  0012               	return		;funcret
  1986   006DF2                     __end_of_smLoop:
  1987                           	callstack 0
  1988                           
  1989 ;; *************** function _setLanguage *****************
  1990 ;; Defined at:
  1991 ;;		line 113 in file "var.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  newLanguage     1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  newLanguage     1   23[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2005 ;;      Params:         0       0       0       0       0       0       0       0       0
  2006 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2008 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2009 ;;Total ram usage:        1 bytes
  2010 ;; Hardware stack levels used: 1
  2011 ;; Hardware stack levels required when called: 4
  2012 ;; This function calls:
  2013 ;;		_dsWriteData
  2014 ;; This function is called by:
  2015 ;;		_smLoop
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text9
  2020   00590A                     __ptext9:
  2021                           	callstack 0
  2022   00590A                     _setLanguage:
  2023                           	callstack 25
  2024                           
  2025                           ;incstack = 0
  2026                           ;setLanguage@newLanguage stored from wreg
  2027   00590A  6E18               	movwf	setLanguage@newLanguage^0,c
  2028   00590C                     
  2029                           ;var.c: 114:     dsWriteData(newLanguage%2,0x20);
  2030   00590C  0E00               	movlw	0
  2031   00590E  6E12               	movwf	(dsWriteData@address+1)^0,c
  2032   005910  0E20               	movlw	32
  2033   005912  6E11               	movwf	dsWriteData@address^0,c
  2034   005914  5018               	movf	setLanguage@newLanguage^0,w,c
  2035   005916  0B01               	andlw	1
  2036   005918  EC05  F033         	call	_dsWriteData
  2037   00591C  0012               	return		;funcret
  2038   00591E                     __end_of_setLanguage:
  2039                           	callstack 0
  2040                           
  2041 ;; *************** function _outputPrint *****************
  2042 ;; Defined at:
  2043 ;;		line 30 in file "output.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  numTela         2   28[COMRAM] int 
  2046 ;;  idioma          2   30[COMRAM] int 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  i               2   46[COMRAM] int 
  2049 ;;  i               2   44[COMRAM] int 
  2050 ;;  i               2   42[COMRAM] int 
  2051 ;;  i               2   40[COMRAM] int 
  2052 ;;  i               2   38[COMRAM] int 
  2053 ;;  i               2   36[COMRAM] int 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2063 ;;      Params:         4       0       0       0       0       0       0       0       0
  2064 ;;      Locals:        12       0       0       0       0       0       0       0       0
  2065 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2066 ;;      Totals:        20       0       0       0       0       0       0       0       0
  2067 ;;Total ram usage:       20 bytes
  2068 ;; Hardware stack levels used: 1
  2069 ;; Hardware stack levels required when called: 5
  2070 ;; This function calls:
  2071 ;;		_adcRead
  2072 ;;		_getAlarmLevel1a
  2073 ;;		_getAlarmLevel1b
  2074 ;;		_getAlarmLevel2a
  2075 ;;		_getAlarmLevel2b
  2076 ;;		_getLanguage
  2077 ;;		_getTime
  2078 ;;		_lcdCommand
  2079 ;;		_lcdInt
  2080 ;;		_lcdString
  2081 ;;		_serialInt
  2082 ;;		_serialSend
  2083 ;;		_serialString
  2084 ;; This function is called by:
  2085 ;;		_smLoop
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text10
  2090   0076D8                     __ptext10:
  2091                           	callstack 0
  2092   0076D8                     _outputPrint:
  2093                           	callstack 24
  2094   0076D8                     
  2095                           ;output.c: 32:     if (numTela == STATE_TEMPO) {
  2096   0076D8  0E04               	movlw	4
  2097   0076DA  181D               	xorwf	outputPrint@numTela^0,w,c
  2098   0076DC  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2099   0076DE  A4D8               	btfss	status,2,c
  2100   0076E0  EF74  F03B         	goto	u3531
  2101   0076E4  EF76  F03B         	goto	u3530
  2102   0076E8                     u3531:
  2103   0076E8  EFF9  F03B         	goto	l3584
  2104   0076EC                     u3530:
  2105   0076EC                     
  2106                           ;output.c: 36:         lcdCommand(0x01);
  2107   0076EC  0E01               	movlw	1
  2108   0076EE  EC26  F02F         	call	_lcdCommand
  2109                           
  2110                           ;output.c: 37:         lcdCommand(0x80);
  2111   0076F2  0E80               	movlw	128
  2112   0076F4  EC26  F02F         	call	_lcdCommand
  2113   0076F8                     
  2114                           ;output.c: 38:         lcdString(msgs[numTela][idioma]);
  2115   0076F8  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2116   0076FC  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2117   007700  90D8               	bcf	status,0,c
  2118   007702  3621               	rlcf	??_outputPrint^0,f,c
  2119   007704  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2120   007706  90D8               	bcf	status,0,c
  2121   007708  3621               	rlcf	??_outputPrint^0,f,c
  2122   00770A  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2123   00770C  0E60               	movlw	low _msgs
  2124   00770E  2421               	addwf	??_outputPrint^0,w,c
  2125   007710  6E23               	movwf	(??_outputPrint+2)^0,c
  2126   007712  0E00               	movlw	high _msgs
  2127   007714  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2128   007716  6E24               	movwf	(??_outputPrint+3)^0,c
  2129   007718  90D8               	bcf	status,0,c
  2130   00771A  341F               	rlcf	outputPrint@idioma^0,w,c
  2131   00771C  6ED9               	movwf	fsr2l,c
  2132   00771E  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2133   007720  6EDA               	movwf	fsr2h,c
  2134   007722  5023               	movf	(??_outputPrint+2)^0,w,c
  2135   007724  26D9               	addwf	fsr2l,f,c
  2136   007726  5024               	movf	(??_outputPrint+3)^0,w,c
  2137   007728  22DA               	addwfc	fsr2h,f,c
  2138   00772A  CFDE F00C          	movff	postinc2,lcdString@msg
  2139   00772E  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2140   007732  ECA1  F02E         	call	_lcdString	;wreg free
  2141   007736                     
  2142                           ;output.c: 39:         lcdCommand(0xC0);
  2143   007736  0EC0               	movlw	192
  2144   007738  EC26  F02F         	call	_lcdCommand
  2145   00773C                     
  2146                           ;output.c: 40:         lcdInt(getTime());
  2147   00773C  EC40  F02C         	call	_getTime	;wreg free
  2148   007740  C001  F01B         	movff	?_getTime,lcdInt@val
  2149   007744  C002  F01C         	movff	?_getTime+1,lcdInt@val+1
  2150   007748  EC72  F033         	call	_lcdInt	;wreg free
  2151   00774C                     
  2152                           ;output.c: 41:         lcdString("                    ");
  2153   00774C  0E0F               	movlw	low STR_13
  2154   00774E  6E0C               	movwf	lcdString@msg^0,c
  2155   007750  0E7F               	movlw	high STR_13
  2156   007752  6E0D               	movwf	(lcdString@msg+1)^0,c
  2157   007754  ECA1  F02E         	call	_lcdString	;wreg free
  2158   007758                     
  2159                           ;output.c: 45:         for(int i=0;i<32;i++){
  2160   007758  0E00               	movlw	0
  2161   00775A  6E26               	movwf	(outputPrint@i+1)^0,c
  2162   00775C  0E00               	movlw	0
  2163   00775E  6E25               	movwf	outputPrint@i^0,c
  2164   007760                     l3568:
  2165                           
  2166                           ;output.c: 46:             serialSend('\b');
  2167   007760  0E08               	movlw	8
  2168   007762  ECB0  F02C         	call	_serialSend
  2169   007766                     
  2170                           ;output.c: 47:         }
  2171   007766  4A25               	infsnz	outputPrint@i^0,f,c
  2172   007768  2A26               	incf	(outputPrint@i+1)^0,f,c
  2173   00776A  BE26               	btfsc	(outputPrint@i+1)^0,7,c
  2174   00776C  EFC1  F03B         	goto	u3541
  2175   007770  5026               	movf	(outputPrint@i+1)^0,w,c
  2176   007772  E109               	bnz	u3540
  2177   007774  0E20               	movlw	32
  2178   007776  5C25               	subwf	outputPrint@i^0,w,c
  2179   007778  A0D8               	btfss	status,0,c
  2180   00777A  EFC1  F03B         	goto	u3541
  2181   00777E  EFC3  F03B         	goto	u3540
  2182   007782                     u3541:
  2183   007782  EFB0  F03B         	goto	l3568
  2184   007786                     u3540:
  2185   007786                     
  2186                           ;output.c: 48:         serialString("Protocolo: PSTIMEX00\r");
  2187   007786  0EF9               	movlw	low STR_14
  2188   007788  6E02               	movwf	serialString@str^0,c
  2189   00778A  0E7E               	movlw	high STR_14
  2190   00778C  6E03               	movwf	(serialString@str+1)^0,c
  2191   00778E  EC6B  F02D         	call	_serialString	;wreg free
  2192   007792                     
  2193                           ;output.c: 49:         serialString(msgs[numTela][idioma]);
  2194   007792  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2195   007796  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2196   00779A  90D8               	bcf	status,0,c
  2197   00779C  3621               	rlcf	??_outputPrint^0,f,c
  2198   00779E  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2199   0077A0  90D8               	bcf	status,0,c
  2200   0077A2  3621               	rlcf	??_outputPrint^0,f,c
  2201   0077A4  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2202   0077A6  0E60               	movlw	low _msgs
  2203   0077A8  2421               	addwf	??_outputPrint^0,w,c
  2204   0077AA  6E23               	movwf	(??_outputPrint+2)^0,c
  2205   0077AC  0E00               	movlw	high _msgs
  2206   0077AE  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2207   0077B0  6E24               	movwf	(??_outputPrint+3)^0,c
  2208   0077B2  90D8               	bcf	status,0,c
  2209   0077B4  341F               	rlcf	outputPrint@idioma^0,w,c
  2210   0077B6  6ED9               	movwf	fsr2l,c
  2211   0077B8  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2212   0077BA  6EDA               	movwf	fsr2h,c
  2213   0077BC  5023               	movf	(??_outputPrint+2)^0,w,c
  2214   0077BE  26D9               	addwf	fsr2l,f,c
  2215   0077C0  5024               	movf	(??_outputPrint+3)^0,w,c
  2216   0077C2  22DA               	addwfc	fsr2h,f,c
  2217   0077C4  CFDE F002          	movff	postinc2,serialString@str
  2218   0077C8  CFDD F003          	movff	postdec2,serialString@str+1
  2219   0077CC  EC6B  F02D         	call	_serialString	;wreg free
  2220   0077D0                     
  2221                           ;output.c: 50:         serialString("   ");
  2222   0077D0  0E20               	movlw	low (STR_13+17)
  2223   0077D2  6E02               	movwf	serialString@str^0,c
  2224   0077D4  0E7F               	movlw	high (STR_13+17)
  2225   0077D6  6E03               	movwf	(serialString@str+1)^0,c
  2226   0077D8  EC6B  F02D         	call	_serialString	;wreg free
  2227   0077DC                     
  2228                           ;output.c: 51:         serialInt(getTime());
  2229   0077DC  EC40  F02C         	call	_getTime	;wreg free
  2230   0077E0  C001  F01B         	movff	?_getTime,serialInt@val
  2231   0077E4  C002  F01C         	movff	?_getTime+1,serialInt@val+1
  2232   0077E8  ECEF  F033         	call	_serialInt	;wreg free
  2233   0077EC                     
  2234                           ;output.c: 52:         serialSend('\r');
  2235   0077EC  0E0D               	movlw	13
  2236   0077EE  ECB0  F02C         	call	_serialSend
  2237   0077F2                     l3584:
  2238                           
  2239                           ;output.c: 55:     if (numTela == STATE_ALARME_TEMP_MAX) {
  2240   0077F2  501D               	movf	outputPrint@numTela^0,w,c
  2241   0077F4  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2242   0077F6  A4D8               	btfss	status,2,c
  2243   0077F8  EF00  F03C         	goto	u3551
  2244   0077FC  EF02  F03C         	goto	u3550
  2245   007800                     u3551:
  2246   007800  EFA9  F03C         	goto	l3626
  2247   007804                     u3550:
  2248   007804                     
  2249                           ;output.c: 59:         lcdCommand(0x01);
  2250   007804  0E01               	movlw	1
  2251   007806  EC26  F02F         	call	_lcdCommand
  2252                           
  2253                           ;output.c: 60:         lcdCommand(0x80);
  2254   00780A  0E80               	movlw	128
  2255   00780C  EC26  F02F         	call	_lcdCommand
  2256   007810                     
  2257                           ;output.c: 61:         lcdString(msgs[numTela][idioma]);
  2258   007810  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2259   007814  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2260   007818  90D8               	bcf	status,0,c
  2261   00781A  3621               	rlcf	??_outputPrint^0,f,c
  2262   00781C  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2263   00781E  90D8               	bcf	status,0,c
  2264   007820  3621               	rlcf	??_outputPrint^0,f,c
  2265   007822  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2266   007824  0E60               	movlw	low _msgs
  2267   007826  2421               	addwf	??_outputPrint^0,w,c
  2268   007828  6E23               	movwf	(??_outputPrint+2)^0,c
  2269   00782A  0E00               	movlw	high _msgs
  2270   00782C  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2271   00782E  6E24               	movwf	(??_outputPrint+3)^0,c
  2272   007830  90D8               	bcf	status,0,c
  2273   007832  341F               	rlcf	outputPrint@idioma^0,w,c
  2274   007834  6ED9               	movwf	fsr2l,c
  2275   007836  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2276   007838  6EDA               	movwf	fsr2h,c
  2277   00783A  5023               	movf	(??_outputPrint+2)^0,w,c
  2278   00783C  26D9               	addwf	fsr2l,f,c
  2279   00783E  5024               	movf	(??_outputPrint+3)^0,w,c
  2280   007840  22DA               	addwfc	fsr2h,f,c
  2281   007842  CFDE F00C          	movff	postinc2,lcdString@msg
  2282   007846  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2283   00784A  ECA1  F02E         	call	_lcdString	;wreg free
  2284   00784E                     
  2285                           ;output.c: 62:         lcdCommand(0xC0);
  2286   00784E  0EC0               	movlw	192
  2287   007850  EC26  F02F         	call	_lcdCommand
  2288   007854                     
  2289                           ;output.c: 63:         lcdInt(getAlarmLevel1a());
  2290   007854  EC86  F02F         	call	_getAlarmLevel1a	;wreg free
  2291   007858  C018  F01B         	movff	?_getAlarmLevel1a,lcdInt@val
  2292   00785C  C019  F01C         	movff	?_getAlarmLevel1a+1,lcdInt@val+1
  2293   007860  EC72  F033         	call	_lcdInt	;wreg free
  2294   007864                     
  2295                           ;output.c: 64:         lcdString(" adc=");
  2296   007864  0EF8               	movlw	low STR_16
  2297   007866  6E0C               	movwf	lcdString@msg^0,c
  2298   007868  0E7F               	movlw	high STR_16
  2299   00786A  6E0D               	movwf	(lcdString@msg+1)^0,c
  2300   00786C  ECA1  F02E         	call	_lcdString	;wreg free
  2301   007870                     
  2302                           ;output.c: 65:         lcdInt(adcRead(1));
  2303   007870  0E00               	movlw	0
  2304   007872  6E02               	movwf	(adcRead@a+1)^0,c
  2305   007874  0E01               	movlw	1
  2306   007876  6E01               	movwf	adcRead@a^0,c
  2307   007878  ECF7  F030         	call	_adcRead	;wreg free
  2308   00787C  C001  F01B         	movff	?_adcRead,lcdInt@val
  2309   007880  C002  F01C         	movff	?_adcRead+1,lcdInt@val+1
  2310   007884  EC72  F033         	call	_lcdInt	;wreg free
  2311   007888                     
  2312                           ;output.c: 66:         lcdString("                    ");
  2313   007888  0E0F               	movlw	low STR_13
  2314   00788A  6E0C               	movwf	lcdString@msg^0,c
  2315   00788C  0E7F               	movlw	high STR_13
  2316   00788E  6E0D               	movwf	(lcdString@msg+1)^0,c
  2317   007890  ECA1  F02E         	call	_lcdString	;wreg free
  2318   007894                     
  2319                           ;output.c: 70:         for(int i=0;i<32;i++){
  2320   007894  0E00               	movlw	0
  2321   007896  6E28               	movwf	(outputPrint@i_290+1)^0,c
  2322   007898  0E00               	movlw	0
  2323   00789A  6E27               	movwf	outputPrint@i_290^0,c
  2324   00789C                     l3606:
  2325                           
  2326                           ;output.c: 71:             serialSend('\b');
  2327   00789C  0E08               	movlw	8
  2328   00789E  ECB0  F02C         	call	_serialSend
  2329   0078A2                     
  2330                           ;output.c: 72:         }
  2331   0078A2  4A27               	infsnz	outputPrint@i_290^0,f,c
  2332   0078A4  2A28               	incf	(outputPrint@i_290+1)^0,f,c
  2333   0078A6  BE28               	btfsc	(outputPrint@i_290+1)^0,7,c
  2334   0078A8  EF5F  F03C         	goto	u3561
  2335   0078AC  5028               	movf	(outputPrint@i_290+1)^0,w,c
  2336   0078AE  E109               	bnz	u3560
  2337   0078B0  0E20               	movlw	32
  2338   0078B2  5C27               	subwf	outputPrint@i_290^0,w,c
  2339   0078B4  A0D8               	btfss	status,0,c
  2340   0078B6  EF5F  F03C         	goto	u3561
  2341   0078BA  EF61  F03C         	goto	u3560
  2342   0078BE                     u3561:
  2343   0078BE  EF4E  F03C         	goto	l3606
  2344   0078C2                     u3560:
  2345   0078C2                     
  2346                           ;output.c: 73:         serialString("Protocolo: PSMAX1X00\r");
  2347   0078C2  0EB7               	movlw	low STR_18
  2348   0078C4  6E02               	movwf	serialString@str^0,c
  2349   0078C6  0E7E               	movlw	high STR_18
  2350   0078C8  6E03               	movwf	(serialString@str+1)^0,c
  2351   0078CA  EC6B  F02D         	call	_serialString	;wreg free
  2352   0078CE                     
  2353                           ;output.c: 74:         serialString(msgs[numTela][idioma]);
  2354   0078CE  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2355   0078D2  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2356   0078D6  90D8               	bcf	status,0,c
  2357   0078D8  3621               	rlcf	??_outputPrint^0,f,c
  2358   0078DA  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2359   0078DC  90D8               	bcf	status,0,c
  2360   0078DE  3621               	rlcf	??_outputPrint^0,f,c
  2361   0078E0  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2362   0078E2  0E60               	movlw	low _msgs
  2363   0078E4  2421               	addwf	??_outputPrint^0,w,c
  2364   0078E6  6E23               	movwf	(??_outputPrint+2)^0,c
  2365   0078E8  0E00               	movlw	high _msgs
  2366   0078EA  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2367   0078EC  6E24               	movwf	(??_outputPrint+3)^0,c
  2368   0078EE  90D8               	bcf	status,0,c
  2369   0078F0  341F               	rlcf	outputPrint@idioma^0,w,c
  2370   0078F2  6ED9               	movwf	fsr2l,c
  2371   0078F4  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2372   0078F6  6EDA               	movwf	fsr2h,c
  2373   0078F8  5023               	movf	(??_outputPrint+2)^0,w,c
  2374   0078FA  26D9               	addwf	fsr2l,f,c
  2375   0078FC  5024               	movf	(??_outputPrint+3)^0,w,c
  2376   0078FE  22DA               	addwfc	fsr2h,f,c
  2377   007900  CFDE F002          	movff	postinc2,serialString@str
  2378   007904  CFDD F003          	movff	postdec2,serialString@str+1
  2379   007908  EC6B  F02D         	call	_serialString	;wreg free
  2380   00790C                     
  2381                           ;output.c: 75:         serialString("   ");
  2382   00790C  0E20               	movlw	low (STR_13+17)
  2383   00790E  6E02               	movwf	serialString@str^0,c
  2384   007910  0E7F               	movlw	high (STR_13+17)
  2385   007912  6E03               	movwf	(serialString@str+1)^0,c
  2386   007914  EC6B  F02D         	call	_serialString	;wreg free
  2387   007918                     
  2388                           ;output.c: 76:         serialInt(getAlarmLevel1a());
  2389   007918  EC86  F02F         	call	_getAlarmLevel1a	;wreg free
  2390   00791C  C018  F01B         	movff	?_getAlarmLevel1a,serialInt@val
  2391   007920  C019  F01C         	movff	?_getAlarmLevel1a+1,serialInt@val+1
  2392   007924  ECEF  F033         	call	_serialInt	;wreg free
  2393   007928                     
  2394                           ;output.c: 77:         serialString(" adc=");
  2395   007928  0EF8               	movlw	low STR_16
  2396   00792A  6E02               	movwf	serialString@str^0,c
  2397   00792C  0E7F               	movlw	high STR_16
  2398   00792E  6E03               	movwf	(serialString@str+1)^0,c
  2399   007930  EC6B  F02D         	call	_serialString	;wreg free
  2400   007934                     
  2401                           ;output.c: 78:         serialInt(adcRead(1));
  2402   007934  0E00               	movlw	0
  2403   007936  6E02               	movwf	(adcRead@a+1)^0,c
  2404   007938  0E01               	movlw	1
  2405   00793A  6E01               	movwf	adcRead@a^0,c
  2406   00793C  ECF7  F030         	call	_adcRead	;wreg free
  2407   007940  C001  F01B         	movff	?_adcRead,serialInt@val
  2408   007944  C002  F01C         	movff	?_adcRead+1,serialInt@val+1
  2409   007948  ECEF  F033         	call	_serialInt	;wreg free
  2410   00794C                     
  2411                           ;output.c: 79:         serialSend('\r');
  2412   00794C  0E0D               	movlw	13
  2413   00794E  ECB0  F02C         	call	_serialSend
  2414   007952                     l3626:
  2415                           
  2416                           ;output.c: 81:     if (numTela == STATE_ALARME_PRESS_MAX){
  2417   007952  041D               	decf	outputPrint@numTela^0,w,c
  2418   007954  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2419   007956  A4D8               	btfss	status,2,c
  2420   007958  EFB0  F03C         	goto	u3571
  2421   00795C  EFB2  F03C         	goto	u3570
  2422   007960                     u3571:
  2423   007960  EF56  F03D         	goto	l3668
  2424   007964                     u3570:
  2425   007964                     
  2426                           ;output.c: 85:         lcdCommand(0x80);
  2427   007964  0E80               	movlw	128
  2428   007966  EC26  F02F         	call	_lcdCommand
  2429   00796A                     
  2430                           ;output.c: 86:         lcdString(msgs[numTela][idioma]);
  2431   00796A  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2432   00796E  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2433   007972  90D8               	bcf	status,0,c
  2434   007974  3621               	rlcf	??_outputPrint^0,f,c
  2435   007976  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2436   007978  90D8               	bcf	status,0,c
  2437   00797A  3621               	rlcf	??_outputPrint^0,f,c
  2438   00797C  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2439   00797E  0E60               	movlw	low _msgs
  2440   007980  2421               	addwf	??_outputPrint^0,w,c
  2441   007982  6E23               	movwf	(??_outputPrint+2)^0,c
  2442   007984  0E00               	movlw	high _msgs
  2443   007986  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2444   007988  6E24               	movwf	(??_outputPrint+3)^0,c
  2445   00798A  90D8               	bcf	status,0,c
  2446   00798C  341F               	rlcf	outputPrint@idioma^0,w,c
  2447   00798E  6ED9               	movwf	fsr2l,c
  2448   007990  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2449   007992  6EDA               	movwf	fsr2h,c
  2450   007994  5023               	movf	(??_outputPrint+2)^0,w,c
  2451   007996  26D9               	addwf	fsr2l,f,c
  2452   007998  5024               	movf	(??_outputPrint+3)^0,w,c
  2453   00799A  22DA               	addwfc	fsr2h,f,c
  2454   00799C  CFDE F00C          	movff	postinc2,lcdString@msg
  2455   0079A0  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2456   0079A4  ECA1  F02E         	call	_lcdString	;wreg free
  2457   0079A8                     
  2458                           ;output.c: 87:         lcdCommand(0xC0);
  2459   0079A8  0EC0               	movlw	192
  2460   0079AA  EC26  F02F         	call	_lcdCommand
  2461   0079AE                     
  2462                           ;output.c: 88:         lcdInt(getAlarmLevel2a());
  2463   0079AE  ECE8  F02F         	call	_getAlarmLevel2a	;wreg free
  2464   0079B2  C018  F01B         	movff	?_getAlarmLevel2a,lcdInt@val
  2465   0079B6  C019  F01C         	movff	?_getAlarmLevel2a+1,lcdInt@val+1
  2466   0079BA  EC72  F033         	call	_lcdInt	;wreg free
  2467   0079BE                     
  2468                           ;output.c: 89:         lcdString(" adc=");
  2469   0079BE  0EF8               	movlw	low STR_16
  2470   0079C0  6E0C               	movwf	lcdString@msg^0,c
  2471   0079C2  0E7F               	movlw	high STR_16
  2472   0079C4  6E0D               	movwf	(lcdString@msg+1)^0,c
  2473   0079C6  ECA1  F02E         	call	_lcdString	;wreg free
  2474   0079CA                     
  2475                           ;output.c: 90:         lcdInt(adcRead(3));
  2476   0079CA  0E00               	movlw	0
  2477   0079CC  6E02               	movwf	(adcRead@a+1)^0,c
  2478   0079CE  0E03               	movlw	3
  2479   0079D0  6E01               	movwf	adcRead@a^0,c
  2480   0079D2  ECF7  F030         	call	_adcRead	;wreg free
  2481   0079D6  C001  F01B         	movff	?_adcRead,lcdInt@val
  2482   0079DA  C002  F01C         	movff	?_adcRead+1,lcdInt@val+1
  2483   0079DE  EC72  F033         	call	_lcdInt	;wreg free
  2484   0079E2                     
  2485                           ;output.c: 91:         lcdString("                    ");
  2486   0079E2  0E0F               	movlw	low STR_13
  2487   0079E4  6E0C               	movwf	lcdString@msg^0,c
  2488   0079E6  0E7F               	movlw	high STR_13
  2489   0079E8  6E0D               	movwf	(lcdString@msg+1)^0,c
  2490   0079EA  ECA1  F02E         	call	_lcdString	;wreg free
  2491   0079EE                     
  2492                           ;output.c: 95:         for(int i=0;i<32;i++){
  2493   0079EE  0E00               	movlw	0
  2494   0079F0  6E2A               	movwf	(outputPrint@i_296+1)^0,c
  2495   0079F2  0E00               	movlw	0
  2496   0079F4  6E29               	movwf	outputPrint@i_296^0,c
  2497   0079F6                     l3648:
  2498                           
  2499                           ;output.c: 96:             serialSend('\b');
  2500   0079F6  0E08               	movlw	8
  2501   0079F8  ECB0  F02C         	call	_serialSend
  2502   0079FC                     
  2503                           ;output.c: 97:         }
  2504   0079FC  4A29               	infsnz	outputPrint@i_296^0,f,c
  2505   0079FE  2A2A               	incf	(outputPrint@i_296+1)^0,f,c
  2506   007A00  BE2A               	btfsc	(outputPrint@i_296+1)^0,7,c
  2507   007A02  EF0C  F03D         	goto	u3581
  2508   007A06  502A               	movf	(outputPrint@i_296+1)^0,w,c
  2509   007A08  E109               	bnz	u3580
  2510   007A0A  0E20               	movlw	32
  2511   007A0C  5C29               	subwf	outputPrint@i_296^0,w,c
  2512   007A0E  A0D8               	btfss	status,0,c
  2513   007A10  EF0C  F03D         	goto	u3581
  2514   007A14  EF0E  F03D         	goto	u3580
  2515   007A18                     u3581:
  2516   007A18  EFFB  F03C         	goto	l3648
  2517   007A1C                     u3580:
  2518   007A1C                     
  2519                           ;output.c: 98:         serialString("Protocolo: PSMAX2X00\r");
  2520   007A1C  0EE3               	movlw	low STR_23
  2521   007A1E  6E02               	movwf	serialString@str^0,c
  2522   007A20  0E7E               	movlw	high STR_23
  2523   007A22  6E03               	movwf	(serialString@str+1)^0,c
  2524   007A24  EC6B  F02D         	call	_serialString	;wreg free
  2525   007A28                     
  2526                           ;output.c: 99:         serialString(msgs[numTela][idioma]);
  2527   007A28  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2528   007A2C  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2529   007A30  90D8               	bcf	status,0,c
  2530   007A32  3621               	rlcf	??_outputPrint^0,f,c
  2531   007A34  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2532   007A36  90D8               	bcf	status,0,c
  2533   007A38  3621               	rlcf	??_outputPrint^0,f,c
  2534   007A3A  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2535   007A3C  0E60               	movlw	low _msgs
  2536   007A3E  2421               	addwf	??_outputPrint^0,w,c
  2537   007A40  6E23               	movwf	(??_outputPrint+2)^0,c
  2538   007A42  0E00               	movlw	high _msgs
  2539   007A44  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2540   007A46  6E24               	movwf	(??_outputPrint+3)^0,c
  2541   007A48  90D8               	bcf	status,0,c
  2542   007A4A  341F               	rlcf	outputPrint@idioma^0,w,c
  2543   007A4C  6ED9               	movwf	fsr2l,c
  2544   007A4E  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2545   007A50  6EDA               	movwf	fsr2h,c
  2546   007A52  5023               	movf	(??_outputPrint+2)^0,w,c
  2547   007A54  26D9               	addwf	fsr2l,f,c
  2548   007A56  5024               	movf	(??_outputPrint+3)^0,w,c
  2549   007A58  22DA               	addwfc	fsr2h,f,c
  2550   007A5A  CFDE F002          	movff	postinc2,serialString@str
  2551   007A5E  CFDD F003          	movff	postdec2,serialString@str+1
  2552   007A62  EC6B  F02D         	call	_serialString	;wreg free
  2553   007A66                     
  2554                           ;output.c: 100:         serialString("   ");
  2555   007A66  0E20               	movlw	low (STR_13+17)
  2556   007A68  6E02               	movwf	serialString@str^0,c
  2557   007A6A  0E7F               	movlw	high (STR_13+17)
  2558   007A6C  6E03               	movwf	(serialString@str+1)^0,c
  2559   007A6E  EC6B  F02D         	call	_serialString	;wreg free
  2560   007A72                     
  2561                           ;output.c: 101:         serialInt(getAlarmLevel2a());
  2562   007A72  ECE8  F02F         	call	_getAlarmLevel2a	;wreg free
  2563   007A76  C018  F01B         	movff	?_getAlarmLevel2a,serialInt@val
  2564   007A7A  C019  F01C         	movff	?_getAlarmLevel2a+1,serialInt@val+1
  2565   007A7E  ECEF  F033         	call	_serialInt	;wreg free
  2566   007A82                     
  2567                           ;output.c: 102:         serialString(" adc=");
  2568   007A82  0EF8               	movlw	low STR_16
  2569   007A84  6E02               	movwf	serialString@str^0,c
  2570   007A86  0E7F               	movlw	high STR_16
  2571   007A88  6E03               	movwf	(serialString@str+1)^0,c
  2572   007A8A  EC6B  F02D         	call	_serialString	;wreg free
  2573   007A8E                     
  2574                           ;output.c: 103:         serialInt(adcRead(3));
  2575   007A8E  0E00               	movlw	0
  2576   007A90  6E02               	movwf	(adcRead@a+1)^0,c
  2577   007A92  0E03               	movlw	3
  2578   007A94  6E01               	movwf	adcRead@a^0,c
  2579   007A96  ECF7  F030         	call	_adcRead	;wreg free
  2580   007A9A  C001  F01B         	movff	?_adcRead,serialInt@val
  2581   007A9E  C002  F01C         	movff	?_adcRead+1,serialInt@val+1
  2582   007AA2  ECEF  F033         	call	_serialInt	;wreg free
  2583   007AA6                     
  2584                           ;output.c: 104:         serialSend('\r');
  2585   007AA6  0E0D               	movlw	13
  2586   007AA8  ECB0  F02C         	call	_serialSend
  2587   007AAC                     l3668:
  2588                           
  2589                           ;output.c: 107:     if(numTela == STATE_ALARME_TEMP_MIN){
  2590   007AAC  0E02               	movlw	2
  2591   007AAE  181D               	xorwf	outputPrint@numTela^0,w,c
  2592   007AB0  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2593   007AB2  A4D8               	btfss	status,2,c
  2594   007AB4  EF5E  F03D         	goto	u3591
  2595   007AB8  EF60  F03D         	goto	u3590
  2596   007ABC                     u3591:
  2597   007ABC  EF04  F03E         	goto	l3710
  2598   007AC0                     u3590:
  2599   007AC0                     
  2600                           ;output.c: 111:         lcdCommand(0x80);
  2601   007AC0  0E80               	movlw	128
  2602   007AC2  EC26  F02F         	call	_lcdCommand
  2603   007AC6                     
  2604                           ;output.c: 112:         lcdString(msgs[numTela][idioma]);
  2605   007AC6  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2606   007ACA  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2607   007ACE  90D8               	bcf	status,0,c
  2608   007AD0  3621               	rlcf	??_outputPrint^0,f,c
  2609   007AD2  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2610   007AD4  90D8               	bcf	status,0,c
  2611   007AD6  3621               	rlcf	??_outputPrint^0,f,c
  2612   007AD8  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2613   007ADA  0E60               	movlw	low _msgs
  2614   007ADC  2421               	addwf	??_outputPrint^0,w,c
  2615   007ADE  6E23               	movwf	(??_outputPrint+2)^0,c
  2616   007AE0  0E00               	movlw	high _msgs
  2617   007AE2  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2618   007AE4  6E24               	movwf	(??_outputPrint+3)^0,c
  2619   007AE6  90D8               	bcf	status,0,c
  2620   007AE8  341F               	rlcf	outputPrint@idioma^0,w,c
  2621   007AEA  6ED9               	movwf	fsr2l,c
  2622   007AEC  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2623   007AEE  6EDA               	movwf	fsr2h,c
  2624   007AF0  5023               	movf	(??_outputPrint+2)^0,w,c
  2625   007AF2  26D9               	addwf	fsr2l,f,c
  2626   007AF4  5024               	movf	(??_outputPrint+3)^0,w,c
  2627   007AF6  22DA               	addwfc	fsr2h,f,c
  2628   007AF8  CFDE F00C          	movff	postinc2,lcdString@msg
  2629   007AFC  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2630   007B00  ECA1  F02E         	call	_lcdString	;wreg free
  2631   007B04                     
  2632                           ;output.c: 113:         lcdCommand(0xC0);
  2633   007B04  0EC0               	movlw	192
  2634   007B06  EC26  F02F         	call	_lcdCommand
  2635   007B0A                     
  2636                           ;output.c: 114:         lcdInt(getAlarmLevel1b());
  2637   007B0A  ECB7  F02F         	call	_getAlarmLevel1b	;wreg free
  2638   007B0E  C018  F01B         	movff	?_getAlarmLevel1b,lcdInt@val
  2639   007B12  C019  F01C         	movff	?_getAlarmLevel1b+1,lcdInt@val+1
  2640   007B16  EC72  F033         	call	_lcdInt	;wreg free
  2641   007B1A                     
  2642                           ;output.c: 115:         lcdString(" adc=");
  2643   007B1A  0EF8               	movlw	low STR_16
  2644   007B1C  6E0C               	movwf	lcdString@msg^0,c
  2645   007B1E  0E7F               	movlw	high STR_16
  2646   007B20  6E0D               	movwf	(lcdString@msg+1)^0,c
  2647   007B22  ECA1  F02E         	call	_lcdString	;wreg free
  2648   007B26                     
  2649                           ;output.c: 116:         lcdInt(adcRead(1));
  2650   007B26  0E00               	movlw	0
  2651   007B28  6E02               	movwf	(adcRead@a+1)^0,c
  2652   007B2A  0E01               	movlw	1
  2653   007B2C  6E01               	movwf	adcRead@a^0,c
  2654   007B2E  ECF7  F030         	call	_adcRead	;wreg free
  2655   007B32  C001  F01B         	movff	?_adcRead,lcdInt@val
  2656   007B36  C002  F01C         	movff	?_adcRead+1,lcdInt@val+1
  2657   007B3A  EC72  F033         	call	_lcdInt	;wreg free
  2658   007B3E                     
  2659                           ;output.c: 117:         lcdString("                    ");
  2660   007B3E  0E0F               	movlw	low STR_13
  2661   007B40  6E0C               	movwf	lcdString@msg^0,c
  2662   007B42  0E7F               	movlw	high STR_13
  2663   007B44  6E0D               	movwf	(lcdString@msg+1)^0,c
  2664   007B46  ECA1  F02E         	call	_lcdString	;wreg free
  2665   007B4A                     
  2666                           ;output.c: 121:         for(int i=0;i<32;i++){
  2667   007B4A  0E00               	movlw	0
  2668   007B4C  6E2C               	movwf	(outputPrint@i_302+1)^0,c
  2669   007B4E  0E00               	movlw	0
  2670   007B50  6E2B               	movwf	outputPrint@i_302^0,c
  2671   007B52                     l3690:
  2672                           
  2673                           ;output.c: 122:             serialSend('\b');
  2674   007B52  0E08               	movlw	8
  2675   007B54  ECB0  F02C         	call	_serialSend
  2676   007B58                     
  2677                           ;output.c: 123:         }
  2678   007B58  4A2B               	infsnz	outputPrint@i_302^0,f,c
  2679   007B5A  2A2C               	incf	(outputPrint@i_302+1)^0,f,c
  2680   007B5C  BE2C               	btfsc	(outputPrint@i_302+1)^0,7,c
  2681   007B5E  EFBA  F03D         	goto	u3601
  2682   007B62  502C               	movf	(outputPrint@i_302+1)^0,w,c
  2683   007B64  E109               	bnz	u3600
  2684   007B66  0E20               	movlw	32
  2685   007B68  5C2B               	subwf	outputPrint@i_302^0,w,c
  2686   007B6A  A0D8               	btfss	status,0,c
  2687   007B6C  EFBA  F03D         	goto	u3601
  2688   007B70  EFBC  F03D         	goto	u3600
  2689   007B74                     u3601:
  2690   007B74  EFA9  F03D         	goto	l3690
  2691   007B78                     u3600:
  2692   007B78                     
  2693                           ;output.c: 124:         serialString("Protocolo: PSMIN1X00\r");
  2694   007B78  0EA1               	movlw	low STR_28
  2695   007B7A  6E02               	movwf	serialString@str^0,c
  2696   007B7C  0E7E               	movlw	high STR_28
  2697   007B7E  6E03               	movwf	(serialString@str+1)^0,c
  2698   007B80  EC6B  F02D         	call	_serialString	;wreg free
  2699   007B84                     
  2700                           ;output.c: 125:         serialString(msgs[numTela][idioma]);
  2701   007B84  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2702   007B88  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2703   007B8C  90D8               	bcf	status,0,c
  2704   007B8E  3621               	rlcf	??_outputPrint^0,f,c
  2705   007B90  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2706   007B92  90D8               	bcf	status,0,c
  2707   007B94  3621               	rlcf	??_outputPrint^0,f,c
  2708   007B96  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2709   007B98  0E60               	movlw	low _msgs
  2710   007B9A  2421               	addwf	??_outputPrint^0,w,c
  2711   007B9C  6E23               	movwf	(??_outputPrint+2)^0,c
  2712   007B9E  0E00               	movlw	high _msgs
  2713   007BA0  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2714   007BA2  6E24               	movwf	(??_outputPrint+3)^0,c
  2715   007BA4  90D8               	bcf	status,0,c
  2716   007BA6  341F               	rlcf	outputPrint@idioma^0,w,c
  2717   007BA8  6ED9               	movwf	fsr2l,c
  2718   007BAA  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2719   007BAC  6EDA               	movwf	fsr2h,c
  2720   007BAE  5023               	movf	(??_outputPrint+2)^0,w,c
  2721   007BB0  26D9               	addwf	fsr2l,f,c
  2722   007BB2  5024               	movf	(??_outputPrint+3)^0,w,c
  2723   007BB4  22DA               	addwfc	fsr2h,f,c
  2724   007BB6  CFDE F002          	movff	postinc2,serialString@str
  2725   007BBA  CFDD F003          	movff	postdec2,serialString@str+1
  2726   007BBE  EC6B  F02D         	call	_serialString	;wreg free
  2727   007BC2                     
  2728                           ;output.c: 126:         serialString("   ");
  2729   007BC2  0E20               	movlw	low (STR_13+17)
  2730   007BC4  6E02               	movwf	serialString@str^0,c
  2731   007BC6  0E7F               	movlw	high (STR_13+17)
  2732   007BC8  6E03               	movwf	(serialString@str+1)^0,c
  2733   007BCA  EC6B  F02D         	call	_serialString	;wreg free
  2734   007BCE                     
  2735                           ;output.c: 127:         serialInt(getAlarmLevel1b());
  2736   007BCE  ECB7  F02F         	call	_getAlarmLevel1b	;wreg free
  2737   007BD2  C018  F01B         	movff	?_getAlarmLevel1b,serialInt@val
  2738   007BD6  C019  F01C         	movff	?_getAlarmLevel1b+1,serialInt@val+1
  2739   007BDA  ECEF  F033         	call	_serialInt	;wreg free
  2740   007BDE                     
  2741                           ;output.c: 128:         serialString(" adc=");
  2742   007BDE  0EF8               	movlw	low STR_16
  2743   007BE0  6E02               	movwf	serialString@str^0,c
  2744   007BE2  0E7F               	movlw	high STR_16
  2745   007BE4  6E03               	movwf	(serialString@str+1)^0,c
  2746   007BE6  EC6B  F02D         	call	_serialString	;wreg free
  2747   007BEA                     
  2748                           ;output.c: 129:         serialInt(adcRead(1));
  2749   007BEA  0E00               	movlw	0
  2750   007BEC  6E02               	movwf	(adcRead@a+1)^0,c
  2751   007BEE  0E01               	movlw	1
  2752   007BF0  6E01               	movwf	adcRead@a^0,c
  2753   007BF2  ECF7  F030         	call	_adcRead	;wreg free
  2754   007BF6  C001  F01B         	movff	?_adcRead,serialInt@val
  2755   007BFA  C002  F01C         	movff	?_adcRead+1,serialInt@val+1
  2756   007BFE  ECEF  F033         	call	_serialInt	;wreg free
  2757   007C02                     
  2758                           ;output.c: 130:         serialSend('\r');
  2759   007C02  0E0D               	movlw	13
  2760   007C04  ECB0  F02C         	call	_serialSend
  2761   007C08                     l3710:
  2762                           
  2763                           ;output.c: 133:     if (numTela == STATE_ALARME_PRESS_MIN) {
  2764   007C08  0E03               	movlw	3
  2765   007C0A  181D               	xorwf	outputPrint@numTela^0,w,c
  2766   007C0C  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2767   007C0E  A4D8               	btfss	status,2,c
  2768   007C10  EF0C  F03E         	goto	u3611
  2769   007C14  EF0E  F03E         	goto	u3610
  2770   007C18                     u3611:
  2771   007C18  EFB2  F03E         	goto	l3752
  2772   007C1C                     u3610:
  2773   007C1C                     
  2774                           ;output.c: 137:         lcdCommand(0x80);
  2775   007C1C  0E80               	movlw	128
  2776   007C1E  EC26  F02F         	call	_lcdCommand
  2777   007C22                     
  2778                           ;output.c: 138:         lcdString(msgs[numTela][idioma]);
  2779   007C22  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2780   007C26  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2781   007C2A  90D8               	bcf	status,0,c
  2782   007C2C  3621               	rlcf	??_outputPrint^0,f,c
  2783   007C2E  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2784   007C30  90D8               	bcf	status,0,c
  2785   007C32  3621               	rlcf	??_outputPrint^0,f,c
  2786   007C34  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2787   007C36  0E60               	movlw	low _msgs
  2788   007C38  2421               	addwf	??_outputPrint^0,w,c
  2789   007C3A  6E23               	movwf	(??_outputPrint+2)^0,c
  2790   007C3C  0E00               	movlw	high _msgs
  2791   007C3E  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2792   007C40  6E24               	movwf	(??_outputPrint+3)^0,c
  2793   007C42  90D8               	bcf	status,0,c
  2794   007C44  341F               	rlcf	outputPrint@idioma^0,w,c
  2795   007C46  6ED9               	movwf	fsr2l,c
  2796   007C48  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2797   007C4A  6EDA               	movwf	fsr2h,c
  2798   007C4C  5023               	movf	(??_outputPrint+2)^0,w,c
  2799   007C4E  26D9               	addwf	fsr2l,f,c
  2800   007C50  5024               	movf	(??_outputPrint+3)^0,w,c
  2801   007C52  22DA               	addwfc	fsr2h,f,c
  2802   007C54  CFDE F00C          	movff	postinc2,lcdString@msg
  2803   007C58  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2804   007C5C  ECA1  F02E         	call	_lcdString	;wreg free
  2805   007C60                     
  2806                           ;output.c: 139:         lcdCommand(0xC0);
  2807   007C60  0EC0               	movlw	192
  2808   007C62  EC26  F02F         	call	_lcdCommand
  2809   007C66                     
  2810                           ;output.c: 140:         lcdInt(getAlarmLevel2b());
  2811   007C66  EC19  F030         	call	_getAlarmLevel2b	;wreg free
  2812   007C6A  C018  F01B         	movff	?_getAlarmLevel2b,lcdInt@val
  2813   007C6E  C019  F01C         	movff	?_getAlarmLevel2b+1,lcdInt@val+1
  2814   007C72  EC72  F033         	call	_lcdInt	;wreg free
  2815   007C76                     
  2816                           ;output.c: 141:         lcdString(" adc=");
  2817   007C76  0EF8               	movlw	low STR_16
  2818   007C78  6E0C               	movwf	lcdString@msg^0,c
  2819   007C7A  0E7F               	movlw	high STR_16
  2820   007C7C  6E0D               	movwf	(lcdString@msg+1)^0,c
  2821   007C7E  ECA1  F02E         	call	_lcdString	;wreg free
  2822   007C82                     
  2823                           ;output.c: 142:         lcdInt(adcRead(3));
  2824   007C82  0E00               	movlw	0
  2825   007C84  6E02               	movwf	(adcRead@a+1)^0,c
  2826   007C86  0E03               	movlw	3
  2827   007C88  6E01               	movwf	adcRead@a^0,c
  2828   007C8A  ECF7  F030         	call	_adcRead	;wreg free
  2829   007C8E  C001  F01B         	movff	?_adcRead,lcdInt@val
  2830   007C92  C002  F01C         	movff	?_adcRead+1,lcdInt@val+1
  2831   007C96  EC72  F033         	call	_lcdInt	;wreg free
  2832   007C9A                     
  2833                           ;output.c: 143:         lcdString("                    ");
  2834   007C9A  0E0F               	movlw	low STR_13
  2835   007C9C  6E0C               	movwf	lcdString@msg^0,c
  2836   007C9E  0E7F               	movlw	high STR_13
  2837   007CA0  6E0D               	movwf	(lcdString@msg+1)^0,c
  2838   007CA2  ECA1  F02E         	call	_lcdString	;wreg free
  2839   007CA6                     
  2840                           ;output.c: 147:         for(int i=0;i<32;i++){
  2841   007CA6  0E00               	movlw	0
  2842   007CA8  6E2E               	movwf	(outputPrint@i_308+1)^0,c
  2843   007CAA  0E00               	movlw	0
  2844   007CAC  6E2D               	movwf	outputPrint@i_308^0,c
  2845   007CAE                     l3732:
  2846                           
  2847                           ;output.c: 148:             serialSend('\b');
  2848   007CAE  0E08               	movlw	8
  2849   007CB0  ECB0  F02C         	call	_serialSend
  2850   007CB4                     
  2851                           ;output.c: 149:         }
  2852   007CB4  4A2D               	infsnz	outputPrint@i_308^0,f,c
  2853   007CB6  2A2E               	incf	(outputPrint@i_308+1)^0,f,c
  2854   007CB8  BE2E               	btfsc	(outputPrint@i_308+1)^0,7,c
  2855   007CBA  EF68  F03E         	goto	u3621
  2856   007CBE  502E               	movf	(outputPrint@i_308+1)^0,w,c
  2857   007CC0  E109               	bnz	u3620
  2858   007CC2  0E20               	movlw	32
  2859   007CC4  5C2D               	subwf	outputPrint@i_308^0,w,c
  2860   007CC6  A0D8               	btfss	status,0,c
  2861   007CC8  EF68  F03E         	goto	u3621
  2862   007CCC  EF6A  F03E         	goto	u3620
  2863   007CD0                     u3621:
  2864   007CD0  EF57  F03E         	goto	l3732
  2865   007CD4                     u3620:
  2866   007CD4                     
  2867                           ;output.c: 150:         serialString("Protocolo: PSMIN2X00\r");
  2868   007CD4  0ECD               	movlw	low STR_33
  2869   007CD6  6E02               	movwf	serialString@str^0,c
  2870   007CD8  0E7E               	movlw	high STR_33
  2871   007CDA  6E03               	movwf	(serialString@str+1)^0,c
  2872   007CDC  EC6B  F02D         	call	_serialString	;wreg free
  2873   007CE0                     
  2874                           ;output.c: 151:         serialString(msgs[numTela][idioma]);
  2875   007CE0  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2876   007CE4  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2877   007CE8  90D8               	bcf	status,0,c
  2878   007CEA  3621               	rlcf	??_outputPrint^0,f,c
  2879   007CEC  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2880   007CEE  90D8               	bcf	status,0,c
  2881   007CF0  3621               	rlcf	??_outputPrint^0,f,c
  2882   007CF2  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2883   007CF4  0E60               	movlw	low _msgs
  2884   007CF6  2421               	addwf	??_outputPrint^0,w,c
  2885   007CF8  6E23               	movwf	(??_outputPrint+2)^0,c
  2886   007CFA  0E00               	movlw	high _msgs
  2887   007CFC  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2888   007CFE  6E24               	movwf	(??_outputPrint+3)^0,c
  2889   007D00  90D8               	bcf	status,0,c
  2890   007D02  341F               	rlcf	outputPrint@idioma^0,w,c
  2891   007D04  6ED9               	movwf	fsr2l,c
  2892   007D06  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2893   007D08  6EDA               	movwf	fsr2h,c
  2894   007D0A  5023               	movf	(??_outputPrint+2)^0,w,c
  2895   007D0C  26D9               	addwf	fsr2l,f,c
  2896   007D0E  5024               	movf	(??_outputPrint+3)^0,w,c
  2897   007D10  22DA               	addwfc	fsr2h,f,c
  2898   007D12  CFDE F002          	movff	postinc2,serialString@str
  2899   007D16  CFDD F003          	movff	postdec2,serialString@str+1
  2900   007D1A  EC6B  F02D         	call	_serialString	;wreg free
  2901   007D1E                     
  2902                           ;output.c: 152:         serialString("   ");
  2903   007D1E  0E20               	movlw	low (STR_13+17)
  2904   007D20  6E02               	movwf	serialString@str^0,c
  2905   007D22  0E7F               	movlw	high (STR_13+17)
  2906   007D24  6E03               	movwf	(serialString@str+1)^0,c
  2907   007D26  EC6B  F02D         	call	_serialString	;wreg free
  2908   007D2A                     
  2909                           ;output.c: 153:         serialInt(getAlarmLevel2b());
  2910   007D2A  EC19  F030         	call	_getAlarmLevel2b	;wreg free
  2911   007D2E  C018  F01B         	movff	?_getAlarmLevel2b,serialInt@val
  2912   007D32  C019  F01C         	movff	?_getAlarmLevel2b+1,serialInt@val+1
  2913   007D36  ECEF  F033         	call	_serialInt	;wreg free
  2914   007D3A                     
  2915                           ;output.c: 154:         serialString(" adc=");
  2916   007D3A  0EF8               	movlw	low STR_16
  2917   007D3C  6E02               	movwf	serialString@str^0,c
  2918   007D3E  0E7F               	movlw	high STR_16
  2919   007D40  6E03               	movwf	(serialString@str+1)^0,c
  2920   007D42  EC6B  F02D         	call	_serialString	;wreg free
  2921   007D46                     
  2922                           ;output.c: 155:         serialInt(adcRead(3));
  2923   007D46  0E00               	movlw	0
  2924   007D48  6E02               	movwf	(adcRead@a+1)^0,c
  2925   007D4A  0E03               	movlw	3
  2926   007D4C  6E01               	movwf	adcRead@a^0,c
  2927   007D4E  ECF7  F030         	call	_adcRead	;wreg free
  2928   007D52  C001  F01B         	movff	?_adcRead,serialInt@val
  2929   007D56  C002  F01C         	movff	?_adcRead+1,serialInt@val+1
  2930   007D5A  ECEF  F033         	call	_serialInt	;wreg free
  2931   007D5E                     
  2932                           ;output.c: 156:         serialSend('\r');
  2933   007D5E  0E0D               	movlw	13
  2934   007D60  ECB0  F02C         	call	_serialSend
  2935   007D64                     l3752:
  2936                           
  2937                           ;output.c: 159:     if (numTela == STATE_IDIOMA) {
  2938   007D64  0E05               	movlw	5
  2939   007D66  181D               	xorwf	outputPrint@numTela^0,w,c
  2940   007D68  101E               	iorwf	(outputPrint@numTela+1)^0,w,c
  2941   007D6A  A4D8               	btfss	status,2,c
  2942   007D6C  EFBA  F03E         	goto	u3631
  2943   007D70  EFBC  F03E         	goto	u3630
  2944   007D74                     u3631:
  2945   007D74  EF4F  F03F         	goto	l347
  2946   007D78                     u3630:
  2947   007D78                     
  2948                           ;output.c: 163:         lcdCommand(0x01);
  2949   007D78  0E01               	movlw	1
  2950   007D7A  EC26  F02F         	call	_lcdCommand
  2951                           
  2952                           ;output.c: 164:         lcdCommand(0x80);
  2953   007D7E  0E80               	movlw	128
  2954   007D80  EC26  F02F         	call	_lcdCommand
  2955   007D84                     
  2956                           ;output.c: 165:         lcdString(msgs[numTela][idioma]);
  2957   007D84  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  2958   007D88  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  2959   007D8C  90D8               	bcf	status,0,c
  2960   007D8E  3621               	rlcf	??_outputPrint^0,f,c
  2961   007D90  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2962   007D92  90D8               	bcf	status,0,c
  2963   007D94  3621               	rlcf	??_outputPrint^0,f,c
  2964   007D96  3622               	rlcf	(??_outputPrint+1)^0,f,c
  2965   007D98  0E60               	movlw	low _msgs
  2966   007D9A  2421               	addwf	??_outputPrint^0,w,c
  2967   007D9C  6E23               	movwf	(??_outputPrint+2)^0,c
  2968   007D9E  0E00               	movlw	high _msgs
  2969   007DA0  2022               	addwfc	(??_outputPrint+1)^0,w,c
  2970   007DA2  6E24               	movwf	(??_outputPrint+3)^0,c
  2971   007DA4  90D8               	bcf	status,0,c
  2972   007DA6  341F               	rlcf	outputPrint@idioma^0,w,c
  2973   007DA8  6ED9               	movwf	fsr2l,c
  2974   007DAA  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  2975   007DAC  6EDA               	movwf	fsr2h,c
  2976   007DAE  5023               	movf	(??_outputPrint+2)^0,w,c
  2977   007DB0  26D9               	addwf	fsr2l,f,c
  2978   007DB2  5024               	movf	(??_outputPrint+3)^0,w,c
  2979   007DB4  22DA               	addwfc	fsr2h,f,c
  2980   007DB6  CFDE F00C          	movff	postinc2,lcdString@msg
  2981   007DBA  CFDD F00D          	movff	postdec2,lcdString@msg+1
  2982   007DBE  ECA1  F02E         	call	_lcdString	;wreg free
  2983   007DC2                     
  2984                           ;output.c: 169:         for(int i=0;i<32;i++){
  2985   007DC2  0E00               	movlw	0
  2986   007DC4  6E30               	movwf	(outputPrint@i_312+1)^0,c
  2987   007DC6  0E00               	movlw	0
  2988   007DC8  6E2F               	movwf	outputPrint@i_312^0,c
  2989   007DCA                     l3764:
  2990                           
  2991                           ;output.c: 170:             serialSend('\b');
  2992   007DCA  0E08               	movlw	8
  2993   007DCC  ECB0  F02C         	call	_serialSend
  2994   007DD0                     
  2995                           ;output.c: 171:         }
  2996   007DD0  4A2F               	infsnz	outputPrint@i_312^0,f,c
  2997   007DD2  2A30               	incf	(outputPrint@i_312+1)^0,f,c
  2998   007DD4  BE30               	btfsc	(outputPrint@i_312+1)^0,7,c
  2999   007DD6  EFF6  F03E         	goto	u3641
  3000   007DDA  5030               	movf	(outputPrint@i_312+1)^0,w,c
  3001   007DDC  E109               	bnz	u3640
  3002   007DDE  0E20               	movlw	32
  3003   007DE0  5C2F               	subwf	outputPrint@i_312^0,w,c
  3004   007DE2  A0D8               	btfss	status,0,c
  3005   007DE4  EFF6  F03E         	goto	u3641
  3006   007DE8  EFF8  F03E         	goto	u3640
  3007   007DEC                     u3641:
  3008   007DEC  EFE5  F03E         	goto	l3764
  3009   007DF0                     u3640:
  3010   007DF0                     
  3011                           ;output.c: 172:         serialString("   ");
  3012   007DF0  0E20               	movlw	low (STR_13+17)
  3013   007DF2  6E02               	movwf	serialString@str^0,c
  3014   007DF4  0E7F               	movlw	high (STR_13+17)
  3015   007DF6  6E03               	movwf	(serialString@str+1)^0,c
  3016   007DF8  EC6B  F02D         	call	_serialString	;wreg free
  3017   007DFC                     
  3018                           ;output.c: 173:         serialString(msgs[numTela][idioma]);
  3019   007DFC  C01D  F021         	movff	outputPrint@numTela,??_outputPrint
  3020   007E00  C01E  F022         	movff	outputPrint@numTela+1,??_outputPrint+1
  3021   007E04  90D8               	bcf	status,0,c
  3022   007E06  3621               	rlcf	??_outputPrint^0,f,c
  3023   007E08  3622               	rlcf	(??_outputPrint+1)^0,f,c
  3024   007E0A  90D8               	bcf	status,0,c
  3025   007E0C  3621               	rlcf	??_outputPrint^0,f,c
  3026   007E0E  3622               	rlcf	(??_outputPrint+1)^0,f,c
  3027   007E10  0E60               	movlw	low _msgs
  3028   007E12  2421               	addwf	??_outputPrint^0,w,c
  3029   007E14  6E23               	movwf	(??_outputPrint+2)^0,c
  3030   007E16  0E00               	movlw	high _msgs
  3031   007E18  2022               	addwfc	(??_outputPrint+1)^0,w,c
  3032   007E1A  6E24               	movwf	(??_outputPrint+3)^0,c
  3033   007E1C  90D8               	bcf	status,0,c
  3034   007E1E  341F               	rlcf	outputPrint@idioma^0,w,c
  3035   007E20  6ED9               	movwf	fsr2l,c
  3036   007E22  3420               	rlcf	(outputPrint@idioma+1)^0,w,c
  3037   007E24  6EDA               	movwf	fsr2h,c
  3038   007E26  5023               	movf	(??_outputPrint+2)^0,w,c
  3039   007E28  26D9               	addwf	fsr2l,f,c
  3040   007E2A  5024               	movf	(??_outputPrint+3)^0,w,c
  3041   007E2C  22DA               	addwfc	fsr2h,f,c
  3042   007E2E  CFDE F002          	movff	postinc2,serialString@str
  3043   007E32  CFDD F003          	movff	postdec2,serialString@str+1
  3044   007E36  EC6B  F02D         	call	_serialString	;wreg free
  3045   007E3A                     
  3046                           ;output.c: 177:         lcdCommand(0xC0);
  3047   007E3A  0EC0               	movlw	192
  3048   007E3C  EC26  F02F         	call	_lcdCommand
  3049   007E40                     
  3050                           ;output.c: 178:         if (getLanguage() == 0) {
  3051   007E40  ECA5  F02C         	call	_getLanguage	;wreg free
  3052   007E44  0900               	iorlw	0
  3053   007E46  A4D8               	btfss	status,2,c
  3054   007E48  EF28  F03F         	goto	u3651
  3055   007E4C  EF2A  F03F         	goto	u3650
  3056   007E50                     u3651:
  3057   007E50  EF36  F03F         	goto	l3780
  3058   007E54                     u3650:
  3059   007E54                     
  3060                           ;output.c: 179:             lcdString("Portugues       ");
  3061   007E54  0E35               	movlw	low STR_37
  3062   007E56  6E0C               	movwf	lcdString@msg^0,c
  3063   007E58  0E7F               	movlw	high STR_37
  3064   007E5A  6E0D               	movwf	(lcdString@msg+1)^0,c
  3065   007E5C  ECA1  F02E         	call	_lcdString	;wreg free
  3066                           
  3067                           ;output.c: 180:             serialString("Portugues       ");
  3068   007E60  0E35               	movlw	low STR_37
  3069   007E62  6E02               	movwf	serialString@str^0,c
  3070   007E64  0E7F               	movlw	high STR_37
  3071   007E66  6E03               	movwf	(serialString@str+1)^0,c
  3072   007E68  EC6B  F02D         	call	_serialString	;wreg free
  3073   007E6C                     l3780:
  3074                           
  3075                           ;output.c: 183:         if (getLanguage() == 1) {
  3076   007E6C  ECA5  F02C         	call	_getLanguage	;wreg free
  3077   007E70  06E8               	decf	wreg,f,c
  3078   007E72  A4D8               	btfss	status,2,c
  3079   007E74  EF3E  F03F         	goto	u3661
  3080   007E78  EF40  F03F         	goto	u3660
  3081   007E7C                     u3661:
  3082   007E7C  EF4C  F03F         	goto	l3784
  3083   007E80                     u3660:
  3084   007E80                     
  3085                           ;output.c: 184:             lcdString("English         ");
  3086   007E80  0E24               	movlw	low STR_39
  3087   007E82  6E0C               	movwf	lcdString@msg^0,c
  3088   007E84  0E7F               	movlw	high STR_39
  3089   007E86  6E0D               	movwf	(lcdString@msg+1)^0,c
  3090   007E88  ECA1  F02E         	call	_lcdString	;wreg free
  3091                           
  3092                           ;output.c: 185:             lcdString("English         ");
  3093   007E8C  0E24               	movlw	low STR_39
  3094   007E8E  6E0C               	movwf	lcdString@msg^0,c
  3095   007E90  0E7F               	movlw	high STR_39
  3096   007E92  6E0D               	movwf	(lcdString@msg+1)^0,c
  3097   007E94  ECA1  F02E         	call	_lcdString	;wreg free
  3098   007E98                     l3784:
  3099                           
  3100                           ;output.c: 187:          serialSend('\r');
  3101   007E98  0E0D               	movlw	13
  3102   007E9A  ECB0  F02C         	call	_serialSend
  3103   007E9E                     l347:
  3104   007E9E  0012               	return		;funcret
  3105   007EA0                     __end_of_outputPrint:
  3106                           	callstack 0
  3107                           
  3108 ;; *************** function _serialString *****************
  3109 ;; Defined at:
  3110 ;;		line 77 in file "serial.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;  str             2    1[COMRAM] PTR const unsigned char 
  3113 ;;		 -> STR_38(17), STR_36(4), STR_35(6), STR_34(4), 
  3114 ;;		 -> STR_33(22), STR_30(6), STR_29(4), STR_28(22), 
  3115 ;;		 -> STR_25(6), STR_24(4), STR_23(22), STR_20(6), 
  3116 ;;		 -> STR_19(4), STR_18(22), STR_15(4), STR_14(22), 
  3117 ;;		 -> STR_12(17), STR_11(16), STR_10(17), STR_9(16), 
  3118 ;;		 -> STR_8(14), STR_7(14), STR_6(14), STR_5(14), 
  3119 ;;		 -> STR_4(14), STR_3(14), STR_2(14), STR_1(14), 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;		None
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      void 
  3124 ;; Registers used:
  3125 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3131 ;;      Params:         2       0       0       0       0       0       0       0       0
  3132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3134 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3135 ;;Total ram usage:        2 bytes
  3136 ;; Hardware stack levels used: 1
  3137 ;; Hardware stack levels required when called: 1
  3138 ;; This function calls:
  3139 ;;		_serialSend
  3140 ;; This function is called by:
  3141 ;;		_outputPrint
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text11
  3146   005AD6                     __ptext11:
  3147                           	callstack 0
  3148   005AD6                     _serialString:
  3149                           	callstack 27
  3150   005AD6                     
  3151                           ;serial.c: 78:     while (*str) {
  3152   005AD6  EF77  F02D         	goto	l3324
  3153   005ADA                     l3320:
  3154                           
  3155                           ;serial.c: 79:         serialSend(*str++);
  3156   005ADA  C002  FFF6         	movff	serialString@str,tblptrl
  3157   005ADE  C003  FFF7         	movff	serialString@str+1,tblptrh
  3158   005AE2                     	if	0	;tblptru may be non-zero
  3159   005AE2                     	endif
  3160   005AE2                     	if	0	;tblptru may be non-zero
  3161   005AE2                     	endif
  3162   005AE2  0008               	tblrd		*
  3163   005AE4  50F5               	movf	tablat,w,c
  3164   005AE6  ECB0  F02C         	call	_serialSend
  3165   005AEA  4A02               	infsnz	serialString@str^0,f,c
  3166   005AEC  2A03               	incf	(serialString@str+1)^0,f,c
  3167   005AEE                     l3324:
  3168                           
  3169                           ;serial.c: 78:     while (*str) {
  3170   005AEE  C002  FFF6         	movff	serialString@str,tblptrl
  3171   005AF2  C003  FFF7         	movff	serialString@str+1,tblptrh
  3172   005AF6                     	if	0	;tblptru may be non-zero
  3173   005AF6                     	endif
  3174   005AF6                     	if	0	;tblptru may be non-zero
  3175   005AF6                     	endif
  3176   005AF6  0008               	tblrd		*
  3177   005AF8  50F5               	movf	tablat,w,c
  3178   005AFA  0900               	iorlw	0
  3179   005AFC  A4D8               	btfss	status,2,c
  3180   005AFE  EF83  F02D         	goto	u3151
  3181   005B02  EF85  F02D         	goto	u3150
  3182   005B06                     u3151:
  3183   005B06  EF6D  F02D         	goto	l3320
  3184   005B0A                     u3150:
  3185   005B0A  0012               	return		;funcret
  3186   005B0C                     __end_of_serialString:
  3187                           	callstack 0
  3188                           
  3189 ;; *************** function _serialInt *****************
  3190 ;; Defined at:
  3191 ;;		line 62 in file "serial.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  val             2   26[COMRAM] int 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, status,2, status,0, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3205 ;;      Params:         2       0       0       0       0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3208 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3209 ;;Total ram usage:        2 bytes
  3210 ;; Hardware stack levels used: 1
  3211 ;; Hardware stack levels required when called: 1
  3212 ;; This function calls:
  3213 ;;		___awdiv
  3214 ;;		___awmod
  3215 ;;		_serialSend
  3216 ;; This function is called by:
  3217 ;;		_outputPrint
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text12
  3222   0067DE                     __ptext12:
  3223                           	callstack 0
  3224   0067DE                     _serialInt:
  3225                           	callstack 27
  3226   0067DE                     
  3227                           ;serial.c: 63:     if (val < 0) {
  3228   0067DE  BE1C               	btfsc	(serialInt@val+1)^0,7,c
  3229   0067E0  EFF6  F033         	goto	u3140
  3230   0067E4  EFF4  F033         	goto	u3141
  3231   0067E8                     u3141:
  3232   0067E8  EFFD  F033         	goto	l42
  3233   0067EC                     u3140:
  3234   0067EC                     
  3235                           ;serial.c: 64:         val = val * (-1);
  3236   0067EC  6C1B               	negf	serialInt@val^0,c
  3237   0067EE  1E1C               	comf	(serialInt@val+1)^0,f,c
  3238   0067F0  B0D8               	btfsc	status,0,c
  3239   0067F2  2A1C               	incf	(serialInt@val+1)^0,f,c
  3240   0067F4                     
  3241                           ;serial.c: 65:         serialSend('-');
  3242   0067F4  0E2D               	movlw	45
  3243   0067F6  ECB0  F02C         	call	_serialSend
  3244   0067FA                     l42:
  3245                           
  3246                           ;serial.c: 67:     serialSend((val / 10000) % 10 + 48);
  3247   0067FA  0E27               	movlw	39
  3248   0067FC  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3249   0067FE  0E10               	movlw	16
  3250   006800  6E03               	movwf	___awdiv@divisor^0,c
  3251   006802  C01B  F001         	movff	serialInt@val,___awdiv@dividend
  3252   006806  C01C  F002         	movff	serialInt@val+1,___awdiv@dividend+1
  3253   00680A  EC3D  F032         	call	___awdiv	;wreg free
  3254   00680E  C001  F009         	movff	?___awdiv,___awmod@dividend
  3255   006812  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3256   006816  0E00               	movlw	0
  3257   006818  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3258   00681A  0E0A               	movlw	10
  3259   00681C  6E0B               	movwf	___awmod@divisor^0,c
  3260   00681E  EC86  F031         	call	___awmod	;wreg free
  3261   006822  5009               	movf	?___awmod^0,w,c
  3262   006824  0F30               	addlw	48
  3263   006826  ECB0  F02C         	call	_serialSend
  3264                           
  3265                           ;serial.c: 68:     serialSend((val / 1000) % 10 + 48);
  3266   00682A  0E03               	movlw	3
  3267   00682C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3268   00682E  0EE8               	movlw	232
  3269   006830  6E03               	movwf	___awdiv@divisor^0,c
  3270   006832  C01B  F001         	movff	serialInt@val,___awdiv@dividend
  3271   006836  C01C  F002         	movff	serialInt@val+1,___awdiv@dividend+1
  3272   00683A  EC3D  F032         	call	___awdiv	;wreg free
  3273   00683E  C001  F009         	movff	?___awdiv,___awmod@dividend
  3274   006842  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3275   006846  0E00               	movlw	0
  3276   006848  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3277   00684A  0E0A               	movlw	10
  3278   00684C  6E0B               	movwf	___awmod@divisor^0,c
  3279   00684E  EC86  F031         	call	___awmod	;wreg free
  3280   006852  5009               	movf	?___awmod^0,w,c
  3281   006854  0F30               	addlw	48
  3282   006856  ECB0  F02C         	call	_serialSend
  3283                           
  3284                           ;serial.c: 69:     serialSend((val / 100) % 10 + 48);
  3285   00685A  0E00               	movlw	0
  3286   00685C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3287   00685E  0E64               	movlw	100
  3288   006860  6E03               	movwf	___awdiv@divisor^0,c
  3289   006862  C01B  F001         	movff	serialInt@val,___awdiv@dividend
  3290   006866  C01C  F002         	movff	serialInt@val+1,___awdiv@dividend+1
  3291   00686A  EC3D  F032         	call	___awdiv	;wreg free
  3292   00686E  C001  F009         	movff	?___awdiv,___awmod@dividend
  3293   006872  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3294   006876  0E00               	movlw	0
  3295   006878  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3296   00687A  0E0A               	movlw	10
  3297   00687C  6E0B               	movwf	___awmod@divisor^0,c
  3298   00687E  EC86  F031         	call	___awmod	;wreg free
  3299   006882  5009               	movf	?___awmod^0,w,c
  3300   006884  0F30               	addlw	48
  3301   006886  ECB0  F02C         	call	_serialSend
  3302                           
  3303                           ;serial.c: 70:     serialSend((val / 10) % 10 + 48);
  3304   00688A  0E00               	movlw	0
  3305   00688C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3306   00688E  0E0A               	movlw	10
  3307   006890  6E03               	movwf	___awdiv@divisor^0,c
  3308   006892  C01B  F001         	movff	serialInt@val,___awdiv@dividend
  3309   006896  C01C  F002         	movff	serialInt@val+1,___awdiv@dividend+1
  3310   00689A  EC3D  F032         	call	___awdiv	;wreg free
  3311   00689E  C001  F009         	movff	?___awdiv,___awmod@dividend
  3312   0068A2  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3313   0068A6  0E00               	movlw	0
  3314   0068A8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3315   0068AA  0E0A               	movlw	10
  3316   0068AC  6E0B               	movwf	___awmod@divisor^0,c
  3317   0068AE  EC86  F031         	call	___awmod	;wreg free
  3318   0068B2  5009               	movf	?___awmod^0,w,c
  3319   0068B4  0F30               	addlw	48
  3320   0068B6  ECB0  F02C         	call	_serialSend
  3321                           
  3322                           ;serial.c: 71:     serialSend((val / 1) % 10 + 48);
  3323   0068BA  C01B  F009         	movff	serialInt@val,___awmod@dividend
  3324   0068BE  C01C  F00A         	movff	serialInt@val+1,___awmod@dividend+1
  3325   0068C2  0E00               	movlw	0
  3326   0068C4  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3327   0068C6  0E0A               	movlw	10
  3328   0068C8  6E0B               	movwf	___awmod@divisor^0,c
  3329   0068CA  EC86  F031         	call	___awmod	;wreg free
  3330   0068CE  5009               	movf	?___awmod^0,w,c
  3331   0068D0  0F30               	addlw	48
  3332   0068D2  ECB0  F02C         	call	_serialSend
  3333   0068D6  0012               	return		;funcret
  3334   0068D8                     __end_of_serialInt:
  3335                           	callstack 0
  3336                           
  3337 ;; *************** function _serialSend *****************
  3338 ;; Defined at:
  3339 ;;		line 34 in file "serial.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  c               1    wreg     unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  c               1    0[COMRAM] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      void 
  3346 ;; Registers used:
  3347 ;;		wreg
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3353 ;;      Params:         0       0       0       0       0       0       0       0       0
  3354 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3356 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3357 ;;Total ram usage:        1 bytes
  3358 ;; Hardware stack levels used: 1
  3359 ;; This function calls:
  3360 ;;		Nothing
  3361 ;; This function is called by:
  3362 ;;		_serialInt
  3363 ;;		_serialString
  3364 ;;		_outputPrint
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text13
  3369   005960                     __ptext13:
  3370                           	callstack 0
  3371   005960                     _serialSend:
  3372                           	callstack 27
  3373                           
  3374                           ;incstack = 0
  3375                           ;serialSend@c stored from wreg
  3376   005960  6E01               	movwf	serialSend@c^0,c
  3377   005962                     l31:
  3378   005962  A89E               	btfss	158,4,c	;volatile
  3379   005964  EFB6  F02C         	goto	u2921
  3380   005968  EFB8  F02C         	goto	u2920
  3381   00596C                     u2921:
  3382   00596C  EFB1  F02C         	goto	l31
  3383   005970                     u2920:
  3384   005970                     
  3385                           ;serial.c: 37:     (*(volatile __near unsigned char*)0xFAD) = c;
  3386   005970  C001  FFAD         	movff	serialSend@c,4013	;volatile
  3387   005974  0012               	return		;funcret
  3388   005976                     __end_of_serialSend:
  3389                           	callstack 0
  3390                           
  3391 ;; *************** function _lcdString *****************
  3392 ;; Defined at:
  3393 ;;		line 168 in file "lcd.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  msg             2   11[COMRAM] PTR unsigned char 
  3396 ;;		 -> STR_40(17), STR_39(17), STR_37(17), STR_32(21), 
  3397 ;;		 -> STR_31(6), STR_27(21), STR_26(6), STR_22(21), 
  3398 ;;		 -> STR_21(6), STR_17(21), STR_16(6), STR_13(21), 
  3399 ;;		 -> STR_12(17), STR_11(16), STR_10(17), STR_9(16), 
  3400 ;;		 -> STR_8(14), STR_7(14), STR_6(14), STR_5(14), 
  3401 ;;		 -> STR_4(14), STR_3(14), STR_2(14), STR_1(14), 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  i               2   15[COMRAM] int 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  1    wreg      void 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3413 ;;      Params:         2       0       0       0       0       0       0       0       0
  3414 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3415 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3416 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3417 ;;Total ram usage:        6 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 3
  3420 ;; This function calls:
  3421 ;;		_lcdData
  3422 ;; This function is called by:
  3423 ;;		_outputPrint
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text14
  3428   005D42                     __ptext14:
  3429                           	callstack 0
  3430   005D42                     _lcdString:
  3431                           	callstack 25
  3432   005D42                     
  3433                           ;lcd.c: 169:     int i=0;
  3434   005D42  0E00               	movlw	0
  3435   005D44  6E11               	movwf	(lcdString@i+1)^0,c
  3436   005D46  0E00               	movlw	0
  3437   005D48  6E10               	movwf	lcdString@i^0,c
  3438                           
  3439                           ;lcd.c: 170:     while (msg[i]!=0) {
  3440   005D4A  EFB7  F02E         	goto	l3392
  3441   005D4E                     l3388:
  3442                           
  3443                           ;lcd.c: 171:         lcdData(msg[i]);
  3444   005D4E  5010               	movf	lcdString@i^0,w,c
  3445   005D50  240C               	addwf	lcdString@msg^0,w,c
  3446   005D52  6E0E               	movwf	??_lcdString^0,c
  3447   005D54  5011               	movf	(lcdString@i+1)^0,w,c
  3448   005D56  200D               	addwfc	(lcdString@msg+1)^0,w,c
  3449   005D58  6E0F               	movwf	(??_lcdString+1)^0,c
  3450   005D5A  C00E  FFF6         	movff	??_lcdString,tblptrl
  3451   005D5E  C00F  FFF7         	movff	??_lcdString+1,tblptrh
  3452   005D62                     	if	0	;tblptru may be non-zero
  3453   005D62                     	endif
  3454   005D62                     	if	0	;tblptru may be non-zero
  3455   005D62                     	endif
  3456   005D62  0008               	tblrd		*
  3457   005D64  50F5               	movf	tablat,w,c
  3458   005D66  ECE3  F02C         	call	_lcdData
  3459   005D6A                     
  3460                           ;lcd.c: 172:         i++;
  3461   005D6A  4A10               	infsnz	lcdString@i^0,f,c
  3462   005D6C  2A11               	incf	(lcdString@i+1)^0,f,c
  3463   005D6E                     l3392:
  3464                           
  3465                           ;lcd.c: 170:     while (msg[i]!=0) {
  3466   005D6E  5010               	movf	lcdString@i^0,w,c
  3467   005D70  240C               	addwf	lcdString@msg^0,w,c
  3468   005D72  6E0E               	movwf	??_lcdString^0,c
  3469   005D74  5011               	movf	(lcdString@i+1)^0,w,c
  3470   005D76  200D               	addwfc	(lcdString@msg+1)^0,w,c
  3471   005D78  6E0F               	movwf	(??_lcdString+1)^0,c
  3472   005D7A  C00E  FFF6         	movff	??_lcdString,tblptrl
  3473   005D7E  C00F  FFF7         	movff	??_lcdString+1,tblptrh
  3474   005D82                     	if	0	;tblptru may be non-zero
  3475   005D82                     	endif
  3476   005D82                     	if	0	;tblptru may be non-zero
  3477   005D82                     	endif
  3478   005D82  0008               	tblrd		*
  3479   005D84  50F5               	movf	tablat,w,c
  3480   005D86  0900               	iorlw	0
  3481   005D88  A4D8               	btfss	status,2,c
  3482   005D8A  EFC9  F02E         	goto	u3241
  3483   005D8E  EFCB  F02E         	goto	u3240
  3484   005D92                     u3241:
  3485   005D92  EFA7  F02E         	goto	l3388
  3486   005D96                     u3240:
  3487   005D96  0012               	return		;funcret
  3488   005D98                     __end_of_lcdString:
  3489                           	callstack 0
  3490                           
  3491 ;; *************** function _lcdInt *****************
  3492 ;; Defined at:
  3493 ;;		line 153 in file "lcd.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;  val             2   26[COMRAM] int 
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3507 ;;      Params:         2       0       0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3510 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3511 ;;Total ram usage:        2 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 3
  3514 ;; This function calls:
  3515 ;;		___awdiv
  3516 ;;		___awmod
  3517 ;;		_lcdData
  3518 ;; This function is called by:
  3519 ;;		_outputPrint
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text15
  3524   0066E4                     __ptext15:
  3525                           	callstack 0
  3526   0066E4                     _lcdInt:
  3527                           	callstack 25
  3528   0066E4                     
  3529                           ;lcd.c: 154:     if (val < 0) {
  3530   0066E4  BE1C               	btfsc	(lcdInt@val+1)^0,7,c
  3531   0066E6  EF79  F033         	goto	u3230
  3532   0066EA  EF77  F033         	goto	u3231
  3533   0066EE                     u3231:
  3534   0066EE  EF80  F033         	goto	l3376
  3535   0066F2                     u3230:
  3536   0066F2                     
  3537                           ;lcd.c: 155:         val = val * (-1);
  3538   0066F2  6C1B               	negf	lcdInt@val^0,c
  3539   0066F4  1E1C               	comf	(lcdInt@val+1)^0,f,c
  3540   0066F6  B0D8               	btfsc	status,0,c
  3541   0066F8  2A1C               	incf	(lcdInt@val+1)^0,f,c
  3542   0066FA                     
  3543                           ;lcd.c: 156:         lcdData('-');
  3544   0066FA  0E2D               	movlw	45
  3545   0066FC  ECE3  F02C         	call	_lcdData
  3546   006700                     l3376:
  3547                           
  3548                           ;lcd.c: 158:     lcdData((val / 10000) % 10 + 48);
  3549   006700  0E27               	movlw	39
  3550   006702  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3551   006704  0E10               	movlw	16
  3552   006706  6E03               	movwf	___awdiv@divisor^0,c
  3553   006708  C01B  F001         	movff	lcdInt@val,___awdiv@dividend
  3554   00670C  C01C  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3555   006710  EC3D  F032         	call	___awdiv	;wreg free
  3556   006714  C001  F009         	movff	?___awdiv,___awmod@dividend
  3557   006718  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3558   00671C  0E00               	movlw	0
  3559   00671E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3560   006720  0E0A               	movlw	10
  3561   006722  6E0B               	movwf	___awmod@divisor^0,c
  3562   006724  EC86  F031         	call	___awmod	;wreg free
  3563   006728  5009               	movf	?___awmod^0,w,c
  3564   00672A  0F30               	addlw	48
  3565   00672C  ECE3  F02C         	call	_lcdData
  3566   006730                     
  3567                           ;lcd.c: 159:     lcdData((val / 1000) % 10 + 48);
  3568   006730  0E03               	movlw	3
  3569   006732  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3570   006734  0EE8               	movlw	232
  3571   006736  6E03               	movwf	___awdiv@divisor^0,c
  3572   006738  C01B  F001         	movff	lcdInt@val,___awdiv@dividend
  3573   00673C  C01C  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3574   006740  EC3D  F032         	call	___awdiv	;wreg free
  3575   006744  C001  F009         	movff	?___awdiv,___awmod@dividend
  3576   006748  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3577   00674C  0E00               	movlw	0
  3578   00674E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3579   006750  0E0A               	movlw	10
  3580   006752  6E0B               	movwf	___awmod@divisor^0,c
  3581   006754  EC86  F031         	call	___awmod	;wreg free
  3582   006758  5009               	movf	?___awmod^0,w,c
  3583   00675A  0F30               	addlw	48
  3584   00675C  ECE3  F02C         	call	_lcdData
  3585   006760                     
  3586                           ;lcd.c: 160:     lcdData((val / 100) % 10 + 48);
  3587   006760  0E00               	movlw	0
  3588   006762  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3589   006764  0E64               	movlw	100
  3590   006766  6E03               	movwf	___awdiv@divisor^0,c
  3591   006768  C01B  F001         	movff	lcdInt@val,___awdiv@dividend
  3592   00676C  C01C  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3593   006770  EC3D  F032         	call	___awdiv	;wreg free
  3594   006774  C001  F009         	movff	?___awdiv,___awmod@dividend
  3595   006778  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3596   00677C  0E00               	movlw	0
  3597   00677E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3598   006780  0E0A               	movlw	10
  3599   006782  6E0B               	movwf	___awmod@divisor^0,c
  3600   006784  EC86  F031         	call	___awmod	;wreg free
  3601   006788  5009               	movf	?___awmod^0,w,c
  3602   00678A  0F30               	addlw	48
  3603   00678C  ECE3  F02C         	call	_lcdData
  3604   006790                     
  3605                           ;lcd.c: 161:     lcdData((val / 10) % 10 + 48);
  3606   006790  0E00               	movlw	0
  3607   006792  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3608   006794  0E0A               	movlw	10
  3609   006796  6E03               	movwf	___awdiv@divisor^0,c
  3610   006798  C01B  F001         	movff	lcdInt@val,___awdiv@dividend
  3611   00679C  C01C  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3612   0067A0  EC3D  F032         	call	___awdiv	;wreg free
  3613   0067A4  C001  F009         	movff	?___awdiv,___awmod@dividend
  3614   0067A8  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3615   0067AC  0E00               	movlw	0
  3616   0067AE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3617   0067B0  0E0A               	movlw	10
  3618   0067B2  6E0B               	movwf	___awmod@divisor^0,c
  3619   0067B4  EC86  F031         	call	___awmod	;wreg free
  3620   0067B8  5009               	movf	?___awmod^0,w,c
  3621   0067BA  0F30               	addlw	48
  3622   0067BC  ECE3  F02C         	call	_lcdData
  3623   0067C0                     
  3624                           ;lcd.c: 162:     lcdData((val / 1) % 10 + 48);
  3625   0067C0  C01B  F009         	movff	lcdInt@val,___awmod@dividend
  3626   0067C4  C01C  F00A         	movff	lcdInt@val+1,___awmod@dividend+1
  3627   0067C8  0E00               	movlw	0
  3628   0067CA  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3629   0067CC  0E0A               	movlw	10
  3630   0067CE  6E0B               	movwf	___awmod@divisor^0,c
  3631   0067D0  EC86  F031         	call	___awmod	;wreg free
  3632   0067D4  5009               	movf	?___awmod^0,w,c
  3633   0067D6  0F30               	addlw	48
  3634   0067D8  ECE3  F02C         	call	_lcdData
  3635   0067DC  0012               	return		;funcret
  3636   0067DE                     __end_of_lcdInt:
  3637                           	callstack 0
  3638                           
  3639 ;; *************** function _lcdData *****************
  3640 ;; Defined at:
  3641 ;;		line 145 in file "lcd.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  valor           1    wreg     unsigned char 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  valor           1   10[COMRAM] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0
  3656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3658 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3659 ;;Total ram usage:        1 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; Hardware stack levels required when called: 2
  3662 ;; This function calls:
  3663 ;;		_delay_50us
  3664 ;;		_lcdData4
  3665 ;; This function is called by:
  3666 ;;		_lcdInt
  3667 ;;		_lcdString
  3668 ;;		_printf
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text16
  3673   0059C6                     __ptext16:
  3674                           	callstack 0
  3675   0059C6                     _lcdData:
  3676                           	callstack 25
  3677                           
  3678                           ;incstack = 0
  3679                           ;lcdData@valor stored from wreg
  3680   0059C6  6E0B               	movwf	lcdData@valor^0,c
  3681   0059C8                     
  3682                           ;lcd.c: 146:     lcdData4(valor);
  3683   0059C8  500B               	movf	lcdData@valor^0,w,c
  3684   0059CA  EC83  F030         	call	_lcdData4
  3685                           
  3686                           ;lcd.c: 147:     lcdData4(valor << 4);
  3687   0059CE  380B               	swapf	lcdData@valor^0,w,c
  3688   0059D0  0BF0               	andlw	240
  3689   0059D2  EC83  F030         	call	_lcdData4
  3690                           
  3691                           ;lcd.c: 148:     delay_50us(1);
  3692   0059D6  0E01               	movlw	1
  3693   0059D8  6E01               	movwf	delay_50us@us^0,c
  3694   0059DA  0E00               	movlw	0
  3695   0059DC  6E02               	movwf	(delay_50us@us+1)^0,c
  3696   0059DE  0E00               	movlw	0
  3697   0059E0  6E03               	movwf	(delay_50us@us+2)^0,c
  3698   0059E2  0E00               	movlw	0
  3699   0059E4  6E04               	movwf	(delay_50us@us+3)^0,c
  3700   0059E6  EC4A  F030         	call	_delay_50us	;wreg free
  3701   0059EA  0012               	return		;funcret
  3702   0059EC                     __end_of_lcdData:
  3703                           	callstack 0
  3704                           
  3705 ;; *************** function _lcdData4 *****************
  3706 ;; Defined at:
  3707 ;;		line 104 in file "lcd.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;  cmd             1    wreg     unsigned char 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  cmd             1    0[COMRAM] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg, status,2, status,0, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0
  3722 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3724 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3725 ;;Total ram usage:        1 bytes
  3726 ;; Hardware stack levels used: 1
  3727 ;; Hardware stack levels required when called: 1
  3728 ;; This function calls:
  3729 ;;		_pulse
  3730 ;; This function is called by:
  3731 ;;		_lcdData
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           	psect	text17
  3736   006106                     __ptext17:
  3737                           	callstack 0
  3738   006106                     _lcdData4:
  3739                           	callstack 25
  3740                           
  3741                           ;incstack = 0
  3742                           ;lcdData4@cmd stored from wreg
  3743   006106  6E01               	movwf	lcdData4@cmd^0,c
  3744   006108                     
  3745                           ;lcd.c: 105:     (((*(volatile __near unsigned char*)0xF84)) |= (1<<(1)));
  3746   006108  8284               	bsf	132,1,c	;volatile
  3747   00610A                     
  3748                           ;lcd.c: 106:     if (((cmd) & (1<<(4)))) {
  3749   00610A  A801               	btfss	lcdData4@cmd^0,4,c
  3750   00610C  EF8A  F030         	goto	u2441
  3751   006110  EF8C  F030         	goto	u2440
  3752   006114                     u2441:
  3753   006114  EF8F  F030         	goto	l2910
  3754   006118                     u2440:
  3755   006118                     
  3756                           ;lcd.c: 107:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(3)));
  3757   006118  8683               	bsf	131,3,c	;volatile
  3758                           
  3759                           ;lcd.c: 108:     } else {
  3760   00611A  EF92  F030         	goto	l2912
  3761   00611E                     l2910:
  3762                           
  3763                           ;lcd.c: 109:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near u
      +                          nsigned char*)0xF83)) & (~(1<<(3))));
  3764   00611E  5083               	movf	131,w,c	;volatile
  3765   006120  0BF7               	andlw	247
  3766   006122  6E83               	movwf	131,c	;volatile
  3767   006124                     l2912:
  3768                           
  3769                           ;lcd.c: 111:     if (((cmd) & (1<<(5)))) {
  3770   006124  AA01               	btfss	lcdData4@cmd^0,5,c
  3771   006126  EF97  F030         	goto	u2451
  3772   00612A  EF99  F030         	goto	u2450
  3773   00612E                     u2451:
  3774   00612E  EF9C  F030         	goto	l2916
  3775   006132                     u2450:
  3776   006132                     
  3777                           ;lcd.c: 112:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(2)));
  3778   006132  8483               	bsf	131,2,c	;volatile
  3779                           
  3780                           ;lcd.c: 113:     } else {
  3781   006134  EF9F  F030         	goto	l2918
  3782   006138                     l2916:
  3783                           
  3784                           ;lcd.c: 114:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near u
      +                          nsigned char*)0xF83)) & (~(1<<(2))));
  3785   006138  5083               	movf	131,w,c	;volatile
  3786   00613A  0BFB               	andlw	251
  3787   00613C  6E83               	movwf	131,c	;volatile
  3788   00613E                     l2918:
  3789                           
  3790                           ;lcd.c: 116:     if (((cmd) & (1<<(6)))) {
  3791   00613E  AC01               	btfss	lcdData4@cmd^0,6,c
  3792   006140  EFA4  F030         	goto	u2461
  3793   006144  EFA6  F030         	goto	u2460
  3794   006148                     u2461:
  3795   006148  EFA9  F030         	goto	l2922
  3796   00614C                     u2460:
  3797   00614C                     
  3798                           ;lcd.c: 117:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(1)));
  3799   00614C  8283               	bsf	131,1,c	;volatile
  3800                           
  3801                           ;lcd.c: 118:     } else {
  3802   00614E  EFAC  F030         	goto	l2924
  3803   006152                     l2922:
  3804                           
  3805                           ;lcd.c: 119:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near u
      +                          nsigned char*)0xF83)) & (~(1<<(1))));
  3806   006152  5083               	movf	131,w,c	;volatile
  3807   006154  0BFD               	andlw	253
  3808   006156  6E83               	movwf	131,c	;volatile
  3809   006158                     l2924:
  3810                           
  3811                           ;lcd.c: 121:     if (((cmd) & (1<<(7)))) {
  3812   006158  AE01               	btfss	lcdData4@cmd^0,7,c
  3813   00615A  EFB1  F030         	goto	u2471
  3814   00615E  EFB3  F030         	goto	u2470
  3815   006162                     u2471:
  3816   006162  EFB6  F030         	goto	l2928
  3817   006166                     u2470:
  3818   006166                     
  3819                           ;lcd.c: 122:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(0)));
  3820   006166  8083               	bsf	131,0,c	;volatile
  3821                           
  3822                           ;lcd.c: 123:     } else {
  3823   006168  EFB9  F030         	goto	l2930
  3824   00616C                     l2928:
  3825                           
  3826                           ;lcd.c: 124:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near u
      +                          nsigned char*)0xF83)) & (~(1<<(0))));
  3827   00616C  5083               	movf	131,w,c	;volatile
  3828   00616E  0BFE               	andlw	254
  3829   006170  6E83               	movwf	131,c	;volatile
  3830   006172                     l2930:
  3831                           
  3832                           ;lcd.c: 126:     pulse();
  3833   006172  EC31  F02C         	call	_pulse	;wreg free
  3834   006176  0012               	return		;funcret
  3835   006178                     __end_of_lcdData4:
  3836                           	callstack 0
  3837                           
  3838 ;; *************** function ___awmod *****************
  3839 ;; Defined at:
  3840 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  dividend        2    8[COMRAM] int 
  3843 ;;  divisor         2   10[COMRAM] int 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  sign            1   13[COMRAM] unsigned char 
  3846 ;;  counter         1   12[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  2    8[COMRAM] int 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3856 ;;      Params:         4       0       0       0       0       0       0       0       0
  3857 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3859 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3860 ;;Total ram usage:        6 bytes
  3861 ;; Hardware stack levels used: 1
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_serialInt
  3866 ;;		_lcdInt
  3867 ;;		_dec2bcd
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text18
  3872   00630C                     __ptext18:
  3873                           	callstack 0
  3874   00630C                     ___awmod:
  3875                           	callstack 27
  3876   00630C  0E00               	movlw	0
  3877   00630E  6E0E               	movwf	___awmod@sign^0,c
  3878   006310  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  3879   006312  EF8F  F031         	goto	u3060
  3880   006316  EF8D  F031         	goto	u3061
  3881   00631A                     u3061:
  3882   00631A  EF95  F031         	goto	l3266
  3883   00631E                     u3060:
  3884   00631E  6C09               	negf	___awmod@dividend^0,c
  3885   006320  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  3886   006322  B0D8               	btfsc	status,0,c
  3887   006324  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  3888   006326  0E01               	movlw	1
  3889   006328  6E0E               	movwf	___awmod@sign^0,c
  3890   00632A                     l3266:
  3891   00632A  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  3892   00632C  EF9C  F031         	goto	u3070
  3893   006330  EF9A  F031         	goto	u3071
  3894   006334                     u3071:
  3895   006334  EFA0  F031         	goto	l3270
  3896   006338                     u3070:
  3897   006338  6C0B               	negf	___awmod@divisor^0,c
  3898   00633A  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  3899   00633C  B0D8               	btfsc	status,0,c
  3900   00633E  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  3901   006340                     l3270:
  3902   006340  500B               	movf	___awmod@divisor^0,w,c
  3903   006342  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  3904   006344  B4D8               	btfsc	status,2,c
  3905   006346  EFA7  F031         	goto	u3081
  3906   00634A  EFA9  F031         	goto	u3080
  3907   00634E                     u3081:
  3908   00634E  EFCD  F031         	goto	l3286
  3909   006352                     u3080:
  3910   006352  0E01               	movlw	1
  3911   006354  6E0D               	movwf	___awmod@counter^0,c
  3912   006356  EFB1  F031         	goto	l3276
  3913   00635A                     l3274:
  3914   00635A  90D8               	bcf	status,0,c
  3915   00635C  360B               	rlcf	___awmod@divisor^0,f,c
  3916   00635E  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  3917   006360  2A0D               	incf	___awmod@counter^0,f,c
  3918   006362                     l3276:
  3919   006362  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  3920   006364  EFB6  F031         	goto	u3091
  3921   006368  EFB8  F031         	goto	u3090
  3922   00636C                     u3091:
  3923   00636C  EFAD  F031         	goto	l3274
  3924   006370                     u3090:
  3925   006370                     l3278:
  3926   006370  500B               	movf	___awmod@divisor^0,w,c
  3927   006372  5C09               	subwf	___awmod@dividend^0,w,c
  3928   006374  500C               	movf	(___awmod@divisor+1)^0,w,c
  3929   006376  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  3930   006378  A0D8               	btfss	status,0,c
  3931   00637A  EFC1  F031         	goto	u3101
  3932   00637E  EFC3  F031         	goto	u3100
  3933   006382                     u3101:
  3934   006382  EFC7  F031         	goto	l3282
  3935   006386                     u3100:
  3936   006386  500B               	movf	___awmod@divisor^0,w,c
  3937   006388  5E09               	subwf	___awmod@dividend^0,f,c
  3938   00638A  500C               	movf	(___awmod@divisor+1)^0,w,c
  3939   00638C  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  3940   00638E                     l3282:
  3941   00638E  90D8               	bcf	status,0,c
  3942   006390  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  3943   006392  320B               	rrcf	___awmod@divisor^0,f,c
  3944   006394  2E0D               	decfsz	___awmod@counter^0,f,c
  3945   006396  EFB8  F031         	goto	l3278
  3946   00639A                     l3286:
  3947   00639A  500E               	movf	___awmod@sign^0,w,c
  3948   00639C  B4D8               	btfsc	status,2,c
  3949   00639E  EFD3  F031         	goto	u3111
  3950   0063A2  EFD5  F031         	goto	u3110
  3951   0063A6                     u3111:
  3952   0063A6  EFD9  F031         	goto	l3290
  3953   0063AA                     u3110:
  3954   0063AA  6C09               	negf	___awmod@dividend^0,c
  3955   0063AC  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  3956   0063AE  B0D8               	btfsc	status,0,c
  3957   0063B0  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  3958   0063B2                     l3290:
  3959   0063B2  C009  F009         	movff	___awmod@dividend,?___awmod
  3960   0063B6  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  3961   0063BA  0012               	return		;funcret
  3962   0063BC                     __end_of___awmod:
  3963                           	callstack 0
  3964                           
  3965 ;; *************** function ___awdiv *****************
  3966 ;; Defined at:
  3967 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awdiv.c"
  3968 ;; Parameters:    Size  Location     Type
  3969 ;;  dividend        2    0[COMRAM] int 
  3970 ;;  divisor         2    2[COMRAM] int 
  3971 ;; Auto vars:     Size  Location     Type
  3972 ;;  quotient        2    6[COMRAM] int 
  3973 ;;  sign            1    5[COMRAM] unsigned char 
  3974 ;;  counter         1    4[COMRAM] unsigned char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  2    0[COMRAM] int 
  3977 ;; Registers used:
  3978 ;;		wreg, status,2, status,0
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3984 ;;      Params:         4       0       0       0       0       0       0       0       0
  3985 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3987 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3988 ;;Total ram usage:        8 bytes
  3989 ;; Hardware stack levels used: 1
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_serialInt
  3994 ;;		_lcdInt
  3995 ;;		_dec2bcd
  3996 ;;		_bcd2dec
  3997 ;; This function uses a non-reentrant model
  3998 ;;
  3999                           
  4000                           	psect	text19
  4001   00647A                     __ptext19:
  4002                           	callstack 0
  4003   00647A                     ___awdiv:
  4004                           	callstack 27
  4005   00647A  0E00               	movlw	0
  4006   00647C  6E06               	movwf	___awdiv@sign^0,c
  4007   00647E  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4008   006480  EF46  F032         	goto	u3000
  4009   006484  EF44  F032         	goto	u3001
  4010   006488                     u3001:
  4011   006488  EF4C  F032         	goto	l3222
  4012   00648C                     u3000:
  4013   00648C  6C03               	negf	___awdiv@divisor^0,c
  4014   00648E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4015   006490  B0D8               	btfsc	status,0,c
  4016   006492  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4017   006494  0E01               	movlw	1
  4018   006496  6E06               	movwf	___awdiv@sign^0,c
  4019   006498                     l3222:
  4020   006498  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4021   00649A  EF53  F032         	goto	u3010
  4022   00649E  EF51  F032         	goto	u3011
  4023   0064A2                     u3011:
  4024   0064A2  EF59  F032         	goto	l3228
  4025   0064A6                     u3010:
  4026   0064A6  6C01               	negf	___awdiv@dividend^0,c
  4027   0064A8  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4028   0064AA  B0D8               	btfsc	status,0,c
  4029   0064AC  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4030   0064AE  0E01               	movlw	1
  4031   0064B0  1A06               	xorwf	___awdiv@sign^0,f,c
  4032   0064B2                     l3228:
  4033   0064B2  0E00               	movlw	0
  4034   0064B4  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4035   0064B6  0E00               	movlw	0
  4036   0064B8  6E07               	movwf	___awdiv@quotient^0,c
  4037   0064BA  5003               	movf	___awdiv@divisor^0,w,c
  4038   0064BC  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4039   0064BE  B4D8               	btfsc	status,2,c
  4040   0064C0  EF64  F032         	goto	u3021
  4041   0064C4  EF66  F032         	goto	u3020
  4042   0064C8                     u3021:
  4043   0064C8  EF8E  F032         	goto	l3250
  4044   0064CC                     u3020:
  4045   0064CC  0E01               	movlw	1
  4046   0064CE  6E05               	movwf	___awdiv@counter^0,c
  4047   0064D0  EF6E  F032         	goto	l3236
  4048   0064D4                     l3234:
  4049   0064D4  90D8               	bcf	status,0,c
  4050   0064D6  3603               	rlcf	___awdiv@divisor^0,f,c
  4051   0064D8  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4052   0064DA  2A05               	incf	___awdiv@counter^0,f,c
  4053   0064DC                     l3236:
  4054   0064DC  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4055   0064DE  EF73  F032         	goto	u3031
  4056   0064E2  EF75  F032         	goto	u3030
  4057   0064E6                     u3031:
  4058   0064E6  EF6A  F032         	goto	l3234
  4059   0064EA                     u3030:
  4060   0064EA                     l3238:
  4061   0064EA  90D8               	bcf	status,0,c
  4062   0064EC  3607               	rlcf	___awdiv@quotient^0,f,c
  4063   0064EE  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4064   0064F0  5003               	movf	___awdiv@divisor^0,w,c
  4065   0064F2  5C01               	subwf	___awdiv@dividend^0,w,c
  4066   0064F4  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4067   0064F6  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4068   0064F8  A0D8               	btfss	status,0,c
  4069   0064FA  EF81  F032         	goto	u3041
  4070   0064FE  EF83  F032         	goto	u3040
  4071   006502                     u3041:
  4072   006502  EF88  F032         	goto	l3246
  4073   006506                     u3040:
  4074   006506  5003               	movf	___awdiv@divisor^0,w,c
  4075   006508  5E01               	subwf	___awdiv@dividend^0,f,c
  4076   00650A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4077   00650C  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4078   00650E  8007               	bsf	___awdiv@quotient^0,0,c
  4079   006510                     l3246:
  4080   006510  90D8               	bcf	status,0,c
  4081   006512  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4082   006514  3203               	rrcf	___awdiv@divisor^0,f,c
  4083   006516  2E05               	decfsz	___awdiv@counter^0,f,c
  4084   006518  EF75  F032         	goto	l3238
  4085   00651C                     l3250:
  4086   00651C  5006               	movf	___awdiv@sign^0,w,c
  4087   00651E  B4D8               	btfsc	status,2,c
  4088   006520  EF94  F032         	goto	u3051
  4089   006524  EF96  F032         	goto	u3050
  4090   006528                     u3051:
  4091   006528  EF9A  F032         	goto	l3254
  4092   00652C                     u3050:
  4093   00652C  6C07               	negf	___awdiv@quotient^0,c
  4094   00652E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4095   006530  B0D8               	btfsc	status,0,c
  4096   006532  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4097   006534                     l3254:
  4098   006534  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4099   006538  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4100   00653C  0012               	return		;funcret
  4101   00653E                     __end_of___awdiv:
  4102                           	callstack 0
  4103                           
  4104 ;; *************** function _getTime *****************
  4105 ;; Defined at:
  4106 ;;		line 28 in file "var.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  2    0[COMRAM] int 
  4113 ;; Registers used:
  4114 ;;		None
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4120 ;;      Params:         2       0       0       0       0       0       0       0       0
  4121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4123 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4124 ;;Total ram usage:        2 bytes
  4125 ;; Hardware stack levels used: 1
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;;		_outputPrint
  4131 ;;		_smLoop
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text20
  4136   005880                     __ptext20:
  4137                           	callstack 0
  4138   005880                     _getTime:
  4139                           	callstack 28
  4140   005880                     
  4141                           ;var.c: 29:     return time;
  4142   005880  C04D  F001         	movff	_time,?_getTime
  4143   005884  C04E  F002         	movff	_time+1,?_getTime+1
  4144   005888  0012               	return		;funcret
  4145   00588A                     __end_of_getTime:
  4146                           	callstack 0
  4147                           
  4148 ;; *************** function _getLanguage *****************
  4149 ;; Defined at:
  4150 ;;		line 108 in file "var.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;                  1    wreg      unsigned char 
  4157 ;; Registers used:
  4158 ;;		wreg, status,2, status,0, cstack
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4164 ;;      Params:         0       0       0       0       0       0       0       0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4167 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4168 ;;Total ram usage:        0 bytes
  4169 ;; Hardware stack levels used: 1
  4170 ;; Hardware stack levels required when called: 4
  4171 ;; This function calls:
  4172 ;;		_dsReadData
  4173 ;; This function is called by:
  4174 ;;		_outputPrint
  4175 ;;		_smLoop
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text21
  4180   00594A                     __ptext21:
  4181                           	callstack 0
  4182   00594A                     _getLanguage:
  4183                           	callstack 24
  4184   00594A                     
  4185                           ;var.c: 109:     language = dsReadData(0x20)%2;
  4186   00594A  0E00               	movlw	0
  4187   00594C  6E09               	movwf	(dsReadData@address+1)^0,c
  4188   00594E  0E20               	movlw	32
  4189   005950  6E08               	movwf	dsReadData@address^0,c
  4190   005952  EC54  F02E         	call	_dsReadData	;wreg free
  4191   005956  5008               	movf	?_dsReadData^0,w,c
  4192   005958  0B01               	andlw	1
  4193   00595A  6E4A               	movwf	_language^0,c
  4194   00595C                     
  4195                           ;var.c: 110:     return language;
  4196   00595C  504A               	movf	_language^0,w,c
  4197   00595E  0012               	return		;funcret
  4198   005960                     __end_of_getLanguage:
  4199                           	callstack 0
  4200                           
  4201 ;; *************** function _getAlarmLevel2b *****************
  4202 ;; Defined at:
  4203 ;;		line 91 in file "var.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  tmp             1   25[COMRAM] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  2   23[COMRAM] int 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2, status,0, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4217 ;;      Params:         2       0       0       0       0       0       0       0       0
  4218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4220 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4221 ;;Total ram usage:        3 bytes
  4222 ;; Hardware stack levels used: 1
  4223 ;; Hardware stack levels required when called: 4
  4224 ;; This function calls:
  4225 ;;		_dsReadData
  4226 ;;		_dsWriteData
  4227 ;; This function is called by:
  4228 ;;		_outputPrint
  4229 ;;		_smLoop
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text22
  4234   006032                     __ptext22:
  4235                           	callstack 0
  4236   006032                     _getAlarmLevel2b:
  4237                           	callstack 24
  4238   006032                     
  4239                           ;var.c: 92:      char tmp = dsReadData(0x21);
  4240   006032  0E00               	movlw	0
  4241   006034  6E09               	movwf	(dsReadData@address+1)^0,c
  4242   006036  0E21               	movlw	33
  4243   006038  6E08               	movwf	dsReadData@address^0,c
  4244   00603A  EC54  F02E         	call	_dsReadData	;wreg free
  4245   00603E  5008               	movf	?_dsReadData^0,w,c
  4246   006040  6E1A               	movwf	getAlarmLevel2b@tmp^0,c
  4247   006042                     
  4248                           ;var.c: 93:     if (tmp > 99) {
  4249   006042  0E63               	movlw	99
  4250   006044  641A               	cpfsgt	getAlarmLevel2b@tmp^0,c
  4251   006046  EF27  F030         	goto	u3351
  4252   00604A  EF29  F030         	goto	u3350
  4253   00604E                     u3351:
  4254   00604E  EF30  F030         	goto	l3458
  4255   006052                     u3350:
  4256   006052                     
  4257                           ;var.c: 94:         dsWriteData(99, 0x21);
  4258   006052  0E00               	movlw	0
  4259   006054  6E12               	movwf	(dsWriteData@address+1)^0,c
  4260   006056  0E21               	movlw	33
  4261   006058  6E11               	movwf	dsWriteData@address^0,c
  4262   00605A  0E63               	movlw	99
  4263   00605C  EC05  F033         	call	_dsWriteData
  4264   006060                     l3458:
  4265                           
  4266                           ;var.c: 96:     if (tmp <= 0) {
  4267   006060  501A               	movf	getAlarmLevel2b@tmp^0,w,c
  4268   006062  A4D8               	btfss	status,2,c
  4269   006064  EF36  F030         	goto	u3361
  4270   006068  EF38  F030         	goto	u3360
  4271   00606C                     u3361:
  4272   00606C  EF3F  F030         	goto	l507
  4273   006070                     u3360:
  4274   006070                     
  4275                           ;var.c: 97:         dsWriteData(0, 0x21);
  4276   006070  0E00               	movlw	0
  4277   006072  6E12               	movwf	(dsWriteData@address+1)^0,c
  4278   006074  0E21               	movlw	33
  4279   006076  6E11               	movwf	dsWriteData@address^0,c
  4280   006078  0E00               	movlw	0
  4281   00607A  EC05  F033         	call	_dsWriteData
  4282   00607E                     l507:
  4283                           
  4284                           ;var.c: 99:     return (int) (dsReadData(0x21));
  4285   00607E  0E00               	movlw	0
  4286   006080  6E09               	movwf	(dsReadData@address+1)^0,c
  4287   006082  0E21               	movlw	33
  4288   006084  6E08               	movwf	dsReadData@address^0,c
  4289   006086  EC54  F02E         	call	_dsReadData	;wreg free
  4290   00608A  C008  F018         	movff	?_dsReadData,?_getAlarmLevel2b
  4291   00608E  C009  F019         	movff	?_dsReadData+1,?_getAlarmLevel2b+1
  4292   006092  0012               	return		;funcret
  4293   006094                     __end_of_getAlarmLevel2b:
  4294                           	callstack 0
  4295                           
  4296 ;; *************** function _getAlarmLevel2a *****************
  4297 ;; Defined at:
  4298 ;;		line 56 in file "var.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;  tmp             1   25[COMRAM] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2   23[COMRAM] int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0, cstack
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4312 ;;      Params:         2       0       0       0       0       0       0       0       0
  4313 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4315 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4316 ;;Total ram usage:        3 bytes
  4317 ;; Hardware stack levels used: 1
  4318 ;; Hardware stack levels required when called: 4
  4319 ;; This function calls:
  4320 ;;		_dsReadData
  4321 ;;		_dsWriteData
  4322 ;; This function is called by:
  4323 ;;		_outputPrint
  4324 ;;		_smLoop
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text23
  4329   005FD0                     __ptext23:
  4330                           	callstack 0
  4331   005FD0                     _getAlarmLevel2a:
  4332                           	callstack 24
  4333   005FD0                     
  4334                           ;var.c: 57:     char tmp = dsReadData(0x23);
  4335   005FD0  0E00               	movlw	0
  4336   005FD2  6E09               	movwf	(dsReadData@address+1)^0,c
  4337   005FD4  0E23               	movlw	35
  4338   005FD6  6E08               	movwf	dsReadData@address^0,c
  4339   005FD8  EC54  F02E         	call	_dsReadData	;wreg free
  4340   005FDC  5008               	movf	?_dsReadData^0,w,c
  4341   005FDE  6E1A               	movwf	getAlarmLevel2a@tmp^0,c
  4342   005FE0                     
  4343                           ;var.c: 58:     if (tmp > 99) {
  4344   005FE0  0E63               	movlw	99
  4345   005FE2  641A               	cpfsgt	getAlarmLevel2a@tmp^0,c
  4346   005FE4  EFF6  F02F         	goto	u3311
  4347   005FE8  EFF8  F02F         	goto	u3310
  4348   005FEC                     u3311:
  4349   005FEC  EFFF  F02F         	goto	l3434
  4350   005FF0                     u3310:
  4351   005FF0                     
  4352                           ;var.c: 59:         dsWriteData(99, 0x23);
  4353   005FF0  0E00               	movlw	0
  4354   005FF2  6E12               	movwf	(dsWriteData@address+1)^0,c
  4355   005FF4  0E23               	movlw	35
  4356   005FF6  6E11               	movwf	dsWriteData@address^0,c
  4357   005FF8  0E63               	movlw	99
  4358   005FFA  EC05  F033         	call	_dsWriteData
  4359   005FFE                     l3434:
  4360                           
  4361                           ;var.c: 61:     if (tmp <= 0) {
  4362   005FFE  501A               	movf	getAlarmLevel2a@tmp^0,w,c
  4363   006000  A4D8               	btfss	status,2,c
  4364   006002  EF05  F030         	goto	u3321
  4365   006006  EF07  F030         	goto	u3320
  4366   00600A                     u3321:
  4367   00600A  EF0E  F030         	goto	l489
  4368   00600E                     u3320:
  4369   00600E                     
  4370                           ;var.c: 62:         dsWriteData(0, 0x23);
  4371   00600E  0E00               	movlw	0
  4372   006010  6E12               	movwf	(dsWriteData@address+1)^0,c
  4373   006012  0E23               	movlw	35
  4374   006014  6E11               	movwf	dsWriteData@address^0,c
  4375   006016  0E00               	movlw	0
  4376   006018  EC05  F033         	call	_dsWriteData
  4377   00601C                     l489:
  4378                           
  4379                           ;var.c: 64:     return (int) (dsReadData(0x23));
  4380   00601C  0E00               	movlw	0
  4381   00601E  6E09               	movwf	(dsReadData@address+1)^0,c
  4382   006020  0E23               	movlw	35
  4383   006022  6E08               	movwf	dsReadData@address^0,c
  4384   006024  EC54  F02E         	call	_dsReadData	;wreg free
  4385   006028  C008  F018         	movff	?_dsReadData,?_getAlarmLevel2a
  4386   00602C  C009  F019         	movff	?_dsReadData+1,?_getAlarmLevel2a+1
  4387   006030  0012               	return		;funcret
  4388   006032                     __end_of_getAlarmLevel2a:
  4389                           	callstack 0
  4390                           
  4391 ;; *************** function _getAlarmLevel1b *****************
  4392 ;; Defined at:
  4393 ;;		line 74 in file "var.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;		None
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  tmp             1   25[COMRAM] unsigned char 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  2   23[COMRAM] int 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4407 ;;      Params:         2       0       0       0       0       0       0       0       0
  4408 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4410 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4411 ;;Total ram usage:        3 bytes
  4412 ;; Hardware stack levels used: 1
  4413 ;; Hardware stack levels required when called: 4
  4414 ;; This function calls:
  4415 ;;		_dsReadData
  4416 ;;		_dsWriteData
  4417 ;; This function is called by:
  4418 ;;		_outputPrint
  4419 ;;		_smLoop
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           	psect	text24
  4424   005F6E                     __ptext24:
  4425                           	callstack 0
  4426   005F6E                     _getAlarmLevel1b:
  4427                           	callstack 24
  4428   005F6E                     
  4429                           ;var.c: 75:     char tmp = dsReadData(0x22);
  4430   005F6E  0E00               	movlw	0
  4431   005F70  6E09               	movwf	(dsReadData@address+1)^0,c
  4432   005F72  0E22               	movlw	34
  4433   005F74  6E08               	movwf	dsReadData@address^0,c
  4434   005F76  EC54  F02E         	call	_dsReadData	;wreg free
  4435   005F7A  5008               	movf	?_dsReadData^0,w,c
  4436   005F7C  6E1A               	movwf	getAlarmLevel1b@tmp^0,c
  4437   005F7E                     
  4438                           ;var.c: 76:     if (tmp > 99) {
  4439   005F7E  0E63               	movlw	99
  4440   005F80  641A               	cpfsgt	getAlarmLevel1b@tmp^0,c
  4441   005F82  EFC5  F02F         	goto	u3331
  4442   005F86  EFC7  F02F         	goto	u3330
  4443   005F8A                     u3331:
  4444   005F8A  EFCE  F02F         	goto	l3446
  4445   005F8E                     u3330:
  4446   005F8E                     
  4447                           ;var.c: 77:         dsWriteData(99, 0x22);
  4448   005F8E  0E00               	movlw	0
  4449   005F90  6E12               	movwf	(dsWriteData@address+1)^0,c
  4450   005F92  0E22               	movlw	34
  4451   005F94  6E11               	movwf	dsWriteData@address^0,c
  4452   005F96  0E63               	movlw	99
  4453   005F98  EC05  F033         	call	_dsWriteData
  4454   005F9C                     l3446:
  4455                           
  4456                           ;var.c: 79:     if (tmp <= 0) {
  4457   005F9C  501A               	movf	getAlarmLevel1b@tmp^0,w,c
  4458   005F9E  A4D8               	btfss	status,2,c
  4459   005FA0  EFD4  F02F         	goto	u3341
  4460   005FA4  EFD6  F02F         	goto	u3340
  4461   005FA8                     u3341:
  4462   005FA8  EFDD  F02F         	goto	l498
  4463   005FAC                     u3340:
  4464   005FAC                     
  4465                           ;var.c: 80:         dsWriteData(0, 0x22);
  4466   005FAC  0E00               	movlw	0
  4467   005FAE  6E12               	movwf	(dsWriteData@address+1)^0,c
  4468   005FB0  0E22               	movlw	34
  4469   005FB2  6E11               	movwf	dsWriteData@address^0,c
  4470   005FB4  0E00               	movlw	0
  4471   005FB6  EC05  F033         	call	_dsWriteData
  4472   005FBA                     l498:
  4473                           
  4474                           ;var.c: 82:     return (int) (dsReadData(0x22));
  4475   005FBA  0E00               	movlw	0
  4476   005FBC  6E09               	movwf	(dsReadData@address+1)^0,c
  4477   005FBE  0E22               	movlw	34
  4478   005FC0  6E08               	movwf	dsReadData@address^0,c
  4479   005FC2  EC54  F02E         	call	_dsReadData	;wreg free
  4480   005FC6  C008  F018         	movff	?_dsReadData,?_getAlarmLevel1b
  4481   005FCA  C009  F019         	movff	?_dsReadData+1,?_getAlarmLevel1b+1
  4482   005FCE  0012               	return		;funcret
  4483   005FD0                     __end_of_getAlarmLevel1b:
  4484                           	callstack 0
  4485                           
  4486 ;; *************** function _getAlarmLevel1a *****************
  4487 ;; Defined at:
  4488 ;;		line 39 in file "var.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  tmp             1   25[COMRAM] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  2   23[COMRAM] int 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4502 ;;      Params:         2       0       0       0       0       0       0       0       0
  4503 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4505 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4506 ;;Total ram usage:        3 bytes
  4507 ;; Hardware stack levels used: 1
  4508 ;; Hardware stack levels required when called: 4
  4509 ;; This function calls:
  4510 ;;		_dsReadData
  4511 ;;		_dsWriteData
  4512 ;; This function is called by:
  4513 ;;		_outputPrint
  4514 ;;		_smLoop
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text25
  4519   005F0C                     __ptext25:
  4520                           	callstack 0
  4521   005F0C                     _getAlarmLevel1a:
  4522                           	callstack 24
  4523   005F0C                     
  4524                           ;var.c: 40:     char tmp = dsReadData(0x24);
  4525   005F0C  0E00               	movlw	0
  4526   005F0E  6E09               	movwf	(dsReadData@address+1)^0,c
  4527   005F10  0E24               	movlw	36
  4528   005F12  6E08               	movwf	dsReadData@address^0,c
  4529   005F14  EC54  F02E         	call	_dsReadData	;wreg free
  4530   005F18  5008               	movf	?_dsReadData^0,w,c
  4531   005F1A  6E1A               	movwf	getAlarmLevel1a@tmp^0,c
  4532   005F1C                     
  4533                           ;var.c: 41:     if (tmp > 99) {
  4534   005F1C  0E63               	movlw	99
  4535   005F1E  641A               	cpfsgt	getAlarmLevel1a@tmp^0,c
  4536   005F20  EF94  F02F         	goto	u3291
  4537   005F24  EF96  F02F         	goto	u3290
  4538   005F28                     u3291:
  4539   005F28  EF9D  F02F         	goto	l3422
  4540   005F2C                     u3290:
  4541   005F2C                     
  4542                           ;var.c: 42:         dsWriteData(99, 0x24);
  4543   005F2C  0E00               	movlw	0
  4544   005F2E  6E12               	movwf	(dsWriteData@address+1)^0,c
  4545   005F30  0E24               	movlw	36
  4546   005F32  6E11               	movwf	dsWriteData@address^0,c
  4547   005F34  0E63               	movlw	99
  4548   005F36  EC05  F033         	call	_dsWriteData
  4549   005F3A                     l3422:
  4550                           
  4551                           ;var.c: 44:     if (tmp <= 0) {
  4552   005F3A  501A               	movf	getAlarmLevel1a@tmp^0,w,c
  4553   005F3C  A4D8               	btfss	status,2,c
  4554   005F3E  EFA3  F02F         	goto	u3301
  4555   005F42  EFA5  F02F         	goto	u3300
  4556   005F46                     u3301:
  4557   005F46  EFAC  F02F         	goto	l480
  4558   005F4A                     u3300:
  4559   005F4A                     
  4560                           ;var.c: 45:         dsWriteData(0, 0x24);
  4561   005F4A  0E00               	movlw	0
  4562   005F4C  6E12               	movwf	(dsWriteData@address+1)^0,c
  4563   005F4E  0E24               	movlw	36
  4564   005F50  6E11               	movwf	dsWriteData@address^0,c
  4565   005F52  0E00               	movlw	0
  4566   005F54  EC05  F033         	call	_dsWriteData
  4567   005F58                     l480:
  4568                           
  4569                           ;var.c: 47:     return (int) (dsReadData(0x24));
  4570   005F58  0E00               	movlw	0
  4571   005F5A  6E09               	movwf	(dsReadData@address+1)^0,c
  4572   005F5C  0E24               	movlw	36
  4573   005F5E  6E08               	movwf	dsReadData@address^0,c
  4574   005F60  EC54  F02E         	call	_dsReadData	;wreg free
  4575   005F64  C008  F018         	movff	?_dsReadData,?_getAlarmLevel1a
  4576   005F68  C009  F019         	movff	?_dsReadData+1,?_getAlarmLevel1a+1
  4577   005F6C  0012               	return		;funcret
  4578   005F6E                     __end_of_getAlarmLevel1a:
  4579                           	callstack 0
  4580                           
  4581 ;; *************** function _dsReadData *****************
  4582 ;; Defined at:
  4583 ;;		line 41 in file "rtc.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  address         2    7[COMRAM] int 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  result          2   10[COMRAM] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  2    7[COMRAM] int 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4597 ;;      Params:         2       0       0       0       0       0       0       0       0
  4598 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4599 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4600 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4601 ;;Total ram usage:        5 bytes
  4602 ;; Hardware stack levels used: 1
  4603 ;; Hardware stack levels required when called: 3
  4604 ;; This function calls:
  4605 ;;		_i2cReadByte
  4606 ;;		_i2cWriteByte
  4607 ;; This function is called by:
  4608 ;;		_getAlarmLevel1a
  4609 ;;		_getAlarmLevel2a
  4610 ;;		_getAlarmLevel1b
  4611 ;;		_getAlarmLevel2b
  4612 ;;		_getLanguage
  4613 ;;		_dsStartClock
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text26
  4618   005CA8                     __ptext26:
  4619                           	callstack 0
  4620   005CA8                     _dsReadData:
  4621                           	callstack 24
  4622   005CA8                     
  4623                           ;rtc.c: 42:  int result;;rtc.c: 43:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  4624   005CA8  0E00               	movlw	0
  4625   005CAA  6E02               	movwf	i2cWriteByte@send_stop^0,c
  4626   005CAC  0EDE               	movlw	222
  4627   005CAE  6E03               	movwf	i2cWriteByte@byte^0,c
  4628   005CB0  0E01               	movlw	1
  4629   005CB2  EC56  F02F         	call	_i2cWriteByte
  4630                           
  4631                           ;rtc.c: 44:  i2cWriteByte(0,0,address);
  4632   005CB6  0E00               	movlw	0
  4633   005CB8  6E02               	movwf	i2cWriteByte@send_stop^0,c
  4634   005CBA  C008  F003         	movff	dsReadData@address,i2cWriteByte@byte
  4635   005CBE  0E00               	movlw	0
  4636   005CC0  EC56  F02F         	call	_i2cWriteByte
  4637                           
  4638                           ;rtc.c: 45:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  4639   005CC4  0E00               	movlw	0
  4640   005CC6  6E02               	movwf	i2cWriteByte@send_stop^0,c
  4641   005CC8  0EDF               	movlw	223
  4642   005CCA  6E03               	movwf	i2cWriteByte@byte^0,c
  4643   005CCC  0E01               	movlw	1
  4644   005CCE  EC56  F02F         	call	_i2cWriteByte
  4645                           
  4646                           ;rtc.c: 46:  result = i2cReadByte(1,1 );
  4647   005CD2  0E01               	movlw	1
  4648   005CD4  6E02               	movwf	i2cReadByte@send_stop^0,c
  4649   005CD6  0E01               	movlw	1
  4650   005CD8  EC77  F02E         	call	_i2cReadByte
  4651   005CDC  6E0A               	movwf	??_dsReadData^0,c
  4652   005CDE  500A               	movf	??_dsReadData^0,w,c
  4653   005CE0  6E0B               	movwf	dsReadData@result^0,c
  4654   005CE2  6A0C               	clrf	(dsReadData@result+1)^0,c
  4655   005CE4                     
  4656                           ;rtc.c: 47:  return result;
  4657   005CE4  C00B  F008         	movff	dsReadData@result,?_dsReadData
  4658   005CE8  C00C  F009         	movff	dsReadData@result+1,?_dsReadData+1
  4659   005CEC  0012               	return		;funcret
  4660   005CEE                     __end_of_dsReadData:
  4661                           	callstack 0
  4662                           
  4663 ;; *************** function _i2cReadByte *****************
  4664 ;; Defined at:
  4665 ;;		line 128 in file "i2c.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  nack            1    wreg     unsigned char 
  4668 ;;  send_stop       1    1[COMRAM] unsigned char 
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;  nack            1    3[COMRAM] unsigned char 
  4671 ;;  bit             2    4[COMRAM] unsigned int 
  4672 ;;  byte            1    6[COMRAM] unsigned char 
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      unsigned char 
  4675 ;; Registers used:
  4676 ;;		wreg, status,2, status,0, cstack
  4677 ;; Tracked objects:
  4678 ;;		On entry : 0/0
  4679 ;;		On exit  : 0/0
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4682 ;;      Params:         1       0       0       0       0       0       0       0       0
  4683 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4684 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4685 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4686 ;;Total ram usage:        6 bytes
  4687 ;; Hardware stack levels used: 1
  4688 ;; Hardware stack levels required when called: 2
  4689 ;; This function calls:
  4690 ;;		_i2c_read_bit
  4691 ;;		_i2c_stop
  4692 ;;		_i2c_write_bit
  4693 ;; This function is called by:
  4694 ;;		_dsReadData
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text27
  4699   005CEE                     __ptext27:
  4700                           	callstack 0
  4701   005CEE                     _i2cReadByte:
  4702                           	callstack 24
  4703                           
  4704                           ;incstack = 0
  4705                           ;i2cReadByte@nack stored from wreg
  4706   005CEE  6E04               	movwf	i2cReadByte@nack^0,c
  4707   005CF0                     
  4708                           ;i2c.c: 129:  unsigned char byte = 0;
  4709   005CF0  0E00               	movlw	0
  4710   005CF2  6E07               	movwf	i2cReadByte@byte^0,c
  4711                           
  4712                           ;i2c.c: 130:  unsigned bit;;i2c.c: 131:  for (bit = 0; bit < 8; bit++) {
  4713   005CF4  0E00               	movlw	0
  4714   005CF6  6E06               	movwf	(i2cReadByte@bit+1)^0,c
  4715   005CF8  0E00               	movlw	0
  4716   005CFA  6E05               	movwf	i2cReadByte@bit^0,c
  4717   005CFC                     l2874:
  4718                           
  4719                           ;i2c.c: 132:   byte = (byte << 1) | i2c_read_bit();
  4720   005CFC  EC38  F02D         	call	_i2c_read_bit	;wreg free
  4721   005D00  6E03               	movwf	??_i2cReadByte^0,c
  4722   005D02  5007               	movf	i2cReadByte@byte^0,w,c
  4723   005D04  2407               	addwf	i2cReadByte@byte^0,w,c
  4724   005D06  1003               	iorwf	??_i2cReadByte^0,w,c
  4725   005D08  6E07               	movwf	i2cReadByte@byte^0,c
  4726   005D0A                     
  4727                           ;i2c.c: 133:  }
  4728   005D0A  4A05               	infsnz	i2cReadByte@bit^0,f,c
  4729   005D0C  2A06               	incf	(i2cReadByte@bit+1)^0,f,c
  4730   005D0E  5006               	movf	(i2cReadByte@bit+1)^0,w,c
  4731   005D10  E109               	bnz	u2400
  4732   005D12  0E08               	movlw	8
  4733   005D14  5C05               	subwf	i2cReadByte@bit^0,w,c
  4734   005D16  A0D8               	btfss	status,0,c
  4735   005D18  EF90  F02E         	goto	u2401
  4736   005D1C  EF92  F02E         	goto	u2400
  4737   005D20                     u2401:
  4738   005D20  EF7E  F02E         	goto	l2874
  4739   005D24                     u2400:
  4740   005D24                     
  4741                           ;i2c.c: 134:  i2c_write_bit(nack);
  4742   005D24  5004               	movf	i2cReadByte@nack^0,w,c
  4743   005D26  ECCC  F02E         	call	_i2c_write_bit
  4744   005D2A                     
  4745                           ;i2c.c: 135:  if (send_stop) {
  4746   005D2A  5002               	movf	i2cReadByte@send_stop^0,w,c
  4747   005D2C  B4D8               	btfsc	status,2,c
  4748   005D2E  EF9B  F02E         	goto	u2411
  4749   005D32  EF9D  F02E         	goto	u2410
  4750   005D36                     u2411:
  4751   005D36  EF9F  F02E         	goto	l2886
  4752   005D3A                     u2410:
  4753   005D3A                     
  4754                           ;i2c.c: 136:   i2c_stop();
  4755   005D3A  EC09  F02D         	call	_i2c_stop	;wreg free
  4756   005D3E                     l2886:
  4757                           
  4758                           ;i2c.c: 138:  return byte;
  4759   005D3E  5007               	movf	i2cReadByte@byte^0,w,c
  4760   005D40  0012               	return		;funcret
  4761   005D42                     __end_of_i2cReadByte:
  4762                           	callstack 0
  4763                           
  4764 ;; *************** function _adcRead *****************
  4765 ;; Defined at:
  4766 ;;		line 34 in file "adc.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  a               2    0[COMRAM] unsigned int 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  ADvalor         2    2[COMRAM] unsigned int 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  2    0[COMRAM] int 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4780 ;;      Params:         2       0       0       0       0       0       0       0       0
  4781 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4783 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4784 ;;Total ram usage:        4 bytes
  4785 ;; Hardware stack levels used: 1
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_outputPrint
  4790 ;;		_smLoop
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text28
  4795   0061EE                     __ptext28:
  4796                           	callstack 0
  4797   0061EE                     _adcRead:
  4798                           	callstack 28
  4799   0061EE                     
  4800                           ;adc.c: 34: int adcRead(unsigned int a);adc.c: 35: {;adc.c: 36:     unsigned int ADvalor
      +                          ;;adc.c: 40:     if(a==1)
  4801   0061EE  0401               	decf	adcRead@a^0,w,c
  4802   0061F0  1002               	iorwf	(adcRead@a+1)^0,w,c
  4803   0061F2  A4D8               	btfss	status,2,c
  4804   0061F4  EFFE  F030         	goto	u3251
  4805   0061F8  EF00  F031         	goto	u3250
  4806   0061FC                     u3251:
  4807   0061FC  EF02  F031         	goto	l3398
  4808   006200                     u3250:
  4809   006200                     
  4810                           ;adc.c: 41:     {;adc.c: 42:         (*(volatile __near unsigned char*)0xFC2)=0b00000001
      +                          ;
  4811   006200  0E01               	movlw	1
  4812   006202  6EC2               	movwf	194,c	;volatile
  4813   006204                     l3398:
  4814                           
  4815                           ;adc.c: 44:     if(a==2)
  4816   006204  0E02               	movlw	2
  4817   006206  1801               	xorwf	adcRead@a^0,w,c
  4818   006208  1002               	iorwf	(adcRead@a+1)^0,w,c
  4819   00620A  A4D8               	btfss	status,2,c
  4820   00620C  EF0A  F031         	goto	u3261
  4821   006210  EF0C  F031         	goto	u3260
  4822   006214                     u3261:
  4823   006214  EF0E  F031         	goto	l3402
  4824   006218                     u3260:
  4825   006218                     
  4826                           ;adc.c: 45:     {;adc.c: 46:         (*(volatile __near unsigned char*)0xFC2)=0b00000101
      +                          ;
  4827   006218  0E05               	movlw	5
  4828   00621A  6EC2               	movwf	194,c	;volatile
  4829   00621C                     l3402:
  4830                           
  4831                           ;adc.c: 48:     if(a==3)
  4832   00621C  0E03               	movlw	3
  4833   00621E  1801               	xorwf	adcRead@a^0,w,c
  4834   006220  1002               	iorwf	(adcRead@a+1)^0,w,c
  4835   006222  A4D8               	btfss	status,2,c
  4836   006224  EF16  F031         	goto	u3271
  4837   006228  EF18  F031         	goto	u3270
  4838   00622C                     u3271:
  4839   00622C  EF1A  F031         	goto	l3406
  4840   006230                     u3270:
  4841   006230                     
  4842                           ;adc.c: 49:     {;adc.c: 50:         (*(volatile __near unsigned char*)0xFC2)=0b00001001
      +                          ;
  4843   006230  0E09               	movlw	9
  4844   006232  6EC2               	movwf	194,c	;volatile
  4845   006234                     l3406:
  4846                           
  4847                           ;adc.c: 53:  (*(volatile __near unsigned char*)0xFC2) |= 0b00000110;
  4848   006234  0E06               	movlw	6
  4849   006236  12C2               	iorwf	194,f,c	;volatile
  4850   006238                     l277:
  4851   006238  B2C2               	btfsc	194,1,c	;volatile
  4852   00623A  EF21  F031         	goto	u3281
  4853   00623E  EF23  F031         	goto	u3280
  4854   006242                     u3281:
  4855   006242  EF1C  F031         	goto	l277
  4856   006246                     u3280:
  4857   006246                     
  4858                           ;adc.c: 57:  ADvalor = (*(volatile __near unsigned char*)0xFC4) ;
  4859   006246  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  4860   00624A  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  4861   00624C                     
  4862                           ;adc.c: 58:  ADvalor <<= 8;
  4863   00624C  5003               	movf	adcRead@ADvalor^0,w,c
  4864   00624E  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  4865   006250  6A03               	clrf	adcRead@ADvalor^0,c
  4866   006252                     
  4867                           ;adc.c: 59:  ADvalor += (*(volatile __near unsigned char*)0xFC3);
  4868   006252  50C3               	movf	195,w,c	;volatile
  4869   006254  2603               	addwf	adcRead@ADvalor^0,f,c
  4870   006256  0E00               	movlw	0
  4871   006258  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  4872   00625A                     
  4873                           ;adc.c: 60:  return ADvalor;
  4874   00625A  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  4875   00625E  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  4876   006262  0012               	return		;funcret
  4877   006264                     __end_of_adcRead:
  4878                           	callstack 0
  4879                           
  4880 ;; *************** function _ledState *****************
  4881 ;; Defined at:
  4882 ;;		line 17 in file "led.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  num             1    wreg     unsigned char 
  4885 ;;  state           1    0[COMRAM] unsigned char 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  num             1    3[COMRAM] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, status,2, status,0
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4897 ;;      Params:         1       0       0       0       0       0       0       0       0
  4898 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4899 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4900 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4901 ;;Total ram usage:        4 bytes
  4902 ;; Hardware stack levels used: 1
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_smLoop
  4907 ;;		_ledAll
  4908 ;;		_ledTst
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text29
  4913   00653E                     __ptext29:
  4914                           	callstack 0
  4915   00653E                     _ledState:
  4916                           	callstack 29
  4917                           
  4918                           ;incstack = 0
  4919                           ;ledState@num stored from wreg
  4920   00653E  6E04               	movwf	ledState@num^0,c
  4921   006540                     
  4922                           ;led.c: 17: void ledState(char num, char state);led.c: 18: {;led.c: 20:     if(state==1)
      +                          {
  4923   006540  0401               	decf	ledState@state^0,w,c
  4924   006542  A4D8               	btfss	status,2,c
  4925   006544  EFA6  F032         	goto	u3451
  4926   006548  EFA8  F032         	goto	u3450
  4927   00654C                     u3451:
  4928   00654C  EFD5  F032         	goto	l3538
  4929   006550                     u3450:
  4930   006550                     
  4931                           ;led.c: 21:         if(num==4)
  4932   006550  0E04               	movlw	4
  4933   006552  1804               	xorwf	ledState@num^0,w,c
  4934   006554  A4D8               	btfss	status,2,c
  4935   006556  EFAF  F032         	goto	u3461
  4936   00655A  EFB1  F032         	goto	u3460
  4937   00655E                     u3461:
  4938   00655E  EFB6  F032         	goto	l3532
  4939   006562                     u3460:
  4940   006562                     
  4941                           ;led.c: 22:             (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __nea
      +                          r unsigned char*)0xF83)) & (~(1<<(6))));
  4942   006562  5083               	movf	131,w,c	;volatile
  4943   006564  0BBF               	andlw	191
  4944   006566  6E83               	movwf	131,c	;volatile
  4945   006568  EFD5  F032         	goto	l3538
  4946   00656C                     l3532:
  4947                           
  4948                           ;led.c: 24:             if(num==0)
  4949   00656C  5004               	movf	ledState@num^0,w,c
  4950   00656E  A4D8               	btfss	status,2,c
  4951   006570  EFBC  F032         	goto	u3471
  4952   006574  EFBE  F032         	goto	u3470
  4953   006578                     u3471:
  4954   006578  EFC3  F032         	goto	l3536
  4955   00657C                     u3470:
  4956   00657C                     
  4957                           ;led.c: 25:                 (((*(volatile __near unsigned char*)0xF81)) = ((*(volatile _
      +                          _near unsigned char*)0xF81)) & (~(1<<(4))));
  4958   00657C  5081               	movf	129,w,c	;volatile
  4959   00657E  0BEF               	andlw	239
  4960   006580  6E81               	movwf	129,c	;volatile
  4961   006582  EFD5  F032         	goto	l3538
  4962   006586                     l3536:
  4963                           
  4964                           ;led.c: 27:                 (((*(volatile __near unsigned char*)0xF81)) = ((*(volatile _
      +                          _near unsigned char*)0xF81)) & (~(1<<((num+4)))));
  4965   006586  C004  F002         	movff	ledState@num,??_ledState
  4966   00658A  0E04               	movlw	4
  4967   00658C  2602               	addwf	??_ledState^0,f,c
  4968   00658E  0E01               	movlw	1
  4969   006590  6E03               	movwf	(??_ledState+1)^0,c
  4970   006592  2A02               	incf	??_ledState^0,f,c
  4971   006594  EFCE  F032         	goto	u3484
  4972   006598                     u3485:
  4973   006598  90D8               	bcf	status,0,c
  4974   00659A  3603               	rlcf	(??_ledState+1)^0,f,c
  4975   00659C                     u3484:
  4976   00659C  2E02               	decfsz	??_ledState^0,f,c
  4977   00659E  EFCC  F032         	goto	u3485
  4978   0065A2  5003               	movf	(??_ledState+1)^0,w,c
  4979   0065A4  0AFF               	xorlw	255
  4980   0065A6  1481               	andwf	129,w,c	;volatile
  4981   0065A8  6E81               	movwf	129,c	;volatile
  4982   0065AA                     l3538:
  4983                           
  4984                           ;led.c: 31:     if(state==0){
  4985   0065AA  5001               	movf	ledState@state^0,w,c
  4986   0065AC  A4D8               	btfss	status,2,c
  4987   0065AE  EFDB  F032         	goto	u3491
  4988   0065B2  EFDD  F032         	goto	u3490
  4989   0065B6                     u3491:
  4990   0065B6  EF04  F033         	goto	l242
  4991   0065BA                     u3490:
  4992   0065BA                     
  4993                           ;led.c: 32:         if(num==4)
  4994   0065BA  0E04               	movlw	4
  4995   0065BC  1804               	xorwf	ledState@num^0,w,c
  4996   0065BE  A4D8               	btfss	status,2,c
  4997   0065C0  EFE4  F032         	goto	u3501
  4998   0065C4  EFE6  F032         	goto	u3500
  4999   0065C8                     u3501:
  5000   0065C8  EFE9  F032         	goto	l3544
  5001   0065CC                     u3500:
  5002   0065CC                     
  5003                           ;led.c: 33:             (((*(volatile __near unsigned char*)0xF83)) |= (1<<(6)));
  5004   0065CC  8C83               	bsf	131,6,c	;volatile
  5005   0065CE  EF04  F033         	goto	l242
  5006   0065D2                     l3544:
  5007                           
  5008                           ;led.c: 35:             if(num==0)
  5009   0065D2  5004               	movf	ledState@num^0,w,c
  5010   0065D4  A4D8               	btfss	status,2,c
  5011   0065D6  EFEF  F032         	goto	u3511
  5012   0065DA  EFF1  F032         	goto	u3510
  5013   0065DE                     u3511:
  5014   0065DE  EFF4  F032         	goto	l3548
  5015   0065E2                     u3510:
  5016   0065E2                     
  5017                           ;led.c: 36:                 (((*(volatile __near unsigned char*)0xF81)) |= (1<<(4)));
  5018   0065E2  8881               	bsf	129,4,c	;volatile
  5019   0065E4  EF04  F033         	goto	l242
  5020   0065E8                     l3548:
  5021                           
  5022                           ;led.c: 38:                 (((*(volatile __near unsigned char*)0xF81)) |= (1<<((num+4))
      +                          ));
  5023   0065E8  C004  F002         	movff	ledState@num,??_ledState
  5024   0065EC  0E04               	movlw	4
  5025   0065EE  2602               	addwf	??_ledState^0,f,c
  5026   0065F0  0E01               	movlw	1
  5027   0065F2  6E03               	movwf	(??_ledState+1)^0,c
  5028   0065F4  2A02               	incf	??_ledState^0,f,c
  5029   0065F6  EFFF  F032         	goto	u3524
  5030   0065FA                     u3525:
  5031   0065FA  90D8               	bcf	status,0,c
  5032   0065FC  3603               	rlcf	(??_ledState+1)^0,f,c
  5033   0065FE                     u3524:
  5034   0065FE  2E02               	decfsz	??_ledState^0,f,c
  5035   006600  EFFD  F032         	goto	u3525
  5036   006604  5003               	movf	(??_ledState+1)^0,w,c
  5037   006606  1281               	iorwf	129,f,c	;volatile
  5038   006608                     l242:
  5039   006608  0012               	return		;funcret
  5040   00660A                     __end_of_ledState:
  5041                           	callstack 0
  5042                           
  5043 ;; *************** function _getState *****************
  5044 ;; Defined at:
  5045 ;;		line 20 in file "var.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      unsigned char 
  5052 ;; Registers used:
  5053 ;;		wreg, status,2
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5059 ;;      Params:         0       0       0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used: 1
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_smLoop
  5069 ;; This function uses a non-reentrant model
  5070 ;;
  5071                           
  5072                           	psect	text30
  5073   005842                     __ptext30:
  5074                           	callstack 0
  5075   005842                     _getState:
  5076                           	callstack 29
  5077   005842                     
  5078                           ;var.c: 21:     return state;
  5079   005842  504B               	movf	_state^0,w,c
  5080   005844  0012               	return		;funcret
  5081   005846                     __end_of_getState:
  5082                           	callstack 0
  5083                           
  5084 ;; *************** function _eventRead *****************
  5085 ;; Defined at:
  5086 ;;		line 21 in file "event.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  temp            2   34[COMRAM] int 
  5091 ;;  key             2    0        int 
  5092 ;;  ev              2   32[COMRAM] int 
  5093 ;;  ser             1   36[COMRAM] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  2   28[COMRAM] unsigned int 
  5096 ;; Registers used:
  5097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5103 ;;      Params:         2       0       0       0       0       0       0       0       0
  5104 ;;      Locals:         5       0       0       0       0       0       0       0       0
  5105 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5106 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5107 ;;Total ram usage:        9 bytes
  5108 ;; Hardware stack levels used: 1
  5109 ;; Hardware stack levels required when called: 5
  5110 ;; This function calls:
  5111 ;;		_butRead
  5112 ;;		_serialRead
  5113 ;;		_setAlarmLevel1a
  5114 ;;		_setAlarmLevel1b
  5115 ;;		_setAlarmLevel2a
  5116 ;;		_setAlarmLevel2b
  5117 ;;		_setTime
  5118 ;; This function is called by:
  5119 ;;		_smLoop
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text31
  5124   006DF2                     __ptext31:
  5125                           	callstack 0
  5126   006DF2                     _eventRead:
  5127                           	callstack 24
  5128   006DF2                     
  5129                           ;event.c: 23:     int ev = EV_NOEVENT;
  5130   006DF2  0E00               	movlw	0
  5131   006DF4  6E22               	movwf	(eventRead@ev+1)^0,c
  5132   006DF6  0E05               	movlw	5
  5133   006DF8  6E21               	movwf	eventRead@ev^0,c
  5134   006DFA                     
  5135                           ;event.c: 24:     unsigned char ser;;event.c: 28:     if (key != key_ant) {
  5136   006DFA  0446               	decf	_key_ant^0,w,c
  5137   006DFC  1047               	iorwf	(_key_ant+1)^0,w,c
  5138   006DFE  B4D8               	btfsc	status,2,c
  5139   006E00  EF04  F037         	goto	u3671
  5140   006E04  EF06  F037         	goto	u3670
  5141   006E08                     u3671:
  5142   006E08  EF3F  F037         	goto	l550
  5143   006E0C                     u3670:
  5144   006E0C                     
  5145                           ;event.c: 29:         if (butRead(0)) {
  5146   006E0C  0E00               	movlw	0
  5147   006E0E  EC32  F031         	call	_butRead
  5148   006E12  0900               	iorlw	0
  5149   006E14  B4D8               	btfsc	status,2,c
  5150   006E16  EF0F  F037         	goto	u3681
  5151   006E1A  EF11  F037         	goto	u3680
  5152   006E1E                     u3681:
  5153   006E1E  EF19  F037         	goto	l3798
  5154   006E22                     u3680:
  5155   006E22                     
  5156                           ;event.c: 30:             ev = EV_RIGHT;
  5157   006E22  0E00               	movlw	0
  5158   006E24  6E22               	movwf	(eventRead@ev+1)^0,c
  5159   006E26  0E03               	movlw	3
  5160   006E28  6E21               	movwf	eventRead@ev^0,c
  5161   006E2A                     
  5162                           ;event.c: 31:             key_ant = key;
  5163   006E2A  0E00               	movlw	0
  5164   006E2C  6E47               	movwf	(_key_ant+1)^0,c
  5165   006E2E  0E01               	movlw	1
  5166   006E30  6E46               	movwf	_key_ant^0,c
  5167   006E32                     l3798:
  5168                           
  5169                           ;event.c: 34:         if (butRead(1)) {
  5170   006E32  0E01               	movlw	1
  5171   006E34  EC32  F031         	call	_butRead
  5172   006E38  0900               	iorlw	0
  5173   006E3A  B4D8               	btfsc	status,2,c
  5174   006E3C  EF22  F037         	goto	u3691
  5175   006E40  EF24  F037         	goto	u3690
  5176   006E44                     u3691:
  5177   006E44  EF2C  F037         	goto	l3804
  5178   006E48                     u3690:
  5179   006E48                     
  5180                           ;event.c: 35:             ev = EV_LEFT;
  5181   006E48  0E00               	movlw	0
  5182   006E4A  6E22               	movwf	(eventRead@ev+1)^0,c
  5183   006E4C  0E02               	movlw	2
  5184   006E4E  6E21               	movwf	eventRead@ev^0,c
  5185   006E50                     
  5186                           ;event.c: 36:             key_ant = key;
  5187   006E50  0E00               	movlw	0
  5188   006E52  6E47               	movwf	(_key_ant+1)^0,c
  5189   006E54  0E01               	movlw	1
  5190   006E56  6E46               	movwf	_key_ant^0,c
  5191   006E58                     l3804:
  5192                           
  5193                           ;event.c: 39:         if (butRead(2)) {
  5194   006E58  0E02               	movlw	2
  5195   006E5A  EC32  F031         	call	_butRead
  5196   006E5E  0900               	iorlw	0
  5197   006E60  B4D8               	btfsc	status,2,c
  5198   006E62  EF35  F037         	goto	u3701
  5199   006E66  EF37  F037         	goto	u3700
  5200   006E6A                     u3701:
  5201   006E6A  EF3F  F037         	goto	l550
  5202   006E6E                     u3700:
  5203   006E6E                     
  5204                           ;event.c: 40:             ev = EV_ENTER;
  5205   006E6E  0E00               	movlw	0
  5206   006E70  6E22               	movwf	(eventRead@ev+1)^0,c
  5207   006E72  0E04               	movlw	4
  5208   006E74  6E21               	movwf	eventRead@ev^0,c
  5209   006E76                     
  5210                           ;event.c: 41:             key_ant = key;
  5211   006E76  0E00               	movlw	0
  5212   006E78  6E47               	movwf	(_key_ant+1)^0,c
  5213   006E7A  0E01               	movlw	1
  5214   006E7C  6E46               	movwf	_key_ant^0,c
  5215   006E7E                     l550:
  5216                           
  5217                           ;event.c: 44:     key_ant = 0;
  5218   006E7E  0E00               	movlw	0
  5219   006E80  6E47               	movwf	(_key_ant+1)^0,c
  5220   006E82  0E00               	movlw	0
  5221   006E84  6E46               	movwf	_key_ant^0,c
  5222   006E86                     
  5223                           ;event.c: 50:     ser = serialRead();
  5224   006E86  EC20  F02D         	call	_serialRead	;wreg free
  5225   006E8A  6E25               	movwf	eventRead@ser^0,c
  5226   006E8C                     
  5227                           ;event.c: 52:     if (ser == 'P') {
  5228   006E8C  0E50               	movlw	80
  5229   006E8E  1825               	xorwf	eventRead@ser^0,w,c
  5230   006E90  A4D8               	btfss	status,2,c
  5231   006E92  EF4D  F037         	goto	u3711
  5232   006E96  EF4F  F037         	goto	u3710
  5233   006E9A                     u3711:
  5234   006E9A  EF51  F037         	goto	l554
  5235   006E9E                     u3710:
  5236   006E9E                     
  5237                           ;event.c: 53:         pos = 0;
  5238   006E9E  0E00               	movlw	0
  5239   006EA0  6E48               	movwf	_pos^0,c
  5240   006EA2                     l554:
  5241                           
  5242                           ;event.c: 56:     if ((ser != 0)) {
  5243   006EA2  5025               	movf	eventRead@ser^0,w,c
  5244   006EA4  B4D8               	btfsc	status,2,c
  5245   006EA6  EF57  F037         	goto	u3721
  5246   006EAA  EF59  F037         	goto	u3720
  5247   006EAE                     u3721:
  5248   006EAE  EF6C  F037         	goto	l3824
  5249   006EB2                     u3720:
  5250   006EB2                     
  5251                           ;event.c: 58:         buffer[pos] = ser;
  5252   006EB2  0E37               	movlw	low _buffer
  5253   006EB4  2448               	addwf	_pos^0,w,c
  5254   006EB6  6ED9               	movwf	fsr2l,c
  5255   006EB8  6ADA               	clrf	fsr2h,c
  5256   006EBA  0E00               	movlw	high _buffer
  5257   006EBC  22DA               	addwfc	fsr2h,f,c
  5258   006EBE  C025  FFDF         	movff	eventRead@ser,indf2
  5259   006EC2                     
  5260                           ;event.c: 59:         pos++;
  5261   006EC2  2A48               	incf	_pos^0,f,c
  5262   006EC4                     
  5263                           ;event.c: 60:         if (pos >= 15) {
  5264   006EC4  0E0E               	movlw	14
  5265   006EC6  6448               	cpfsgt	_pos^0,c
  5266   006EC8  EF68  F037         	goto	u3731
  5267   006ECC  EF6A  F037         	goto	u3730
  5268   006ED0                     u3731:
  5269   006ED0  EF6C  F037         	goto	l3824
  5270   006ED4                     u3730:
  5271   006ED4                     
  5272                           ;event.c: 61:             pos = 0;
  5273   006ED4  0E00               	movlw	0
  5274   006ED6  6E48               	movwf	_pos^0,c
  5275   006ED8                     l3824:
  5276                           
  5277                           ;event.c: 67:     if (pos == 9) {
  5278   006ED8  0E09               	movlw	9
  5279   006EDA  1848               	xorwf	_pos^0,w,c
  5280   006EDC  A4D8               	btfss	status,2,c
  5281   006EDE  EF73  F037         	goto	u3741
  5282   006EE2  EF75  F037         	goto	u3740
  5283   006EE6                     u3741:
  5284   006EE6  EFE0  F038         	goto	l3910
  5285   006EEA                     u3740:
  5286   006EEA                     
  5287                           ;event.c: 68:         pos = 0;
  5288   006EEA  0E00               	movlw	0
  5289   006EEC  6E48               	movwf	_pos^0,c
  5290   006EEE                     
  5291                           ;event.c: 69:         temp = (((buffer[7] - 48)* 10)+
  5292   006EEE  503E               	movf	(_buffer+7)^0,w,c
  5293   006EF0  0D0A               	mullw	10
  5294   006EF2  CFF3 F01F          	movff	prodl,??_eventRead
  5295   006EF6  CFF4 F020          	movff	prodh,??_eventRead+1
  5296   006EFA  503F               	movf	(_buffer+8)^0,w,c
  5297   006EFC  261F               	addwf	??_eventRead^0,f,c
  5298   006EFE  0E00               	movlw	0
  5299   006F00  2220               	addwfc	(??_eventRead+1)^0,f,c
  5300   006F02  0EF0               	movlw	240
  5301   006F04  241F               	addwf	??_eventRead^0,w,c
  5302   006F06  6E23               	movwf	eventRead@temp^0,c
  5303   006F08  0EFD               	movlw	253
  5304   006F0A  2020               	addwfc	(??_eventRead+1)^0,w,c
  5305   006F0C  6E24               	movwf	(eventRead@temp+1)^0,c
  5306   006F0E                     
  5307                           ;event.c: 71:         if ((buffer[0] == 'P') &&
  5308   006F0E  0E50               	movlw	80
  5309   006F10  1837               	xorwf	_buffer^0,w,c
  5310   006F12  A4D8               	btfss	status,2,c
  5311   006F14  EF8E  F037         	goto	u3751
  5312   006F18  EF90  F037         	goto	u3750
  5313   006F1C                     u3751:
  5314   006F1C  EFCC  F037         	goto	l3846
  5315   006F20                     u3750:
  5316   006F20  0E53               	movlw	83
  5317   006F22  1838               	xorwf	(_buffer+1)^0,w,c
  5318   006F24  A4D8               	btfss	status,2,c
  5319   006F26  EF97  F037         	goto	u3761
  5320   006F2A  EF99  F037         	goto	u3760
  5321   006F2E                     u3761:
  5322   006F2E  EFCC  F037         	goto	l3846
  5323   006F32                     u3760:
  5324   006F32  0E4D               	movlw	77
  5325   006F34  1839               	xorwf	(_buffer+2)^0,w,c
  5326   006F36  A4D8               	btfss	status,2,c
  5327   006F38  EFA0  F037         	goto	u3771
  5328   006F3C  EFA2  F037         	goto	u3770
  5329   006F40                     u3771:
  5330   006F40  EFCC  F037         	goto	l3846
  5331   006F44                     u3770:
  5332   006F44  0E41               	movlw	65
  5333   006F46  183A               	xorwf	(_buffer+3)^0,w,c
  5334   006F48  A4D8               	btfss	status,2,c
  5335   006F4A  EFA9  F037         	goto	u3781
  5336   006F4E  EFAB  F037         	goto	u3780
  5337   006F52                     u3781:
  5338   006F52  EFCC  F037         	goto	l3846
  5339   006F56                     u3780:
  5340   006F56  0E58               	movlw	88
  5341   006F58  183B               	xorwf	(_buffer+4)^0,w,c
  5342   006F5A  A4D8               	btfss	status,2,c
  5343   006F5C  EFB2  F037         	goto	u3791
  5344   006F60  EFB4  F037         	goto	u3790
  5345   006F64                     u3791:
  5346   006F64  EFCC  F037         	goto	l3846
  5347   006F68                     u3790:
  5348   006F68  0E31               	movlw	49
  5349   006F6A  183C               	xorwf	(_buffer+5)^0,w,c
  5350   006F6C  A4D8               	btfss	status,2,c
  5351   006F6E  EFBB  F037         	goto	u3801
  5352   006F72  EFBD  F037         	goto	u3800
  5353   006F76                     u3801:
  5354   006F76  EFCC  F037         	goto	l3846
  5355   006F7A                     u3800:
  5356   006F7A  0E58               	movlw	88
  5357   006F7C  183D               	xorwf	(_buffer+6)^0,w,c
  5358   006F7E  A4D8               	btfss	status,2,c
  5359   006F80  EFC4  F037         	goto	u3811
  5360   006F84  EFC6  F037         	goto	u3810
  5361   006F88                     u3811:
  5362   006F88  EFCC  F037         	goto	l3846
  5363   006F8C                     u3810:
  5364   006F8C                     
  5365                           ;event.c: 77:                 (buffer[6] == 'X')) {;event.c: 78:             setAlarmLev
      +                          el1a(temp);
  5366   006F8C  C023  F01B         	movff	eventRead@temp,setAlarmLevel1a@newAlarmLevel1a
  5367   006F90  C024  F01C         	movff	eventRead@temp+1,setAlarmLevel1a@newAlarmLevel1a+1
  5368   006F94  ECBD  F02D         	call	_setAlarmLevel1a	;wreg free
  5369   006F98                     l3846:
  5370                           
  5371                           ;event.c: 80:         if ((buffer[0] == 'P') &&
  5372   006F98  0E50               	movlw	80
  5373   006F9A  1837               	xorwf	_buffer^0,w,c
  5374   006F9C  A4D8               	btfss	status,2,c
  5375   006F9E  EFD3  F037         	goto	u3821
  5376   006FA2  EFD5  F037         	goto	u3820
  5377   006FA6                     u3821:
  5378   006FA6  EF11  F038         	goto	l3862
  5379   006FAA                     u3820:
  5380   006FAA  0E53               	movlw	83
  5381   006FAC  1838               	xorwf	(_buffer+1)^0,w,c
  5382   006FAE  A4D8               	btfss	status,2,c
  5383   006FB0  EFDC  F037         	goto	u3831
  5384   006FB4  EFDE  F037         	goto	u3830
  5385   006FB8                     u3831:
  5386   006FB8  EF11  F038         	goto	l3862
  5387   006FBC                     u3830:
  5388   006FBC  0E4D               	movlw	77
  5389   006FBE  1839               	xorwf	(_buffer+2)^0,w,c
  5390   006FC0  A4D8               	btfss	status,2,c
  5391   006FC2  EFE5  F037         	goto	u3841
  5392   006FC6  EFE7  F037         	goto	u3840
  5393   006FCA                     u3841:
  5394   006FCA  EF11  F038         	goto	l3862
  5395   006FCE                     u3840:
  5396   006FCE  0E41               	movlw	65
  5397   006FD0  183A               	xorwf	(_buffer+3)^0,w,c
  5398   006FD2  A4D8               	btfss	status,2,c
  5399   006FD4  EFEE  F037         	goto	u3851
  5400   006FD8  EFF0  F037         	goto	u3850
  5401   006FDC                     u3851:
  5402   006FDC  EF11  F038         	goto	l3862
  5403   006FE0                     u3850:
  5404   006FE0  0E58               	movlw	88
  5405   006FE2  183B               	xorwf	(_buffer+4)^0,w,c
  5406   006FE4  A4D8               	btfss	status,2,c
  5407   006FE6  EFF7  F037         	goto	u3861
  5408   006FEA  EFF9  F037         	goto	u3860
  5409   006FEE                     u3861:
  5410   006FEE  EF11  F038         	goto	l3862
  5411   006FF2                     u3860:
  5412   006FF2  0E32               	movlw	50
  5413   006FF4  183C               	xorwf	(_buffer+5)^0,w,c
  5414   006FF6  A4D8               	btfss	status,2,c
  5415   006FF8  EF00  F038         	goto	u3871
  5416   006FFC  EF02  F038         	goto	u3870
  5417   007000                     u3871:
  5418   007000  EF11  F038         	goto	l3862
  5419   007004                     u3870:
  5420   007004  0E58               	movlw	88
  5421   007006  183D               	xorwf	(_buffer+6)^0,w,c
  5422   007008  A4D8               	btfss	status,2,c
  5423   00700A  EF09  F038         	goto	u3881
  5424   00700E  EF0B  F038         	goto	u3880
  5425   007012                     u3881:
  5426   007012  EF11  F038         	goto	l3862
  5427   007016                     u3880:
  5428   007016                     
  5429                           ;event.c: 86:                 (buffer[6] == 'X')) {;event.c: 87:             setAlarmLev
      +                          el2a(temp);
  5430   007016  C023  F01B         	movff	eventRead@temp,setAlarmLevel2a@newAlarmLevel2a
  5431   00701A  C024  F01C         	movff	eventRead@temp+1,setAlarmLevel2a@newAlarmLevel2a+1
  5432   00701E  ECF7  F02D         	call	_setAlarmLevel2a	;wreg free
  5433   007022                     l3862:
  5434                           
  5435                           ;event.c: 89:         if ((buffer[0] == 'P') &&
  5436   007022  0E50               	movlw	80
  5437   007024  1837               	xorwf	_buffer^0,w,c
  5438   007026  A4D8               	btfss	status,2,c
  5439   007028  EF18  F038         	goto	u3891
  5440   00702C  EF1A  F038         	goto	u3890
  5441   007030                     u3891:
  5442   007030  EF56  F038         	goto	l3878
  5443   007034                     u3890:
  5444   007034  0E53               	movlw	83
  5445   007036  1838               	xorwf	(_buffer+1)^0,w,c
  5446   007038  A4D8               	btfss	status,2,c
  5447   00703A  EF21  F038         	goto	u3901
  5448   00703E  EF23  F038         	goto	u3900
  5449   007042                     u3901:
  5450   007042  EF56  F038         	goto	l3878
  5451   007046                     u3900:
  5452   007046  0E4D               	movlw	77
  5453   007048  1839               	xorwf	(_buffer+2)^0,w,c
  5454   00704A  A4D8               	btfss	status,2,c
  5455   00704C  EF2A  F038         	goto	u3911
  5456   007050  EF2C  F038         	goto	u3910
  5457   007054                     u3911:
  5458   007054  EF56  F038         	goto	l3878
  5459   007058                     u3910:
  5460   007058  0E49               	movlw	73
  5461   00705A  183A               	xorwf	(_buffer+3)^0,w,c
  5462   00705C  A4D8               	btfss	status,2,c
  5463   00705E  EF33  F038         	goto	u3921
  5464   007062  EF35  F038         	goto	u3920
  5465   007066                     u3921:
  5466   007066  EF56  F038         	goto	l3878
  5467   00706A                     u3920:
  5468   00706A  0E4E               	movlw	78
  5469   00706C  183B               	xorwf	(_buffer+4)^0,w,c
  5470   00706E  A4D8               	btfss	status,2,c
  5471   007070  EF3C  F038         	goto	u3931
  5472   007074  EF3E  F038         	goto	u3930
  5473   007078                     u3931:
  5474   007078  EF56  F038         	goto	l3878
  5475   00707C                     u3930:
  5476   00707C  0E31               	movlw	49
  5477   00707E  183C               	xorwf	(_buffer+5)^0,w,c
  5478   007080  A4D8               	btfss	status,2,c
  5479   007082  EF45  F038         	goto	u3941
  5480   007086  EF47  F038         	goto	u3940
  5481   00708A                     u3941:
  5482   00708A  EF56  F038         	goto	l3878
  5483   00708E                     u3940:
  5484   00708E  0E58               	movlw	88
  5485   007090  183D               	xorwf	(_buffer+6)^0,w,c
  5486   007092  A4D8               	btfss	status,2,c
  5487   007094  EF4E  F038         	goto	u3951
  5488   007098  EF50  F038         	goto	u3950
  5489   00709C                     u3951:
  5490   00709C  EF56  F038         	goto	l3878
  5491   0070A0                     u3950:
  5492   0070A0                     
  5493                           ;event.c: 95:                 (buffer[6] == 'X')) {;event.c: 96:             setAlarmLev
      +                          el1b(temp);
  5494   0070A0  C023  F01B         	movff	eventRead@temp,setAlarmLevel1b@newAlarmLevel1b
  5495   0070A4  C024  F01C         	movff	eventRead@temp+1,setAlarmLevel1b@newAlarmLevel1b+1
  5496   0070A8  ECDA  F02D         	call	_setAlarmLevel1b	;wreg free
  5497   0070AC                     l3878:
  5498                           
  5499                           ;event.c: 98:         if ((buffer[0] == 'P') &&
  5500   0070AC  0E50               	movlw	80
  5501   0070AE  1837               	xorwf	_buffer^0,w,c
  5502   0070B0  A4D8               	btfss	status,2,c
  5503   0070B2  EF5D  F038         	goto	u3961
  5504   0070B6  EF5F  F038         	goto	u3960
  5505   0070BA                     u3961:
  5506   0070BA  EF9B  F038         	goto	l3894
  5507   0070BE                     u3960:
  5508   0070BE  0E53               	movlw	83
  5509   0070C0  1838               	xorwf	(_buffer+1)^0,w,c
  5510   0070C2  A4D8               	btfss	status,2,c
  5511   0070C4  EF66  F038         	goto	u3971
  5512   0070C8  EF68  F038         	goto	u3970
  5513   0070CC                     u3971:
  5514   0070CC  EF9B  F038         	goto	l3894
  5515   0070D0                     u3970:
  5516   0070D0  0E4D               	movlw	77
  5517   0070D2  1839               	xorwf	(_buffer+2)^0,w,c
  5518   0070D4  A4D8               	btfss	status,2,c
  5519   0070D6  EF6F  F038         	goto	u3981
  5520   0070DA  EF71  F038         	goto	u3980
  5521   0070DE                     u3981:
  5522   0070DE  EF9B  F038         	goto	l3894
  5523   0070E2                     u3980:
  5524   0070E2  0E49               	movlw	73
  5525   0070E4  183A               	xorwf	(_buffer+3)^0,w,c
  5526   0070E6  A4D8               	btfss	status,2,c
  5527   0070E8  EF78  F038         	goto	u3991
  5528   0070EC  EF7A  F038         	goto	u3990
  5529   0070F0                     u3991:
  5530   0070F0  EF9B  F038         	goto	l3894
  5531   0070F4                     u3990:
  5532   0070F4  0E4E               	movlw	78
  5533   0070F6  183B               	xorwf	(_buffer+4)^0,w,c
  5534   0070F8  A4D8               	btfss	status,2,c
  5535   0070FA  EF81  F038         	goto	u4001
  5536   0070FE  EF83  F038         	goto	u4000
  5537   007102                     u4001:
  5538   007102  EF9B  F038         	goto	l3894
  5539   007106                     u4000:
  5540   007106  0E32               	movlw	50
  5541   007108  183C               	xorwf	(_buffer+5)^0,w,c
  5542   00710A  A4D8               	btfss	status,2,c
  5543   00710C  EF8A  F038         	goto	u4011
  5544   007110  EF8C  F038         	goto	u4010
  5545   007114                     u4011:
  5546   007114  EF9B  F038         	goto	l3894
  5547   007118                     u4010:
  5548   007118  0E58               	movlw	88
  5549   00711A  183D               	xorwf	(_buffer+6)^0,w,c
  5550   00711C  A4D8               	btfss	status,2,c
  5551   00711E  EF93  F038         	goto	u4021
  5552   007122  EF95  F038         	goto	u4020
  5553   007126                     u4021:
  5554   007126  EF9B  F038         	goto	l3894
  5555   00712A                     u4020:
  5556   00712A                     
  5557                           ;event.c: 104:                 (buffer[6] == 'X')) {;event.c: 105:             setAlarmL
      +                          evel2b(temp);
  5558   00712A  C023  F01B         	movff	eventRead@temp,setAlarmLevel2b@newAlarmLevel2b
  5559   00712E  C024  F01C         	movff	eventRead@temp+1,setAlarmLevel2b@newAlarmLevel2b+1
  5560   007132  EC14  F02E         	call	_setAlarmLevel2b	;wreg free
  5561   007136                     l3894:
  5562                           
  5563                           ;event.c: 107:         if ((buffer[0] == 'P') &&
  5564   007136  0E50               	movlw	80
  5565   007138  1837               	xorwf	_buffer^0,w,c
  5566   00713A  A4D8               	btfss	status,2,c
  5567   00713C  EFA2  F038         	goto	u4031
  5568   007140  EFA4  F038         	goto	u4030
  5569   007144                     u4031:
  5570   007144  EFE0  F038         	goto	l3910
  5571   007148                     u4030:
  5572   007148  0E53               	movlw	83
  5573   00714A  1838               	xorwf	(_buffer+1)^0,w,c
  5574   00714C  A4D8               	btfss	status,2,c
  5575   00714E  EFAB  F038         	goto	u4041
  5576   007152  EFAD  F038         	goto	u4040
  5577   007156                     u4041:
  5578   007156  EFE0  F038         	goto	l3910
  5579   00715A                     u4040:
  5580   00715A  0E54               	movlw	84
  5581   00715C  1839               	xorwf	(_buffer+2)^0,w,c
  5582   00715E  A4D8               	btfss	status,2,c
  5583   007160  EFB4  F038         	goto	u4051
  5584   007164  EFB6  F038         	goto	u4050
  5585   007168                     u4051:
  5586   007168  EFE0  F038         	goto	l3910
  5587   00716C                     u4050:
  5588   00716C  0E49               	movlw	73
  5589   00716E  183A               	xorwf	(_buffer+3)^0,w,c
  5590   007170  A4D8               	btfss	status,2,c
  5591   007172  EFBD  F038         	goto	u4061
  5592   007176  EFBF  F038         	goto	u4060
  5593   00717A                     u4061:
  5594   00717A  EFE0  F038         	goto	l3910
  5595   00717E                     u4060:
  5596   00717E  0E4D               	movlw	77
  5597   007180  183B               	xorwf	(_buffer+4)^0,w,c
  5598   007182  A4D8               	btfss	status,2,c
  5599   007184  EFC6  F038         	goto	u4071
  5600   007188  EFC8  F038         	goto	u4070
  5601   00718C                     u4071:
  5602   00718C  EFE0  F038         	goto	l3910
  5603   007190                     u4070:
  5604   007190  0E45               	movlw	69
  5605   007192  183C               	xorwf	(_buffer+5)^0,w,c
  5606   007194  A4D8               	btfss	status,2,c
  5607   007196  EFCF  F038         	goto	u4081
  5608   00719A  EFD1  F038         	goto	u4080
  5609   00719E                     u4081:
  5610   00719E  EFE0  F038         	goto	l3910
  5611   0071A2                     u4080:
  5612   0071A2  0E58               	movlw	88
  5613   0071A4  183D               	xorwf	(_buffer+6)^0,w,c
  5614   0071A6  A4D8               	btfss	status,2,c
  5615   0071A8  EFD8  F038         	goto	u4091
  5616   0071AC  EFDA  F038         	goto	u4090
  5617   0071B0                     u4091:
  5618   0071B0  EFE0  F038         	goto	l3910
  5619   0071B4                     u4090:
  5620   0071B4                     
  5621                           ;event.c: 113:                 (buffer[6] == 'X')) {;event.c: 114:             setTime(t
      +                          emp);
  5622   0071B4  C023  F003         	movff	eventRead@temp,setTime@newTime
  5623   0071B8  C024  F004         	movff	eventRead@temp+1,setTime@newTime+1
  5624   0071BC  EC3B  F02C         	call	_setTime	;wreg free
  5625   0071C0                     l3910:
  5626                           
  5627                           ;event.c: 120:     if (ser == 'd') {
  5628   0071C0  0E64               	movlw	100
  5629   0071C2  1825               	xorwf	eventRead@ser^0,w,c
  5630   0071C4  A4D8               	btfss	status,2,c
  5631   0071C6  EFE7  F038         	goto	u4101
  5632   0071CA  EFE9  F038         	goto	u4100
  5633   0071CE                     u4101:
  5634   0071CE  EFED  F038         	goto	l3914
  5635   0071D2                     u4100:
  5636   0071D2                     
  5637                           ;event.c: 121:         ev = EV_RIGHT;
  5638   0071D2  0E00               	movlw	0
  5639   0071D4  6E22               	movwf	(eventRead@ev+1)^0,c
  5640   0071D6  0E03               	movlw	3
  5641   0071D8  6E21               	movwf	eventRead@ev^0,c
  5642   0071DA                     l3914:
  5643                           
  5644                           ;event.c: 123:     if (ser == 'a') {
  5645   0071DA  0E61               	movlw	97
  5646   0071DC  1825               	xorwf	eventRead@ser^0,w,c
  5647   0071DE  A4D8               	btfss	status,2,c
  5648   0071E0  EFF4  F038         	goto	u4111
  5649   0071E4  EFF6  F038         	goto	u4110
  5650   0071E8                     u4111:
  5651   0071E8  EFFA  F038         	goto	l3918
  5652   0071EC                     u4110:
  5653   0071EC                     
  5654                           ;event.c: 124:         ev = EV_LEFT;
  5655   0071EC  0E00               	movlw	0
  5656   0071EE  6E22               	movwf	(eventRead@ev+1)^0,c
  5657   0071F0  0E02               	movlw	2
  5658   0071F2  6E21               	movwf	eventRead@ev^0,c
  5659   0071F4                     l3918:
  5660                           
  5661                           ;event.c: 127:     if (ser == 'e') {
  5662   0071F4  0E65               	movlw	101
  5663   0071F6  1825               	xorwf	eventRead@ser^0,w,c
  5664   0071F8  A4D8               	btfss	status,2,c
  5665   0071FA  EF01  F039         	goto	u4121
  5666   0071FE  EF03  F039         	goto	u4120
  5667   007202                     u4121:
  5668   007202  EF07  F039         	goto	l3922
  5669   007206                     u4120:
  5670   007206                     
  5671                           ;event.c: 128:         ev = EV_ENTER;
  5672   007206  0E00               	movlw	0
  5673   007208  6E22               	movwf	(eventRead@ev+1)^0,c
  5674   00720A  0E04               	movlw	4
  5675   00720C  6E21               	movwf	eventRead@ev^0,c
  5676   00720E                     l3922:
  5677                           
  5678                           ;event.c: 130:     return ev;
  5679   00720E  C021  F01D         	movff	eventRead@ev,?_eventRead
  5680   007212  C022  F01E         	movff	eventRead@ev+1,?_eventRead+1
  5681   007216  0012               	return		;funcret
  5682   007218                     __end_of_eventRead:
  5683                           	callstack 0
  5684                           
  5685 ;; *************** function _setTime *****************
  5686 ;; Defined at:
  5687 ;;		line 32 in file "var.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;  newTime         2    2[COMRAM] int 
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  1    wreg      void 
  5694 ;; Registers used:
  5695 ;;		None
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5701 ;;      Params:         2       0       0       0       0       0       0       0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5704 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5705 ;;Total ram usage:        2 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; This function calls:
  5708 ;;		Nothing
  5709 ;; This function is called by:
  5710 ;;		_smLoop
  5711 ;;		_eventRead
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text32
  5716   005876                     __ptext32:
  5717                           	callstack 0
  5718   005876                     _setTime:
  5719                           	callstack 29
  5720   005876                     
  5721                           ;var.c: 33:     time = newTime;
  5722   005876  C003  F04D         	movff	setTime@newTime,_time
  5723   00587A  C004  F04E         	movff	setTime@newTime+1,_time+1
  5724   00587E  0012               	return		;funcret
  5725   005880                     __end_of_setTime:
  5726                           	callstack 0
  5727                           
  5728 ;; *************** function _setAlarmLevel2b *****************
  5729 ;; Defined at:
  5730 ;;		line 102 in file "var.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  newAlarmLeve    2   26[COMRAM] int 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;		None
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5744 ;;      Params:         2       0       0       0       0       0       0       0       0
  5745 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5747 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5748 ;;Total ram usage:        2 bytes
  5749 ;; Hardware stack levels used: 1
  5750 ;; Hardware stack levels required when called: 4
  5751 ;; This function calls:
  5752 ;;		_dsWriteData
  5753 ;; This function is called by:
  5754 ;;		_smLoop
  5755 ;;		_eventRead
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text33
  5760   005C28                     __ptext33:
  5761                           	callstack 0
  5762   005C28                     _setAlarmLevel2b:
  5763                           	callstack 25
  5764   005C28                     
  5765                           ;var.c: 103:     if ((newAlarmLevel2b <= 99) && (newAlarmLevel2b >= 0)) {
  5766   005C28  BE1C               	btfsc	(setAlarmLevel2b@newAlarmLevel2b+1)^0,7,c
  5767   005C2A  EF22  F02E         	goto	u3430
  5768   005C2E  501C               	movf	(setAlarmLevel2b@newAlarmLevel2b+1)^0,w,c
  5769   005C30  E107               	bnz	u3431
  5770   005C32  0E64               	movlw	100
  5771   005C34  5C1B               	subwf	setAlarmLevel2b@newAlarmLevel2b^0,w,c
  5772   005C36  B0D8               	btfsc	status,0,c
  5773   005C38  EF20  F02E         	goto	u3431
  5774   005C3C  EF22  F02E         	goto	u3430
  5775   005C40                     u3431:
  5776   005C40  EF30  F02E         	goto	l512
  5777   005C44                     u3430:
  5778   005C44  BE1C               	btfsc	(setAlarmLevel2b@newAlarmLevel2b+1)^0,7,c
  5779   005C46  EF27  F02E         	goto	u3441
  5780   005C4A  EF29  F02E         	goto	u3440
  5781   005C4E                     u3441:
  5782   005C4E  EF30  F02E         	goto	l512
  5783   005C52                     u3440:
  5784   005C52                     
  5785                           ;var.c: 104:         dsWriteData(newAlarmLevel2b, 0x21);
  5786   005C52  0E00               	movlw	0
  5787   005C54  6E12               	movwf	(dsWriteData@address+1)^0,c
  5788   005C56  0E21               	movlw	33
  5789   005C58  6E11               	movwf	dsWriteData@address^0,c
  5790   005C5A  501B               	movf	setAlarmLevel2b@newAlarmLevel2b^0,w,c
  5791   005C5C  EC05  F033         	call	_dsWriteData
  5792   005C60                     l512:
  5793   005C60  0012               	return		;funcret
  5794   005C62                     __end_of_setAlarmLevel2b:
  5795                           	callstack 0
  5796                           
  5797 ;; *************** function _setAlarmLevel2a *****************
  5798 ;; Defined at:
  5799 ;;		line 67 in file "var.c"
  5800 ;; Parameters:    Size  Location     Type
  5801 ;;  newAlarmLeve    2   26[COMRAM] int 
  5802 ;; Auto vars:     Size  Location     Type
  5803 ;;		None
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  1    wreg      void 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0, cstack
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5813 ;;      Params:         2       0       0       0       0       0       0       0       0
  5814 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5815 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5816 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5817 ;;Total ram usage:        2 bytes
  5818 ;; Hardware stack levels used: 1
  5819 ;; Hardware stack levels required when called: 4
  5820 ;; This function calls:
  5821 ;;		_dsWriteData
  5822 ;; This function is called by:
  5823 ;;		_smLoop
  5824 ;;		_eventRead
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text34
  5829   005BEE                     __ptext34:
  5830                           	callstack 0
  5831   005BEE                     _setAlarmLevel2a:
  5832                           	callstack 25
  5833   005BEE                     
  5834                           ;var.c: 69:     if ((newAlarmLevel2a <= 99)&&(newAlarmLevel2a >= 0)) {
  5835   005BEE  BE1C               	btfsc	(setAlarmLevel2a@newAlarmLevel2a+1)^0,7,c
  5836   005BF0  EF05  F02E         	goto	u3390
  5837   005BF4  501C               	movf	(setAlarmLevel2a@newAlarmLevel2a+1)^0,w,c
  5838   005BF6  E107               	bnz	u3391
  5839   005BF8  0E64               	movlw	100
  5840   005BFA  5C1B               	subwf	setAlarmLevel2a@newAlarmLevel2a^0,w,c
  5841   005BFC  B0D8               	btfsc	status,0,c
  5842   005BFE  EF03  F02E         	goto	u3391
  5843   005C02  EF05  F02E         	goto	u3390
  5844   005C06                     u3391:
  5845   005C06  EF13  F02E         	goto	l494
  5846   005C0A                     u3390:
  5847   005C0A  BE1C               	btfsc	(setAlarmLevel2a@newAlarmLevel2a+1)^0,7,c
  5848   005C0C  EF0A  F02E         	goto	u3401
  5849   005C10  EF0C  F02E         	goto	u3400
  5850   005C14                     u3401:
  5851   005C14  EF13  F02E         	goto	l494
  5852   005C18                     u3400:
  5853   005C18                     
  5854                           ;var.c: 70:         dsWriteData(newAlarmLevel2a, 0x23);
  5855   005C18  0E00               	movlw	0
  5856   005C1A  6E12               	movwf	(dsWriteData@address+1)^0,c
  5857   005C1C  0E23               	movlw	35
  5858   005C1E  6E11               	movwf	dsWriteData@address^0,c
  5859   005C20  501B               	movf	setAlarmLevel2a@newAlarmLevel2a^0,w,c
  5860   005C22  EC05  F033         	call	_dsWriteData
  5861   005C26                     l494:
  5862   005C26  0012               	return		;funcret
  5863   005C28                     __end_of_setAlarmLevel2a:
  5864                           	callstack 0
  5865                           
  5866 ;; *************** function _setAlarmLevel1b *****************
  5867 ;; Defined at:
  5868 ;;		line 85 in file "var.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  newAlarmLeve    2   26[COMRAM] int 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;		None
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg, status,2, status,0, cstack
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5882 ;;      Params:         2       0       0       0       0       0       0       0       0
  5883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5885 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5886 ;;Total ram usage:        2 bytes
  5887 ;; Hardware stack levels used: 1
  5888 ;; Hardware stack levels required when called: 4
  5889 ;; This function calls:
  5890 ;;		_dsWriteData
  5891 ;; This function is called by:
  5892 ;;		_smLoop
  5893 ;;		_eventRead
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text35
  5898   005BB4                     __ptext35:
  5899                           	callstack 0
  5900   005BB4                     _setAlarmLevel1b:
  5901                           	callstack 25
  5902   005BB4                     
  5903                           ;var.c: 86:     if ((newAlarmLevel1b <= 99)&&(newAlarmLevel1b >= 0)) {
  5904   005BB4  BE1C               	btfsc	(setAlarmLevel1b@newAlarmLevel1b+1)^0,7,c
  5905   005BB6  EFE8  F02D         	goto	u3410
  5906   005BBA  501C               	movf	(setAlarmLevel1b@newAlarmLevel1b+1)^0,w,c
  5907   005BBC  E107               	bnz	u3411
  5908   005BBE  0E64               	movlw	100
  5909   005BC0  5C1B               	subwf	setAlarmLevel1b@newAlarmLevel1b^0,w,c
  5910   005BC2  B0D8               	btfsc	status,0,c
  5911   005BC4  EFE6  F02D         	goto	u3411
  5912   005BC8  EFE8  F02D         	goto	u3410
  5913   005BCC                     u3411:
  5914   005BCC  EFF6  F02D         	goto	l503
  5915   005BD0                     u3410:
  5916   005BD0  BE1C               	btfsc	(setAlarmLevel1b@newAlarmLevel1b+1)^0,7,c
  5917   005BD2  EFED  F02D         	goto	u3421
  5918   005BD6  EFEF  F02D         	goto	u3420
  5919   005BDA                     u3421:
  5920   005BDA  EFF6  F02D         	goto	l503
  5921   005BDE                     u3420:
  5922   005BDE                     
  5923                           ;var.c: 87:         dsWriteData(newAlarmLevel1b, 0x22);
  5924   005BDE  0E00               	movlw	0
  5925   005BE0  6E12               	movwf	(dsWriteData@address+1)^0,c
  5926   005BE2  0E22               	movlw	34
  5927   005BE4  6E11               	movwf	dsWriteData@address^0,c
  5928   005BE6  501B               	movf	setAlarmLevel1b@newAlarmLevel1b^0,w,c
  5929   005BE8  EC05  F033         	call	_dsWriteData
  5930   005BEC                     l503:
  5931   005BEC  0012               	return		;funcret
  5932   005BEE                     __end_of_setAlarmLevel1b:
  5933                           	callstack 0
  5934                           
  5935 ;; *************** function _setAlarmLevel1a *****************
  5936 ;; Defined at:
  5937 ;;		line 50 in file "var.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  newAlarmLeve    2   26[COMRAM] int 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0, cstack
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5951 ;;      Params:         2       0       0       0       0       0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5954 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5955 ;;Total ram usage:        2 bytes
  5956 ;; Hardware stack levels used: 1
  5957 ;; Hardware stack levels required when called: 4
  5958 ;; This function calls:
  5959 ;;		_dsWriteData
  5960 ;; This function is called by:
  5961 ;;		_smLoop
  5962 ;;		_eventRead
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text36
  5967   005B7A                     __ptext36:
  5968                           	callstack 0
  5969   005B7A                     _setAlarmLevel1a:
  5970                           	callstack 25
  5971   005B7A                     
  5972                           ;var.c: 51:     if ((newAlarmLevel1a <= 99)&&(newAlarmLevel1a >= 0)) {
  5973   005B7A  BE1C               	btfsc	(setAlarmLevel1a@newAlarmLevel1a+1)^0,7,c
  5974   005B7C  EFCB  F02D         	goto	u3370
  5975   005B80  501C               	movf	(setAlarmLevel1a@newAlarmLevel1a+1)^0,w,c
  5976   005B82  E107               	bnz	u3371
  5977   005B84  0E64               	movlw	100
  5978   005B86  5C1B               	subwf	setAlarmLevel1a@newAlarmLevel1a^0,w,c
  5979   005B88  B0D8               	btfsc	status,0,c
  5980   005B8A  EFC9  F02D         	goto	u3371
  5981   005B8E  EFCB  F02D         	goto	u3370
  5982   005B92                     u3371:
  5983   005B92  EFD9  F02D         	goto	l485
  5984   005B96                     u3370:
  5985   005B96  BE1C               	btfsc	(setAlarmLevel1a@newAlarmLevel1a+1)^0,7,c
  5986   005B98  EFD0  F02D         	goto	u3381
  5987   005B9C  EFD2  F02D         	goto	u3380
  5988   005BA0                     u3381:
  5989   005BA0  EFD9  F02D         	goto	l485
  5990   005BA4                     u3380:
  5991   005BA4                     
  5992                           ;var.c: 52:         dsWriteData(newAlarmLevel1a, 0x24);
  5993   005BA4  0E00               	movlw	0
  5994   005BA6  6E12               	movwf	(dsWriteData@address+1)^0,c
  5995   005BA8  0E24               	movlw	36
  5996   005BAA  6E11               	movwf	dsWriteData@address^0,c
  5997   005BAC  501B               	movf	setAlarmLevel1a@newAlarmLevel1a^0,w,c
  5998   005BAE  EC05  F033         	call	_dsWriteData
  5999   005BB2                     l485:
  6000   005BB2  0012               	return		;funcret
  6001   005BB4                     __end_of_setAlarmLevel1a:
  6002                           	callstack 0
  6003                           
  6004 ;; *************** function _dsWriteData *****************
  6005 ;; Defined at:
  6006 ;;		line 33 in file "rtc.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  value           1    wreg     unsigned char 
  6009 ;;  address         2   16[COMRAM] int 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  value           1   18[COMRAM] unsigned char 
  6012 ;;  i               4   19[COMRAM] float 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6022 ;;      Params:         2       0       0       0       0       0       0       0       0
  6023 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6025 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6026 ;;Total ram usage:        7 bytes
  6027 ;; Hardware stack levels used: 1
  6028 ;; Hardware stack levels required when called: 3
  6029 ;; This function calls:
  6030 ;;		___fladd
  6031 ;;		___flge
  6032 ;;		_i2cWriteByte
  6033 ;; This function is called by:
  6034 ;;		_getAlarmLevel1a
  6035 ;;		_setAlarmLevel1a
  6036 ;;		_getAlarmLevel2a
  6037 ;;		_setAlarmLevel2a
  6038 ;;		_getAlarmLevel1b
  6039 ;;		_setAlarmLevel1b
  6040 ;;		_getAlarmLevel2b
  6041 ;;		_setAlarmLevel2b
  6042 ;;		_setLanguage
  6043 ;;		_dsStartClock
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text37
  6048   00660A                     __ptext37:
  6049                           	callstack 0
  6050   00660A                     _dsWriteData:
  6051                           	callstack 25
  6052                           
  6053                           ;incstack = 0
  6054                           ;dsWriteData@value stored from wreg
  6055   00660A  6E13               	movwf	dsWriteData@value^0,c
  6056   00660C                     
  6057                           ;rtc.c: 34:  i2cWriteByte(1,0, (0x6f<<1)|0);
  6058   00660C  0E00               	movlw	0
  6059   00660E  6E02               	movwf	i2cWriteByte@send_stop^0,c
  6060   006610  0EDE               	movlw	222
  6061   006612  6E03               	movwf	i2cWriteByte@byte^0,c
  6062   006614  0E01               	movlw	1
  6063   006616  EC56  F02F         	call	_i2cWriteByte
  6064                           
  6065                           ;rtc.c: 35:  i2cWriteByte(0,0,address);
  6066   00661A  0E00               	movlw	0
  6067   00661C  6E02               	movwf	i2cWriteByte@send_stop^0,c
  6068   00661E  C011  F003         	movff	dsWriteData@address,i2cWriteByte@byte
  6069   006622  0E00               	movlw	0
  6070   006624  EC56  F02F         	call	_i2cWriteByte
  6071                           
  6072                           ;rtc.c: 36:  i2cWriteByte(0,1,value);
  6073   006628  0E01               	movlw	1
  6074   00662A  6E02               	movwf	i2cWriteByte@send_stop^0,c
  6075   00662C  C013  F003         	movff	dsWriteData@value,i2cWriteByte@byte
  6076   006630  0E00               	movlw	0
  6077   006632  EC56  F02F         	call	_i2cWriteByte
  6078   006636                     
  6079                           ;rtc.c: 37:     for(float i = 0; i<100;i++);
  6080   006636  0E00               	movlw	0
  6081   006638  6E14               	movwf	dsWriteData@i^0,c
  6082   00663A  0E00               	movlw	0
  6083   00663C  6E15               	movwf	(dsWriteData@i+1)^0,c
  6084   00663E  0E00               	movlw	0
  6085   006640  6E16               	movwf	(dsWriteData@i+2)^0,c
  6086   006642  0E00               	movlw	0
  6087   006644  6E17               	movwf	(dsWriteData@i+3)^0,c
  6088   006646  C014  F001         	movff	dsWriteData@i,___flge@ff1
  6089   00664A  C015  F002         	movff	dsWriteData@i+1,___flge@ff1+1
  6090   00664E  C016  F003         	movff	dsWriteData@i+2,___flge@ff1+2
  6091   006652  C017  F004         	movff	dsWriteData@i+3,___flge@ff1+3
  6092   006656  0E00               	movlw	0
  6093   006658  6E05               	movwf	___flge@ff2^0,c
  6094   00665A  0E00               	movlw	0
  6095   00665C  6E06               	movwf	(___flge@ff2+1)^0,c
  6096   00665E  0EC8               	movlw	200
  6097   006660  6E07               	movwf	(___flge@ff2+2)^0,c
  6098   006662  0E42               	movlw	66
  6099   006664  6E08               	movwf	(___flge@ff2+3)^0,c
  6100   006666  EC6C  F034         	call	___flge	;wreg free
  6101   00666A  A0D8               	btfss	status,0,c
  6102   00666C  EF3A  F033         	goto	u2941
  6103   006670  EF3C  F033         	goto	u2940
  6104   006674                     u2941:
  6105   006674  EF3E  F033         	goto	l3182
  6106   006678                     u2940:
  6107   006678  EF71  F033         	goto	l153
  6108   00667C                     l3182:
  6109   00667C  C014  F001         	movff	dsWriteData@i,___fladd@b
  6110   006680  C015  F002         	movff	dsWriteData@i+1,___fladd@b+1
  6111   006684  C016  F003         	movff	dsWriteData@i+2,___fladd@b+2
  6112   006688  C017  F004         	movff	dsWriteData@i+3,___fladd@b+3
  6113   00668C  0E00               	movlw	0
  6114   00668E  6E05               	movwf	___fladd@a^0,c
  6115   006690  0E00               	movlw	0
  6116   006692  6E06               	movwf	(___fladd@a+1)^0,c
  6117   006694  0E80               	movlw	128
  6118   006696  6E07               	movwf	(___fladd@a+2)^0,c
  6119   006698  0E3F               	movlw	63
  6120   00669A  6E08               	movwf	(___fladd@a+3)^0,c
  6121   00669C  EC0C  F039         	call	___fladd	;wreg free
  6122   0066A0  C001  F014         	movff	?___fladd,dsWriteData@i
  6123   0066A4  C002  F015         	movff	?___fladd+1,dsWriteData@i+1
  6124   0066A8  C003  F016         	movff	?___fladd+2,dsWriteData@i+2
  6125   0066AC  C004  F017         	movff	?___fladd+3,dsWriteData@i+3
  6126   0066B0  C014  F001         	movff	dsWriteData@i,___flge@ff1
  6127   0066B4  C015  F002         	movff	dsWriteData@i+1,___flge@ff1+1
  6128   0066B8  C016  F003         	movff	dsWriteData@i+2,___flge@ff1+2
  6129   0066BC  C017  F004         	movff	dsWriteData@i+3,___flge@ff1+3
  6130   0066C0  0E00               	movlw	0
  6131   0066C2  6E05               	movwf	___flge@ff2^0,c
  6132   0066C4  0E00               	movlw	0
  6133   0066C6  6E06               	movwf	(___flge@ff2+1)^0,c
  6134   0066C8  0EC8               	movlw	200
  6135   0066CA  6E07               	movwf	(___flge@ff2+2)^0,c
  6136   0066CC  0E42               	movlw	66
  6137   0066CE  6E08               	movwf	(___flge@ff2+3)^0,c
  6138   0066D0  EC6C  F034         	call	___flge	;wreg free
  6139   0066D4  A0D8               	btfss	status,0,c
  6140   0066D6  EF6F  F033         	goto	u2951
  6141   0066DA  EF71  F033         	goto	u2950
  6142   0066DE                     u2951:
  6143   0066DE  EF3E  F033         	goto	l3182
  6144   0066E2                     u2950:
  6145   0066E2                     l153:
  6146   0066E2  0012               	return		;funcret
  6147   0066E4                     __end_of_dsWriteData:
  6148                           	callstack 0
  6149                           
  6150 ;; *************** function _i2cWriteByte *****************
  6151 ;; Defined at:
  6152 ;;		line 110 in file "i2c.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;  send_start      1    wreg     unsigned char 
  6155 ;;  send_stop       1    1[COMRAM] unsigned char 
  6156 ;;  byte            1    2[COMRAM] unsigned char 
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  send_start      1    3[COMRAM] unsigned char 
  6159 ;;  bit             1    4[COMRAM] unsigned char 
  6160 ;;  nack            1    0        unsigned char 
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      unsigned char 
  6163 ;; Registers used:
  6164 ;;		wreg, status,2, status,0, cstack
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6170 ;;      Params:         2       0       0       0       0       0       0       0       0
  6171 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6173 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6174 ;;Total ram usage:        4 bytes
  6175 ;; Hardware stack levels used: 1
  6176 ;; Hardware stack levels required when called: 2
  6177 ;; This function calls:
  6178 ;;		_i2c_read_bit
  6179 ;;		_i2c_start
  6180 ;;		_i2c_stop
  6181 ;;		_i2c_write_bit
  6182 ;; This function is called by:
  6183 ;;		_dsWriteData
  6184 ;;		_dsReadData
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	text38
  6189   005EAC                     __ptext38:
  6190                           	callstack 0
  6191   005EAC                     _i2cWriteByte:
  6192                           	callstack 25
  6193                           
  6194                           ;incstack = 0
  6195                           ;i2cWriteByte@send_start stored from wreg
  6196   005EAC  6E04               	movwf	i2cWriteByte@send_start^0,c
  6197   005EAE                     
  6198                           ;i2c.c: 111:  unsigned char bit;;i2c.c: 112:  unsigned char nack;;i2c.c: 113:  if (send_
      +                          start) {
  6199   005EAE  5004               	movf	i2cWriteByte@send_start^0,w,c
  6200   005EB0  B4D8               	btfsc	status,2,c
  6201   005EB2  EF5D  F02F         	goto	u2351
  6202   005EB6  EF5F  F02F         	goto	u2350
  6203   005EBA                     u2351:
  6204   005EBA  EF61  F02F         	goto	l2846
  6205   005EBE                     u2350:
  6206   005EBE                     
  6207                           ;i2c.c: 114:   i2c_start();
  6208   005EBE  EC31  F02E         	call	_i2c_start	;wreg free
  6209   005EC2                     l2846:
  6210                           
  6211                           ;i2c.c: 116:  for (bit = 0; bit < 8; bit++) {
  6212   005EC2  0E00               	movlw	0
  6213   005EC4  6E05               	movwf	i2cWriteByte@bit^0,c
  6214   005EC6                     l2852:
  6215                           
  6216                           ;i2c.c: 117:   i2c_write_bit((byte & 0x80) != 0);
  6217   005EC6  BE03               	btfsc	i2cWriteByte@byte^0,7,c
  6218   005EC8  EF68  F02F         	goto	u2361
  6219   005ECC  EF6B  F02F         	goto	u2360
  6220   005ED0                     u2361:
  6221   005ED0  0E01               	movlw	1
  6222   005ED2  EF6C  F02F         	goto	u2370
  6223   005ED6                     u2360:
  6224   005ED6  0E00               	movlw	0
  6225   005ED8                     u2370:
  6226   005ED8  ECCC  F02E         	call	_i2c_write_bit
  6227   005EDC                     
  6228                           ;i2c.c: 118:   byte <<= 1;
  6229   005EDC  90D8               	bcf	status,0,c
  6230   005EDE  3603               	rlcf	i2cWriteByte@byte^0,f,c
  6231   005EE0                     
  6232                           ;i2c.c: 119:  }
  6233   005EE0  2A05               	incf	i2cWriteByte@bit^0,f,c
  6234   005EE2  0E07               	movlw	7
  6235   005EE4  6405               	cpfsgt	i2cWriteByte@bit^0,c
  6236   005EE6  EF77  F02F         	goto	u2381
  6237   005EEA  EF79  F02F         	goto	u2380
  6238   005EEE                     u2381:
  6239   005EEE  EF63  F02F         	goto	l2852
  6240   005EF2                     u2380:
  6241   005EF2  EC38  F02D         	call	_i2c_read_bit	;wreg free
  6242   005EF6                     
  6243                           ;i2c.c: 121:  if (send_stop) {
  6244   005EF6  5002               	movf	i2cWriteByte@send_stop^0,w,c
  6245   005EF8  B4D8               	btfsc	status,2,c
  6246   005EFA  EF81  F02F         	goto	u2391
  6247   005EFE  EF83  F02F         	goto	u2390
  6248   005F02                     u2391:
  6249   005F02  EF85  F02F         	goto	l120
  6250   005F06                     u2390:
  6251   005F06                     
  6252                           ;i2c.c: 122:   i2c_stop();
  6253   005F06  EC09  F02D         	call	_i2c_stop	;wreg free
  6254   005F0A                     l120:
  6255   005F0A  0012               	return		;funcret
  6256   005F0C                     __end_of_i2cWriteByte:
  6257                           	callstack 0
  6258                           
  6259 ;; *************** function _i2c_write_bit *****************
  6260 ;; Defined at:
  6261 ;;		line 81 in file "i2c.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  bit             1    wreg     unsigned char 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  bit             1    0[COMRAM] unsigned char 
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, status,2, status,0, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6275 ;;      Params:         0       0       0       0       0       0       0       0       0
  6276 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6278 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6279 ;;Total ram usage:        1 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 1
  6282 ;; This function calls:
  6283 ;;		_I2C_delay
  6284 ;;		_clear_SCL
  6285 ;;		_clear_SDA
  6286 ;;		_read_SCL
  6287 ;;		_read_SDA
  6288 ;; This function is called by:
  6289 ;;		_i2cWriteByte
  6290 ;;		_i2cReadByte
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text39
  6295   005D98                     __ptext39:
  6296                           	callstack 0
  6297   005D98                     _i2c_write_bit:
  6298                           	callstack 25
  6299                           
  6300                           ;incstack = 0
  6301                           ;i2c_write_bit@bit stored from wreg
  6302   005D98  6E01               	movwf	i2c_write_bit@bit^0,c
  6303   005D9A                     
  6304                           ;i2c.c: 82:  if (bit) {
  6305   005D9A  5001               	movf	i2c_write_bit@bit^0,w,c
  6306   005D9C  B4D8               	btfsc	status,2,c
  6307   005D9E  EFD3  F02E         	goto	u2311
  6308   005DA2  EFD5  F02E         	goto	u2310
  6309   005DA6                     u2311:
  6310   005DA6  EFD9  F02E         	goto	l2806
  6311   005DAA                     u2310:
  6312   005DAA                     
  6313                           ;i2c.c: 83:   read_SDA();
  6314   005DAA  EC9A  F02C         	call	_read_SDA	;wreg free
  6315                           
  6316                           ;i2c.c: 84:  } else {
  6317   005DAE  EFDB  F02E         	goto	l2808
  6318   005DB2                     l2806:
  6319                           
  6320                           ;i2c.c: 85:   clear_SDA();
  6321   005DB2  EC52  F02C         	call	_clear_SDA	;wreg free
  6322   005DB6                     l2808:
  6323                           
  6324                           ;i2c.c: 87:  I2C_delay();
  6325   005DB6  EC20  F02C         	call	_I2C_delay	;wreg free
  6326   005DBA                     l2810:
  6327   005DBA  EC8F  F02C         	call	_read_SCL	;wreg free
  6328   005DBE  0900               	iorlw	0
  6329   005DC0  B4D8               	btfsc	status,2,c
  6330   005DC2  EFE5  F02E         	goto	u2321
  6331   005DC6  EFE7  F02E         	goto	u2320
  6332   005DCA                     u2321:
  6333   005DCA  EFDD  F02E         	goto	l2810
  6334   005DCE                     u2320:
  6335   005DCE                     
  6336                           ;i2c.c: 89:  if (bit && read_SDA() == 0) {
  6337   005DCE  5001               	movf	i2c_write_bit@bit^0,w,c
  6338   005DD0  B4D8               	btfsc	status,2,c
  6339   005DD2  EFED  F02E         	goto	u2331
  6340   005DD6  EFEF  F02E         	goto	u2330
  6341   005DDA                     u2331:
  6342   005DDA  EFF1  F02E         	goto	l2816
  6343   005DDE                     u2330:
  6344   005DDE  EC9A  F02C         	call	_read_SDA	;wreg free
  6345   005DE2                     l2816:
  6346                           
  6347                           ;i2c.c: 92:  I2C_delay();
  6348   005DE2  EC20  F02C         	call	_I2C_delay	;wreg free
  6349   005DE6                     
  6350                           ;i2c.c: 93:  clear_SCL();
  6351   005DE6  EC4B  F02C         	call	_clear_SCL	;wreg free
  6352   005DEA                     
  6353                           ;i2c.c: 94:  I2C_delay();
  6354   005DEA  EC20  F02C         	call	_I2C_delay	;wreg free
  6355   005DEE  0012               	return		;funcret
  6356   005DF0                     __end_of_i2c_write_bit:
  6357                           	callstack 0
  6358                           
  6359 ;; *************** function _i2c_stop *****************
  6360 ;; Defined at:
  6361 ;;		line 68 in file "i2c.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;		None
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;		None
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  1    wreg      void 
  6368 ;; Registers used:
  6369 ;;		wreg, status,2, status,0, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0
  6376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6378 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6379 ;;Total ram usage:        0 bytes
  6380 ;; Hardware stack levels used: 1
  6381 ;; Hardware stack levels required when called: 1
  6382 ;; This function calls:
  6383 ;;		_I2C_delay
  6384 ;;		_clear_SDA
  6385 ;;		_read_SCL
  6386 ;;		_read_SDA
  6387 ;; This function is called by:
  6388 ;;		_i2cWriteByte
  6389 ;;		_i2cReadByte
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text40
  6394   005A12                     __ptext40:
  6395                           	callstack 0
  6396   005A12                     _i2c_stop:
  6397                           	callstack 25
  6398   005A12                     
  6399                           ;i2c.c: 70:  clear_SDA();
  6400   005A12  EC52  F02C         	call	_clear_SDA	;wreg free
  6401   005A16                     
  6402                           ;i2c.c: 71:  I2C_delay();
  6403   005A16  EC20  F02C         	call	_I2C_delay	;wreg free
  6404   005A1A                     l2792:
  6405   005A1A  EC8F  F02C         	call	_read_SCL	;wreg free
  6406   005A1E  0900               	iorlw	0
  6407   005A20  B4D8               	btfsc	status,2,c
  6408   005A22  EF15  F02D         	goto	u2301
  6409   005A26  EF17  F02D         	goto	u2300
  6410   005A2A                     u2301:
  6411   005A2A  EF0D  F02D         	goto	l2792
  6412   005A2E                     u2300:
  6413   005A2E                     
  6414                           ;i2c.c: 73:  I2C_delay();
  6415   005A2E  EC20  F02C         	call	_I2C_delay	;wreg free
  6416   005A32                     
  6417                           ;i2c.c: 74:  if (read_SDA() == 0) {
  6418   005A32  EC9A  F02C         	call	_read_SDA	;wreg free
  6419   005A36                     
  6420                           ;i2c.c: 77:  I2C_delay();
  6421   005A36  EC20  F02C         	call	_I2C_delay	;wreg free
  6422   005A3A                     
  6423                           ;i2c.c: 78:  started = 0;
  6424   005A3A  0E00               	movlw	0
  6425   005A3C  6E4C               	movwf	_started^0,c
  6426   005A3E  0012               	return		;funcret
  6427   005A40                     __end_of_i2c_stop:
  6428                           	callstack 0
  6429                           
  6430 ;; *************** function _i2c_start *****************
  6431 ;; Defined at:
  6432 ;;		line 49 in file "i2c.c"
  6433 ;; Parameters:    Size  Location     Type
  6434 ;;		None
  6435 ;; Auto vars:     Size  Location     Type
  6436 ;;		None
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  1    wreg      void 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0, cstack
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6446 ;;      Params:         0       0       0       0       0       0       0       0       0
  6447 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6449 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6450 ;;Total ram usage:        0 bytes
  6451 ;; Hardware stack levels used: 1
  6452 ;; Hardware stack levels required when called: 1
  6453 ;; This function calls:
  6454 ;;		_I2C_delay
  6455 ;;		_clear_SCL
  6456 ;;		_clear_SDA
  6457 ;;		_read_SCL
  6458 ;;		_read_SDA
  6459 ;; This function is called by:
  6460 ;;		_i2cWriteByte
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           	psect	text41
  6465   005C62                     __ptext41:
  6466                           	callstack 0
  6467   005C62                     _i2c_start:
  6468                           	callstack 25
  6469   005C62                     
  6470                           ;i2c.c: 51:  if (started) {
  6471   005C62  504C               	movf	_started^0,w,c
  6472   005C64  B4D8               	btfsc	status,2,c
  6473   005C66  EF37  F02E         	goto	u2281
  6474   005C6A  EF39  F02E         	goto	u2280
  6475   005C6E                     u2281:
  6476   005C6E  EF49  F02E         	goto	l2778
  6477   005C72                     u2280:
  6478   005C72                     
  6479                           ;i2c.c: 52:   read_SDA();
  6480   005C72  EC9A  F02C         	call	_read_SDA	;wreg free
  6481   005C76                     
  6482                           ;i2c.c: 53:   I2C_delay();
  6483   005C76  EC20  F02C         	call	_I2C_delay	;wreg free
  6484   005C7A                     l2774:
  6485   005C7A  EC8F  F02C         	call	_read_SCL	;wreg free
  6486   005C7E  0900               	iorlw	0
  6487   005C80  B4D8               	btfsc	status,2,c
  6488   005C82  EF45  F02E         	goto	u2291
  6489   005C86  EF47  F02E         	goto	u2290
  6490   005C8A                     u2291:
  6491   005C8A  EF3D  F02E         	goto	l2774
  6492   005C8E                     u2290:
  6493   005C8E                     
  6494                           ;i2c.c: 56:   I2C_delay();
  6495   005C8E  EC20  F02C         	call	_I2C_delay	;wreg free
  6496   005C92                     l2778:
  6497                           
  6498                           ;i2c.c: 58:  if (read_SDA() == 0) {
  6499   005C92  EC9A  F02C         	call	_read_SDA	;wreg free
  6500   005C96                     
  6501                           ;i2c.c: 62:  clear_SDA();
  6502   005C96  EC52  F02C         	call	_clear_SDA	;wreg free
  6503   005C9A                     
  6504                           ;i2c.c: 63:  I2C_delay();
  6505   005C9A  EC20  F02C         	call	_I2C_delay	;wreg free
  6506   005C9E                     
  6507                           ;i2c.c: 64:  clear_SCL();
  6508   005C9E  EC4B  F02C         	call	_clear_SCL	;wreg free
  6509   005CA2                     
  6510                           ;i2c.c: 65:  started = 1;
  6511   005CA2  0E01               	movlw	1
  6512   005CA4  6E4C               	movwf	_started^0,c
  6513   005CA6  0012               	return		;funcret
  6514   005CA8                     __end_of_i2c_start:
  6515                           	callstack 0
  6516                           
  6517 ;; *************** function _clear_SDA *****************
  6518 ;; Defined at:
  6519 ;;		line 42 in file "i2c.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;		None
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;		None
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  1    wreg      void 
  6526 ;; Registers used:
  6527 ;;		wreg, status,2, status,0
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6533 ;;      Params:         0       0       0       0       0       0       0       0       0
  6534 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6535 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6536 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6537 ;;Total ram usage:        0 bytes
  6538 ;; Hardware stack levels used: 1
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_i2c_start
  6543 ;;		_i2c_stop
  6544 ;;		_i2c_write_bit
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text42
  6549   0058A4                     __ptext42:
  6550                           	callstack 0
  6551   0058A4                     _clear_SDA:
  6552                           	callstack 25
  6553   0058A4                     
  6554                           ;i2c.c: 44:  ((((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(0)))));
  6555   0058A4  5093               	movf	147,w,c	;volatile
  6556   0058A6  0BFE               	andlw	254
  6557   0058A8  6E93               	movwf	147,c	;volatile
  6558                           
  6559                           ;i2c.c: 45:  ((((*(volatile __near unsigned char*)0xF81)) = ((*(volatile __near unsigned
      +                           char*)0xF81)) & (~(1<<(0)))));
  6560   0058AA  5081               	movf	129,w,c	;volatile
  6561   0058AC  0BFE               	andlw	254
  6562   0058AE  6E81               	movwf	129,c	;volatile
  6563   0058B0  0012               	return		;funcret
  6564   0058B2                     __end_of_clear_SDA:
  6565                           	callstack 0
  6566                           
  6567 ;; *************** function _i2c_read_bit *****************
  6568 ;; Defined at:
  6569 ;;		line 97 in file "i2c.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;  bit             1    0[COMRAM] unsigned char 
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      unsigned char 
  6576 ;; Registers used:
  6577 ;;		wreg, status,2, status,0, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6583 ;;      Params:         0       0       0       0       0       0       0       0       0
  6584 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6586 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6587 ;;Total ram usage:        1 bytes
  6588 ;; Hardware stack levels used: 1
  6589 ;; Hardware stack levels required when called: 1
  6590 ;; This function calls:
  6591 ;;		_I2C_delay
  6592 ;;		_clear_SCL
  6593 ;;		_read_SCL
  6594 ;;		_read_SDA
  6595 ;; This function is called by:
  6596 ;;		_i2cWriteByte
  6597 ;;		_i2cReadByte
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text43
  6602   005A70                     __ptext43:
  6603                           	callstack 0
  6604   005A70                     _i2c_read_bit:
  6605                           	callstack 25
  6606   005A70                     
  6607                           ;i2c.c: 98:  unsigned char bit;;i2c.c: 99:  read_SDA();
  6608   005A70  EC9A  F02C         	call	_read_SDA	;wreg free
  6609   005A74                     
  6610                           ;i2c.c: 100:  I2C_delay();
  6611   005A74  EC20  F02C         	call	_I2C_delay	;wreg free
  6612   005A78                     l2826:
  6613   005A78  EC8F  F02C         	call	_read_SCL	;wreg free
  6614   005A7C  0900               	iorlw	0
  6615   005A7E  B4D8               	btfsc	status,2,c
  6616   005A80  EF44  F02D         	goto	u2341
  6617   005A84  EF46  F02D         	goto	u2340
  6618   005A88                     u2341:
  6619   005A88  EF3C  F02D         	goto	l2826
  6620   005A8C                     u2340:
  6621   005A8C                     
  6622                           ;i2c.c: 102:  bit = read_SDA();
  6623   005A8C  EC9A  F02C         	call	_read_SDA	;wreg free
  6624   005A90  6E01               	movwf	i2c_read_bit@bit^0,c
  6625   005A92                     
  6626                           ;i2c.c: 103:  I2C_delay();
  6627   005A92  EC20  F02C         	call	_I2C_delay	;wreg free
  6628   005A96                     
  6629                           ;i2c.c: 104:  clear_SCL();
  6630   005A96  EC4B  F02C         	call	_clear_SCL	;wreg free
  6631                           
  6632                           ;i2c.c: 105:  I2C_delay();
  6633   005A9A  EC20  F02C         	call	_I2C_delay	;wreg free
  6634   005A9E                     
  6635                           ;i2c.c: 106:  return bit;
  6636   005A9E  5001               	movf	i2c_read_bit@bit^0,w,c
  6637   005AA0  0012               	return		;funcret
  6638   005AA2                     __end_of_i2c_read_bit:
  6639                           	callstack 0
  6640                           
  6641 ;; *************** function _read_SDA *****************
  6642 ;; Defined at:
  6643 ;;		line 31 in file "i2c.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      unsigned char 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6660 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used: 1
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_i2c_start
  6667 ;;		_i2c_stop
  6668 ;;		_i2c_write_bit
  6669 ;;		_i2c_read_bit
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text44
  6674   005934                     __ptext44:
  6675                           	callstack 0
  6676   005934                     _read_SDA:
  6677                           	callstack 25
  6678   005934                     
  6679                           ;i2c.c: 33:  ((((*(volatile __near unsigned char*)0xF93)) |= (1<<(0))));
  6680   005934  8093               	bsf	147,0,c	;volatile
  6681   005936                     
  6682                           ;i2c.c: 34:  return !!((((*(volatile __near unsigned char*)0xF81)) & (1<<(0))));
  6683   005936  B081               	btfsc	129,0,c	;volatile
  6684   005938  EFA0  F02C         	goto	u2261
  6685   00593C  EFA3  F02C         	goto	u2260
  6686   005940                     u2261:
  6687   005940  0E01               	movlw	1
  6688   005942  EFA4  F02C         	goto	u2270
  6689   005946                     u2260:
  6690   005946  0E00               	movlw	0
  6691   005948                     u2270:
  6692   005948  0012               	return		;funcret
  6693   00594A                     __end_of_read_SDA:
  6694                           	callstack 0
  6695                           
  6696 ;; *************** function _read_SCL *****************
  6697 ;; Defined at:
  6698 ;;		line 26 in file "i2c.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;		None
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      unsigned char 
  6705 ;; Registers used:
  6706 ;;		wreg, status,2, status,0
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6712 ;;      Params:         0       0       0       0       0       0       0       0       0
  6713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6715 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6716 ;;Total ram usage:        0 bytes
  6717 ;; Hardware stack levels used: 1
  6718 ;; This function calls:
  6719 ;;		Nothing
  6720 ;; This function is called by:
  6721 ;;		_i2c_start
  6722 ;;		_i2c_stop
  6723 ;;		_i2c_write_bit
  6724 ;;		_i2c_read_bit
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text45
  6729   00591E                     __ptext45:
  6730                           	callstack 0
  6731   00591E                     _read_SCL:
  6732                           	callstack 25
  6733   00591E                     
  6734                           ;i2c.c: 28:  ((((*(volatile __near unsigned char*)0xF93)) |= (1<<(1))));
  6735   00591E  8293               	bsf	147,1,c	;volatile
  6736   005920                     
  6737                           ;i2c.c: 29:  return !!((((*(volatile __near unsigned char*)0xF81)) & (1<<(1))));
  6738   005920  B281               	btfsc	129,1,c	;volatile
  6739   005922  EF95  F02C         	goto	u2241
  6740   005926  EF98  F02C         	goto	u2240
  6741   00592A                     u2241:
  6742   00592A  0E01               	movlw	1
  6743   00592C  EF99  F02C         	goto	u2250
  6744   005930                     u2240:
  6745   005930  0E00               	movlw	0
  6746   005932                     u2250:
  6747   005932  0012               	return		;funcret
  6748   005934                     __end_of_read_SCL:
  6749                           	callstack 0
  6750                           
  6751 ;; *************** function _clear_SCL *****************
  6752 ;; Defined at:
  6753 ;;		line 36 in file "i2c.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      void 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used: 1
  6773 ;; This function calls:
  6774 ;;		Nothing
  6775 ;; This function is called by:
  6776 ;;		_i2c_start
  6777 ;;		_i2c_write_bit
  6778 ;;		_i2c_read_bit
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text46
  6783   005896                     __ptext46:
  6784                           	callstack 0
  6785   005896                     _clear_SCL:
  6786                           	callstack 25
  6787   005896                     
  6788                           ;i2c.c: 38:  ((((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(1)))));
  6789   005896  5093               	movf	147,w,c	;volatile
  6790   005898  0BFD               	andlw	253
  6791   00589A  6E93               	movwf	147,c	;volatile
  6792                           
  6793                           ;i2c.c: 39:  ((((*(volatile __near unsigned char*)0xF81)) = ((*(volatile __near unsigned
      +                           char*)0xF81)) & (~(1<<(1)))));
  6794   00589C  5081               	movf	129,w,c	;volatile
  6795   00589E  0BFD               	andlw	253
  6796   0058A0  6E81               	movwf	129,c	;volatile
  6797   0058A2  0012               	return		;funcret
  6798   0058A4                     __end_of_clear_SCL:
  6799                           	callstack 0
  6800                           
  6801 ;; *************** function _I2C_delay *****************
  6802 ;; Defined at:
  6803 ;;		line 21 in file "i2c.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;  i               2    0        int 
  6808 ;;  v               2    0        volatile int 
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		None
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0
  6819 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6821 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6822 ;;Total ram usage:        0 bytes
  6823 ;; Hardware stack levels used: 1
  6824 ;; This function calls:
  6825 ;;		Nothing
  6826 ;; This function is called by:
  6827 ;;		_i2c_start
  6828 ;;		_i2c_stop
  6829 ;;		_i2c_write_bit
  6830 ;;		_i2c_read_bit
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text47
  6835   005840                     __ptext47:
  6836                           	callstack 0
  6837   005840                     _I2C_delay:
  6838                           	callstack 25
  6839   005840  0012               	return		;funcret
  6840   005842                     __end_of_I2C_delay:
  6841                           	callstack 0
  6842                           
  6843 ;; *************** function ___flge *****************
  6844 ;; Defined at:
  6845 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\flge.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;  ff1             4    0[COMRAM] void 
  6848 ;;  ff2             4    4[COMRAM] void 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		wreg, status,2, status,0
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6860 ;;      Params:         8       0       0       0       0       0       0       0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6862 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6863 ;;      Totals:        12       0       0       0       0       0       0       0       0
  6864 ;;Total ram usage:       12 bytes
  6865 ;; Hardware stack levels used: 1
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_dsWriteData
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text48
  6874   0068D8                     __ptext48:
  6875                           	callstack 0
  6876   0068D8                     ___flge:
  6877                           	callstack 27
  6878   0068D8  0E00               	movlw	0
  6879   0068DA  1401               	andwf	___flge@ff1^0,w,c
  6880   0068DC  6E09               	movwf	??___flge^0,c
  6881   0068DE  0E00               	movlw	0
  6882   0068E0  1402               	andwf	(___flge@ff1+1)^0,w,c
  6883   0068E2  6E0A               	movwf	(??___flge+1)^0,c
  6884   0068E4  0E80               	movlw	128
  6885   0068E6  1403               	andwf	(___flge@ff1+2)^0,w,c
  6886   0068E8  6E0B               	movwf	(??___flge+2)^0,c
  6887   0068EA  0E7F               	movlw	127
  6888   0068EC  1404               	andwf	(___flge@ff1+3)^0,w,c
  6889   0068EE  6E0C               	movwf	(??___flge+3)^0,c
  6890   0068F0  5009               	movf	??___flge^0,w,c
  6891   0068F2  100A               	iorwf	(??___flge+1)^0,w,c
  6892   0068F4  100B               	iorwf	(??___flge+2)^0,w,c
  6893   0068F6  100C               	iorwf	(??___flge+3)^0,w,c
  6894   0068F8  A4D8               	btfss	status,2,c
  6895   0068FA  EF81  F034         	goto	u2871
  6896   0068FE  EF83  F034         	goto	u2870
  6897   006902                     u2871:
  6898   006902  EF8B  F034         	goto	l3138
  6899   006906                     u2870:
  6900   006906  0E00               	movlw	0
  6901   006908  6E01               	movwf	___flge@ff1^0,c
  6902   00690A  0E00               	movlw	0
  6903   00690C  6E02               	movwf	(___flge@ff1+1)^0,c
  6904   00690E  0E00               	movlw	0
  6905   006910  6E03               	movwf	(___flge@ff1+2)^0,c
  6906   006912  0E00               	movlw	0
  6907   006914  6E04               	movwf	(___flge@ff1+3)^0,c
  6908   006916                     l3138:
  6909   006916  0E00               	movlw	0
  6910   006918  1405               	andwf	___flge@ff2^0,w,c
  6911   00691A  6E09               	movwf	??___flge^0,c
  6912   00691C  0E00               	movlw	0
  6913   00691E  1406               	andwf	(___flge@ff2+1)^0,w,c
  6914   006920  6E0A               	movwf	(??___flge+1)^0,c
  6915   006922  0E80               	movlw	128
  6916   006924  1407               	andwf	(___flge@ff2+2)^0,w,c
  6917   006926  6E0B               	movwf	(??___flge+2)^0,c
  6918   006928  0E7F               	movlw	127
  6919   00692A  1408               	andwf	(___flge@ff2+3)^0,w,c
  6920   00692C  6E0C               	movwf	(??___flge+3)^0,c
  6921   00692E  5009               	movf	??___flge^0,w,c
  6922   006930  100A               	iorwf	(??___flge+1)^0,w,c
  6923   006932  100B               	iorwf	(??___flge+2)^0,w,c
  6924   006934  100C               	iorwf	(??___flge+3)^0,w,c
  6925   006936  A4D8               	btfss	status,2,c
  6926   006938  EFA0  F034         	goto	u2881
  6927   00693C  EFA2  F034         	goto	u2880
  6928   006940                     u2881:
  6929   006940  EFAA  F034         	goto	l3142
  6930   006944                     u2880:
  6931   006944  0E00               	movlw	0
  6932   006946  6E05               	movwf	___flge@ff2^0,c
  6933   006948  0E00               	movlw	0
  6934   00694A  6E06               	movwf	(___flge@ff2+1)^0,c
  6935   00694C  0E00               	movlw	0
  6936   00694E  6E07               	movwf	(___flge@ff2+2)^0,c
  6937   006950  0E00               	movlw	0
  6938   006952  6E08               	movwf	(___flge@ff2+3)^0,c
  6939   006954                     l3142:
  6940   006954  AE04               	btfss	(___flge@ff1+3)^0,7,c
  6941   006956  EFAF  F034         	goto	u2891
  6942   00695A  EFB1  F034         	goto	u2890
  6943   00695E                     u2891:
  6944   00695E  EFBA  F034         	goto	l3146
  6945   006962                     u2890:
  6946   006962  6C01               	negf	___flge@ff1^0,c
  6947   006964  1E02               	comf	(___flge@ff1+1)^0,f,c
  6948   006966  B0D8               	btfsc	status,0,c
  6949   006968  2A02               	incf	(___flge@ff1+1)^0,f,c
  6950   00696A  1E03               	comf	(___flge@ff1+2)^0,f,c
  6951   00696C  B0D8               	btfsc	status,0,c
  6952   00696E  2A03               	incf	(___flge@ff1+2)^0,f,c
  6953   006970  0E80               	movlw	128
  6954   006972  5604               	subfwb	(___flge@ff1+3)^0,f,c
  6955   006974                     l3146:
  6956   006974  AE08               	btfss	(___flge@ff2+3)^0,7,c
  6957   006976  EFBF  F034         	goto	u2901
  6958   00697A  EFC1  F034         	goto	u2900
  6959   00697E                     u2901:
  6960   00697E  EFCA  F034         	goto	l834
  6961   006982                     u2900:
  6962   006982  6C05               	negf	___flge@ff2^0,c
  6963   006984  1E06               	comf	(___flge@ff2+1)^0,f,c
  6964   006986  B0D8               	btfsc	status,0,c
  6965   006988  2A06               	incf	(___flge@ff2+1)^0,f,c
  6966   00698A  1E07               	comf	(___flge@ff2+2)^0,f,c
  6967   00698C  B0D8               	btfsc	status,0,c
  6968   00698E  2A07               	incf	(___flge@ff2+2)^0,f,c
  6969   006990  0E80               	movlw	128
  6970   006992  5608               	subfwb	(___flge@ff2+3)^0,f,c
  6971   006994                     l834:
  6972   006994  0E00               	movlw	0
  6973   006996  1A01               	xorwf	___flge@ff1^0,f,c
  6974   006998  0E00               	movlw	0
  6975   00699A  1A02               	xorwf	(___flge@ff1+1)^0,f,c
  6976   00699C  0E00               	movlw	0
  6977   00699E  1A03               	xorwf	(___flge@ff1+2)^0,f,c
  6978   0069A0  0E80               	movlw	128
  6979   0069A2  1A04               	xorwf	(___flge@ff1+3)^0,f,c
  6980   0069A4  0E00               	movlw	0
  6981   0069A6  1A05               	xorwf	___flge@ff2^0,f,c
  6982   0069A8  0E00               	movlw	0
  6983   0069AA  1A06               	xorwf	(___flge@ff2+1)^0,f,c
  6984   0069AC  0E00               	movlw	0
  6985   0069AE  1A07               	xorwf	(___flge@ff2+2)^0,f,c
  6986   0069B0  0E80               	movlw	128
  6987   0069B2  1A08               	xorwf	(___flge@ff2+3)^0,f,c
  6988   0069B4  5005               	movf	___flge@ff2^0,w,c
  6989   0069B6  5C01               	subwf	___flge@ff1^0,w,c
  6990   0069B8  5006               	movf	(___flge@ff2+1)^0,w,c
  6991   0069BA  5802               	subwfb	(___flge@ff1+1)^0,w,c
  6992   0069BC  5007               	movf	(___flge@ff2+2)^0,w,c
  6993   0069BE  5803               	subwfb	(___flge@ff1+2)^0,w,c
  6994   0069C0  5008               	movf	(___flge@ff2+3)^0,w,c
  6995   0069C2  5804               	subwfb	(___flge@ff1+3)^0,w,c
  6996   0069C4  B0D8               	btfsc	status,0,c
  6997   0069C6  EFE7  F034         	goto	u2911
  6998   0069CA  EFE9  F034         	goto	u2910
  6999   0069CE                     u2911:
  7000   0069CE  EFEC  F034         	goto	l3152
  7001   0069D2                     u2910:
  7002   0069D2  90D8               	bcf	status,0,c
  7003   0069D4  EFED  F034         	goto	l839
  7004   0069D8                     l3152:
  7005   0069D8  80D8               	bsf	status,0,c
  7006   0069DA                     l839:
  7007   0069DA  0012               	return		;funcret
  7008   0069DC                     __end_of___flge:
  7009                           	callstack 0
  7010                           
  7011 ;; *************** function ___fladd *****************
  7012 ;; Defined at:
  7013 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\sprcadd.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;  b               4    0[COMRAM] void 
  7016 ;;  a               4    4[COMRAM] void 
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;  grs             1   15[COMRAM] unsigned char 
  7019 ;;  bexp            1   14[COMRAM] unsigned char 
  7020 ;;  aexp            1   13[COMRAM] unsigned char 
  7021 ;;  signs           1   12[COMRAM] unsigned char 
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  4    0[COMRAM] unsigned char 
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, status,0
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7031 ;;      Params:         8       0       0       0       0       0       0       0       0
  7032 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7033 ;;      Temps:          4       0       0       0       0       0       0       0       0
  7034 ;;      Totals:        16       0       0       0       0       0       0       0       0
  7035 ;;Total ram usage:       16 bytes
  7036 ;; Hardware stack levels used: 1
  7037 ;; This function calls:
  7038 ;;		Nothing
  7039 ;; This function is called by:
  7040 ;;		_dsWriteData
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text49
  7045   007218                     __ptext49:
  7046                           	callstack 0
  7047   007218                     ___fladd:
  7048                           	callstack 27
  7049   007218  5004               	movf	(___fladd@b+3)^0,w,c
  7050   00721A  0B80               	andlw	128
  7051   00721C  6E0D               	movwf	___fladd@signs^0,c
  7052   00721E  5004               	movf	(___fladd@b+3)^0,w,c
  7053   007220  2404               	addwf	(___fladd@b+3)^0,w,c
  7054   007222  6E0F               	movwf	___fladd@bexp^0,c
  7055   007224  AE03               	btfss	(___fladd@b+2)^0,7,c
  7056   007226  EF17  F039         	goto	u2481
  7057   00722A  EF19  F039         	goto	u2480
  7058   00722E                     u2481:
  7059   00722E  EF1A  F039         	goto	l2938
  7060   007232                     u2480:
  7061   007232  800F               	bsf	___fladd@bexp^0,0,c
  7062   007234                     l2938:
  7063   007234  500F               	movf	___fladd@bexp^0,w,c
  7064   007236  B4D8               	btfsc	status,2,c
  7065   007238  EF20  F039         	goto	u2491
  7066   00723C  EF22  F039         	goto	u2490
  7067   007240                     u2491:
  7068   007240  EF37  F039         	goto	l2948
  7069   007244                     u2490:
  7070   007244  280F               	incf	___fladd@bexp^0,w,c
  7071   007246  A4D8               	btfss	status,2,c
  7072   007248  EF28  F039         	goto	u2501
  7073   00724C  EF2A  F039         	goto	u2500
  7074   007250                     u2501:
  7075   007250  EF32  F039         	goto	l2944
  7076   007254                     u2500:
  7077   007254  0E00               	movlw	0
  7078   007256  6E01               	movwf	___fladd@b^0,c
  7079   007258  0E00               	movlw	0
  7080   00725A  6E02               	movwf	(___fladd@b+1)^0,c
  7081   00725C  0E00               	movlw	0
  7082   00725E  6E03               	movwf	(___fladd@b+2)^0,c
  7083   007260  0E00               	movlw	0
  7084   007262  6E04               	movwf	(___fladd@b+3)^0,c
  7085   007264                     l2944:
  7086   007264  8E03               	bsf	(___fladd@b+2)^0,7,c
  7087   007266  0E00               	movlw	0
  7088   007268  6E04               	movwf	(___fladd@b+3)^0,c
  7089   00726A  EF3F  F039         	goto	l2950
  7090   00726E                     l2948:
  7091   00726E  0E00               	movlw	0
  7092   007270  6E01               	movwf	___fladd@b^0,c
  7093   007272  0E00               	movlw	0
  7094   007274  6E02               	movwf	(___fladd@b+1)^0,c
  7095   007276  0E00               	movlw	0
  7096   007278  6E03               	movwf	(___fladd@b+2)^0,c
  7097   00727A  0E00               	movlw	0
  7098   00727C  6E04               	movwf	(___fladd@b+3)^0,c
  7099   00727E                     l2950:
  7100   00727E  5008               	movf	(___fladd@a+3)^0,w,c
  7101   007280  0B80               	andlw	128
  7102   007282  6E0E               	movwf	___fladd@aexp^0,c
  7103   007284  500D               	movf	___fladd@signs^0,w,c
  7104   007286  180E               	xorwf	___fladd@aexp^0,w,c
  7105   007288  B4D8               	btfsc	status,2,c
  7106   00728A  EF49  F039         	goto	u2511
  7107   00728E  EF4B  F039         	goto	u2510
  7108   007292                     u2511:
  7109   007292  EF4C  F039         	goto	l2956
  7110   007296                     u2510:
  7111   007296  8C0D               	bsf	___fladd@signs^0,6,c
  7112   007298                     l2956:
  7113   007298  5008               	movf	(___fladd@a+3)^0,w,c
  7114   00729A  2408               	addwf	(___fladd@a+3)^0,w,c
  7115   00729C  6E0E               	movwf	___fladd@aexp^0,c
  7116   00729E  AE07               	btfss	(___fladd@a+2)^0,7,c
  7117   0072A0  EF54  F039         	goto	u2521
  7118   0072A4  EF56  F039         	goto	u2520
  7119   0072A8                     u2521:
  7120   0072A8  EF57  F039         	goto	l2962
  7121   0072AC                     u2520:
  7122   0072AC  800E               	bsf	___fladd@aexp^0,0,c
  7123   0072AE                     l2962:
  7124   0072AE  500E               	movf	___fladd@aexp^0,w,c
  7125   0072B0  B4D8               	btfsc	status,2,c
  7126   0072B2  EF5D  F039         	goto	u2531
  7127   0072B6  EF5F  F039         	goto	u2530
  7128   0072BA                     u2531:
  7129   0072BA  EF74  F039         	goto	l2972
  7130   0072BE                     u2530:
  7131   0072BE  280E               	incf	___fladd@aexp^0,w,c
  7132   0072C0  A4D8               	btfss	status,2,c
  7133   0072C2  EF65  F039         	goto	u2541
  7134   0072C6  EF67  F039         	goto	u2540
  7135   0072CA                     u2541:
  7136   0072CA  EF6F  F039         	goto	l2968
  7137   0072CE                     u2540:
  7138   0072CE  0E00               	movlw	0
  7139   0072D0  6E05               	movwf	___fladd@a^0,c
  7140   0072D2  0E00               	movlw	0
  7141   0072D4  6E06               	movwf	(___fladd@a+1)^0,c
  7142   0072D6  0E00               	movlw	0
  7143   0072D8  6E07               	movwf	(___fladd@a+2)^0,c
  7144   0072DA  0E00               	movlw	0
  7145   0072DC  6E08               	movwf	(___fladd@a+3)^0,c
  7146   0072DE                     l2968:
  7147   0072DE  8E07               	bsf	(___fladd@a+2)^0,7,c
  7148   0072E0  0E00               	movlw	0
  7149   0072E2  6E08               	movwf	(___fladd@a+3)^0,c
  7150   0072E4  EF7C  F039         	goto	l2974
  7151   0072E8                     l2972:
  7152   0072E8  0E00               	movlw	0
  7153   0072EA  6E05               	movwf	___fladd@a^0,c
  7154   0072EC  0E00               	movlw	0
  7155   0072EE  6E06               	movwf	(___fladd@a+1)^0,c
  7156   0072F0  0E00               	movlw	0
  7157   0072F2  6E07               	movwf	(___fladd@a+2)^0,c
  7158   0072F4  0E00               	movlw	0
  7159   0072F6  6E08               	movwf	(___fladd@a+3)^0,c
  7160   0072F8                     l2974:
  7161   0072F8  500F               	movf	___fladd@bexp^0,w,c
  7162   0072FA  5C0E               	subwf	___fladd@aexp^0,w,c
  7163   0072FC  B0D8               	btfsc	status,0,c
  7164   0072FE  EF83  F039         	goto	u2551
  7165   007302  EF85  F039         	goto	u2550
  7166   007306                     u2551:
  7167   007306  EFAC  F039         	goto	l3010
  7168   00730A                     u2550:
  7169   00730A  AC0D               	btfss	___fladd@signs^0,6,c
  7170   00730C  EF8A  F039         	goto	u2561
  7171   007310  EF8C  F039         	goto	u2560
  7172   007314                     u2561:
  7173   007314  EF8E  F039         	goto	l2980
  7174   007318                     u2560:
  7175   007318  0E80               	movlw	128
  7176   00731A  1A0D               	xorwf	___fladd@signs^0,f,c
  7177   00731C                     l2980:
  7178   00731C  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  7179   007320  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  7180   007324  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  7181   007328  C001  F010         	movff	___fladd@b,___fladd@grs
  7182   00732C  C005  F001         	movff	___fladd@a,___fladd@b
  7183   007330  C010  F005         	movff	___fladd@grs,___fladd@a
  7184   007334  C002  F010         	movff	___fladd@b+1,___fladd@grs
  7185   007338  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  7186   00733C  C010  F006         	movff	___fladd@grs,___fladd@a+1
  7187   007340  C003  F010         	movff	___fladd@b+2,___fladd@grs
  7188   007344  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  7189   007348  C010  F007         	movff	___fladd@grs,___fladd@a+2
  7190   00734C  C004  F010         	movff	___fladd@b+3,___fladd@grs
  7191   007350  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  7192   007354  C010  F008         	movff	___fladd@grs,___fladd@a+3
  7193   007358                     l3010:
  7194   007358  0E00               	movlw	0
  7195   00735A  6E10               	movwf	___fladd@grs^0,c
  7196   00735C  500F               	movf	___fladd@bexp^0,w,c
  7197   00735E  C00E  F009         	movff	___fladd@aexp,??___fladd
  7198   007362  6A0A               	clrf	(??___fladd+1)^0,c
  7199   007364  5E09               	subwf	??___fladd^0,f,c
  7200   007366  0E00               	movlw	0
  7201   007368  5A0A               	subwfb	(??___fladd+1)^0,f,c
  7202   00736A  BE0A               	btfsc	(??___fladd+1)^0,7,c
  7203   00736C  EFC1  F039         	goto	u2571
  7204   007370  500A               	movf	(??___fladd+1)^0,w,c
  7205   007372  E109               	bnz	u2570
  7206   007374  0E1A               	movlw	26
  7207   007376  5C09               	subwf	??___fladd^0,w,c
  7208   007378  A0D8               	btfss	status,0,c
  7209   00737A  EFC1  F039         	goto	u2571
  7210   00737E  EFC3  F039         	goto	u2570
  7211   007382                     u2571:
  7212   007382  EFFA  F039         	goto	l1098
  7213   007386                     u2570:
  7214   007386  5001               	movf	___fladd@b^0,w,c
  7215   007388  1002               	iorwf	(___fladd@b+1)^0,w,c
  7216   00738A  1003               	iorwf	(___fladd@b+2)^0,w,c
  7217   00738C  1004               	iorwf	(___fladd@b+3)^0,w,c
  7218   00738E  A4D8               	btfss	status,2,c
  7219   007390  EFCC  F039         	goto	u2581
  7220   007394  EFCF  F039         	goto	u2580
  7221   007398                     u2581:
  7222   007398  0E01               	movlw	1
  7223   00739A  EFD0  F039         	goto	u2590
  7224   00739E                     u2580:
  7225   00739E  0E00               	movlw	0
  7226   0073A0                     u2590:
  7227   0073A0  6E10               	movwf	___fladd@grs^0,c
  7228   0073A2  0E00               	movlw	0
  7229   0073A4  6E01               	movwf	___fladd@b^0,c
  7230   0073A6  0E00               	movlw	0
  7231   0073A8  6E02               	movwf	(___fladd@b+1)^0,c
  7232   0073AA  0E00               	movlw	0
  7233   0073AC  6E03               	movwf	(___fladd@b+2)^0,c
  7234   0073AE  0E00               	movlw	0
  7235   0073B0  6E04               	movwf	(___fladd@b+3)^0,c
  7236   0073B2  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  7237   0073B6  EF03  F03A         	goto	l1097
  7238   0073BA                     l1099:
  7239   0073BA  A010               	btfss	___fladd@grs^0,0,c
  7240   0073BC  EFE2  F039         	goto	u2601
  7241   0073C0  EFE4  F039         	goto	u2600
  7242   0073C4                     u2601:
  7243   0073C4  EFEA  F039         	goto	l3022
  7244   0073C8                     u2600:
  7245   0073C8  90D8               	bcf	status,0,c
  7246   0073CA  3010               	rrcf	___fladd@grs^0,w,c
  7247   0073CC  0901               	iorlw	1
  7248   0073CE  6E10               	movwf	___fladd@grs^0,c
  7249   0073D0  EFEC  F039         	goto	l3024
  7250   0073D4                     l3022:
  7251   0073D4  90D8               	bcf	status,0,c
  7252   0073D6  3210               	rrcf	___fladd@grs^0,f,c
  7253   0073D8                     l3024:
  7254   0073D8  A001               	btfss	___fladd@b^0,0,c
  7255   0073DA  EFF1  F039         	goto	u2611
  7256   0073DE  EFF3  F039         	goto	u2610
  7257   0073E2                     u2611:
  7258   0073E2  EFF4  F039         	goto	l3028
  7259   0073E6                     u2610:
  7260   0073E6  8E10               	bsf	___fladd@grs^0,7,c
  7261   0073E8                     l3028:
  7262   0073E8  3404               	rlcf	(___fladd@b+3)^0,w,c
  7263   0073EA  3204               	rrcf	(___fladd@b+3)^0,f,c
  7264   0073EC  3203               	rrcf	(___fladd@b+2)^0,f,c
  7265   0073EE  3202               	rrcf	(___fladd@b+1)^0,f,c
  7266   0073F0  3201               	rrcf	___fladd@b^0,f,c
  7267   0073F2  2A0F               	incf	___fladd@bexp^0,f,c
  7268   0073F4                     l1098:
  7269   0073F4  500E               	movf	___fladd@aexp^0,w,c
  7270   0073F6  5C0F               	subwf	___fladd@bexp^0,w,c
  7271   0073F8  A0D8               	btfss	status,0,c
  7272   0073FA  EF01  F03A         	goto	u2621
  7273   0073FE  EF03  F03A         	goto	u2620
  7274   007402                     u2621:
  7275   007402  EFDD  F039         	goto	l1099
  7276   007406                     u2620:
  7277   007406                     l1097:
  7278   007406  BC0D               	btfsc	___fladd@signs^0,6,c
  7279   007408  EF08  F03A         	goto	u2631
  7280   00740C  EF0A  F03A         	goto	u2630
  7281   007410                     u2631:
  7282   007410  EF4A  F03A         	goto	l3056
  7283   007414                     u2630:
  7284   007414  500F               	movf	___fladd@bexp^0,w,c
  7285   007416  A4D8               	btfss	status,2,c
  7286   007418  EF10  F03A         	goto	u2641
  7287   00741C  EF12  F03A         	goto	u2640
  7288   007420                     u2641:
  7289   007420  EF1C  F03A         	goto	l3038
  7290   007424                     u2640:
  7291   007424  0E00               	movlw	0
  7292   007426  6E01               	movwf	?___fladd^0,c
  7293   007428  0E00               	movlw	0
  7294   00742A  6E02               	movwf	(?___fladd+1)^0,c
  7295   00742C  0E00               	movlw	0
  7296   00742E  6E03               	movwf	(?___fladd+2)^0,c
  7297   007430  0E00               	movlw	0
  7298   007432  6E04               	movwf	(?___fladd+3)^0,c
  7299   007434  EF6B  F03B         	goto	l1106
  7300   007438                     l3038:
  7301   007438  5005               	movf	___fladd@a^0,w,c
  7302   00743A  2601               	addwf	___fladd@b^0,f,c
  7303   00743C  5006               	movf	(___fladd@a+1)^0,w,c
  7304   00743E  2202               	addwfc	(___fladd@b+1)^0,f,c
  7305   007440  5007               	movf	(___fladd@a+2)^0,w,c
  7306   007442  2203               	addwfc	(___fladd@b+2)^0,f,c
  7307   007444  5008               	movf	(___fladd@a+3)^0,w,c
  7308   007446  2204               	addwfc	(___fladd@b+3)^0,f,c
  7309   007448  A004               	btfss	(___fladd@b+3)^0,0,c
  7310   00744A  EF29  F03A         	goto	u2651
  7311   00744E  EF2B  F03A         	goto	u2650
  7312   007452                     u2651:
  7313   007452  EFD7  F03A         	goto	l3092
  7314   007456                     u2650:
  7315   007456  A010               	btfss	___fladd@grs^0,0,c
  7316   007458  EF30  F03A         	goto	u2661
  7317   00745C  EF32  F03A         	goto	u2660
  7318   007460                     u2661:
  7319   007460  EF38  F03A         	goto	l3046
  7320   007464                     u2660:
  7321   007464  90D8               	bcf	status,0,c
  7322   007466  3010               	rrcf	___fladd@grs^0,w,c
  7323   007468  0901               	iorlw	1
  7324   00746A  6E10               	movwf	___fladd@grs^0,c
  7325   00746C  EF3A  F03A         	goto	l3048
  7326   007470                     l3046:
  7327   007470  90D8               	bcf	status,0,c
  7328   007472  3210               	rrcf	___fladd@grs^0,f,c
  7329   007474                     l3048:
  7330   007474  A001               	btfss	___fladd@b^0,0,c
  7331   007476  EF3F  F03A         	goto	u2671
  7332   00747A  EF41  F03A         	goto	u2670
  7333   00747E                     u2671:
  7334   00747E  EF42  F03A         	goto	l3052
  7335   007482                     u2670:
  7336   007482  8E10               	bsf	___fladd@grs^0,7,c
  7337   007484                     l3052:
  7338   007484  3404               	rlcf	(___fladd@b+3)^0,w,c
  7339   007486  3204               	rrcf	(___fladd@b+3)^0,f,c
  7340   007488  3203               	rrcf	(___fladd@b+2)^0,f,c
  7341   00748A  3202               	rrcf	(___fladd@b+1)^0,f,c
  7342   00748C  3201               	rrcf	___fladd@b^0,f,c
  7343   00748E  2A0F               	incf	___fladd@bexp^0,f,c
  7344   007490  EFD7  F03A         	goto	l3092
  7345   007494                     l3056:
  7346   007494  5005               	movf	___fladd@a^0,w,c
  7347   007496  5C01               	subwf	___fladd@b^0,w,c
  7348   007498  5006               	movf	(___fladd@a+1)^0,w,c
  7349   00749A  5802               	subwfb	(___fladd@b+1)^0,w,c
  7350   00749C  5007               	movf	(___fladd@a+2)^0,w,c
  7351   00749E  5803               	subwfb	(___fladd@b+2)^0,w,c
  7352   0074A0  5004               	movf	(___fladd@b+3)^0,w,c
  7353   0074A2  0A80               	xorlw	128
  7354   0074A4  6E09               	movwf	??___fladd^0,c
  7355   0074A6  5008               	movf	(___fladd@a+3)^0,w,c
  7356   0074A8  0A80               	xorlw	128
  7357   0074AA  5809               	subwfb	??___fladd^0,w,c
  7358   0074AC  B0D8               	btfsc	status,0,c
  7359   0074AE  EF5B  F03A         	goto	u2681
  7360   0074B2  EF5D  F03A         	goto	u2680
  7361   0074B6                     u2681:
  7362   0074B6  EF88  F03A         	goto	l3066
  7363   0074BA                     u2680:
  7364   0074BA  5001               	movf	___fladd@b^0,w,c
  7365   0074BC  5C05               	subwf	___fladd@a^0,w,c
  7366   0074BE  6E09               	movwf	??___fladd^0,c
  7367   0074C0  5002               	movf	(___fladd@b+1)^0,w,c
  7368   0074C2  5806               	subwfb	(___fladd@a+1)^0,w,c
  7369   0074C4  6E0A               	movwf	(??___fladd+1)^0,c
  7370   0074C6  5003               	movf	(___fladd@b+2)^0,w,c
  7371   0074C8  5807               	subwfb	(___fladd@a+2)^0,w,c
  7372   0074CA  6E0B               	movwf	(??___fladd+2)^0,c
  7373   0074CC  5004               	movf	(___fladd@b+3)^0,w,c
  7374   0074CE  5808               	subwfb	(___fladd@a+3)^0,w,c
  7375   0074D0  6E0C               	movwf	(??___fladd+3)^0,c
  7376   0074D2  0EFF               	movlw	255
  7377   0074D4  2409               	addwf	??___fladd^0,w,c
  7378   0074D6  6E01               	movwf	___fladd@b^0,c
  7379   0074D8  0EFF               	movlw	255
  7380   0074DA  200A               	addwfc	(??___fladd+1)^0,w,c
  7381   0074DC  6E02               	movwf	(___fladd@b+1)^0,c
  7382   0074DE  0EFF               	movlw	255
  7383   0074E0  200B               	addwfc	(??___fladd+2)^0,w,c
  7384   0074E2  6E03               	movwf	(___fladd@b+2)^0,c
  7385   0074E4  0EFF               	movlw	255
  7386   0074E6  200C               	addwfc	(??___fladd+3)^0,w,c
  7387   0074E8  6E04               	movwf	(___fladd@b+3)^0,c
  7388   0074EA  0E80               	movlw	128
  7389   0074EC  1A0D               	xorwf	___fladd@signs^0,f,c
  7390   0074EE  6C10               	negf	___fladd@grs^0,c
  7391   0074F0  5010               	movf	___fladd@grs^0,w,c
  7392   0074F2  A4D8               	btfss	status,2,c
  7393   0074F4  EF7E  F03A         	goto	u2691
  7394   0074F8  EF80  F03A         	goto	u2690
  7395   0074FC                     u2691:
  7396   0074FC  EF90  F03A         	goto	l1114
  7397   007500                     u2690:
  7398   007500  0E01               	movlw	1
  7399   007502  2601               	addwf	___fladd@b^0,f,c
  7400   007504  0E00               	movlw	0
  7401   007506  2202               	addwfc	(___fladd@b+1)^0,f,c
  7402   007508  2203               	addwfc	(___fladd@b+2)^0,f,c
  7403   00750A  2204               	addwfc	(___fladd@b+3)^0,f,c
  7404   00750C  EF90  F03A         	goto	l1114
  7405   007510                     l3066:
  7406   007510  5005               	movf	___fladd@a^0,w,c
  7407   007512  5E01               	subwf	___fladd@b^0,f,c
  7408   007514  5006               	movf	(___fladd@a+1)^0,w,c
  7409   007516  5A02               	subwfb	(___fladd@b+1)^0,f,c
  7410   007518  5007               	movf	(___fladd@a+2)^0,w,c
  7411   00751A  5A03               	subwfb	(___fladd@b+2)^0,f,c
  7412   00751C  5008               	movf	(___fladd@a+3)^0,w,c
  7413   00751E  5A04               	subwfb	(___fladd@b+3)^0,f,c
  7414   007520                     l1114:
  7415   007520  5001               	movf	___fladd@b^0,w,c
  7416   007522  1002               	iorwf	(___fladd@b+1)^0,w,c
  7417   007524  1003               	iorwf	(___fladd@b+2)^0,w,c
  7418   007526  1004               	iorwf	(___fladd@b+3)^0,w,c
  7419   007528  A4D8               	btfss	status,2,c
  7420   00752A  EF99  F03A         	goto	u2701
  7421   00752E  EF9B  F03A         	goto	u2700
  7422   007532                     u2701:
  7423   007532  EFD0  F03A         	goto	l3090
  7424   007536                     u2700:
  7425   007536  5010               	movf	___fladd@grs^0,w,c
  7426   007538  A4D8               	btfss	status,2,c
  7427   00753A  EFA1  F03A         	goto	u2711
  7428   00753E  EFA3  F03A         	goto	u2710
  7429   007542                     u2711:
  7430   007542  EFD0  F03A         	goto	l3090
  7431   007546                     u2710:
  7432   007546  0E00               	movlw	0
  7433   007548  6E01               	movwf	?___fladd^0,c
  7434   00754A  0E00               	movlw	0
  7435   00754C  6E02               	movwf	(?___fladd+1)^0,c
  7436   00754E  0E00               	movlw	0
  7437   007550  6E03               	movwf	(?___fladd+2)^0,c
  7438   007552  0E00               	movlw	0
  7439   007554  6E04               	movwf	(?___fladd+3)^0,c
  7440   007556  EF6B  F03B         	goto	l1106
  7441   00755A                     l3074:
  7442   00755A  90D8               	bcf	status,0,c
  7443   00755C  3601               	rlcf	___fladd@b^0,f,c
  7444   00755E  3602               	rlcf	(___fladd@b+1)^0,f,c
  7445   007560  3603               	rlcf	(___fladd@b+2)^0,f,c
  7446   007562  3604               	rlcf	(___fladd@b+3)^0,f,c
  7447   007564  AE10               	btfss	___fladd@grs^0,7,c
  7448   007566  EFB7  F03A         	goto	u2721
  7449   00756A  EFB9  F03A         	goto	u2720
  7450   00756E                     u2721:
  7451   00756E  EFBA  F03A         	goto	l3080
  7452   007572                     u2720:
  7453   007572  8001               	bsf	___fladd@b^0,0,c
  7454   007574                     l3080:
  7455   007574  A010               	btfss	___fladd@grs^0,0,c
  7456   007576  EFBF  F03A         	goto	u2731
  7457   00757A  EFC1  F03A         	goto	u2730
  7458   00757E                     u2731:
  7459   00757E  EFC5  F03A         	goto	l3084
  7460   007582                     u2730:
  7461   007582  80D8               	bsf	status,0,c
  7462   007584  3610               	rlcf	___fladd@grs^0,f,c
  7463   007586  EFC7  F03A         	goto	l3086
  7464   00758A                     l3084:
  7465   00758A  90D8               	bcf	status,0,c
  7466   00758C  3610               	rlcf	___fladd@grs^0,f,c
  7467   00758E                     l3086:
  7468   00758E  500F               	movf	___fladd@bexp^0,w,c
  7469   007590  B4D8               	btfsc	status,2,c
  7470   007592  EFCD  F03A         	goto	u2741
  7471   007596  EFCF  F03A         	goto	u2740
  7472   00759A                     u2741:
  7473   00759A  EFD0  F03A         	goto	l3090
  7474   00759E                     u2740:
  7475   00759E  060F               	decf	___fladd@bexp^0,f,c
  7476   0075A0                     l3090:
  7477   0075A0  AE03               	btfss	(___fladd@b+2)^0,7,c
  7478   0075A2  EFD5  F03A         	goto	u2751
  7479   0075A6  EFD7  F03A         	goto	u2750
  7480   0075AA                     u2751:
  7481   0075AA  EFAD  F03A         	goto	l3074
  7482   0075AE                     u2750:
  7483   0075AE                     l3092:
  7484   0075AE  0E00               	movlw	0
  7485   0075B0  6E0E               	movwf	___fladd@aexp^0,c
  7486   0075B2  AE10               	btfss	___fladd@grs^0,7,c
  7487   0075B4  EFDE  F03A         	goto	u2761
  7488   0075B8  EFE0  F03A         	goto	u2760
  7489   0075BC                     u2761:
  7490   0075BC  EFF8  F03A         	goto	l1123
  7491   0075C0                     u2760:
  7492   0075C0  C010  F009         	movff	___fladd@grs,??___fladd
  7493   0075C4  0E7F               	movlw	127
  7494   0075C6  1609               	andwf	??___fladd^0,f,c
  7495   0075C8  B4D8               	btfsc	status,2,c
  7496   0075CA  EFE9  F03A         	goto	u2771
  7497   0075CE  EFEB  F03A         	goto	u2770
  7498   0075D2                     u2771:
  7499   0075D2  EFEF  F03A         	goto	l1124
  7500   0075D6                     u2770:
  7501   0075D6                     l3098:
  7502   0075D6  0E01               	movlw	1
  7503   0075D8  6E0E               	movwf	___fladd@aexp^0,c
  7504   0075DA  EFF8  F03A         	goto	l1123
  7505   0075DE                     l1124:
  7506   0075DE  A001               	btfss	___fladd@b^0,0,c
  7507   0075E0  EFF4  F03A         	goto	u2781
  7508   0075E4  EFF6  F03A         	goto	u2780
  7509   0075E8                     u2781:
  7510   0075E8  EFF8  F03A         	goto	l1123
  7511   0075EC                     u2780:
  7512   0075EC  EFEB  F03A         	goto	l3098
  7513   0075F0                     l1123:
  7514   0075F0  500E               	movf	___fladd@aexp^0,w,c
  7515   0075F2  B4D8               	btfsc	status,2,c
  7516   0075F4  EFFE  F03A         	goto	u2791
  7517   0075F8  EF00  F03B         	goto	u2790
  7518   0075FC                     u2791:
  7519   0075FC  EF2B  F03B         	goto	l3110
  7520   007600                     u2790:
  7521   007600  0E01               	movlw	1
  7522   007602  2601               	addwf	___fladd@b^0,f,c
  7523   007604  0E00               	movlw	0
  7524   007606  2202               	addwfc	(___fladd@b+1)^0,f,c
  7525   007608  2203               	addwfc	(___fladd@b+2)^0,f,c
  7526   00760A  2204               	addwfc	(___fladd@b+3)^0,f,c
  7527   00760C  A004               	btfss	(___fladd@b+3)^0,0,c
  7528   00760E  EF0B  F03B         	goto	u2801
  7529   007612  EF0D  F03B         	goto	u2800
  7530   007616                     u2801:
  7531   007616  EF2B  F03B         	goto	l3110
  7532   00761A                     u2800:
  7533   00761A  C001  F009         	movff	___fladd@b,??___fladd
  7534   00761E  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  7535   007622  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  7536   007626  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  7537   00762A  340C               	rlcf	(??___fladd+3)^0,w,c
  7538   00762C  320C               	rrcf	(??___fladd+3)^0,f,c
  7539   00762E  320B               	rrcf	(??___fladd+2)^0,f,c
  7540   007630  320A               	rrcf	(??___fladd+1)^0,f,c
  7541   007632  3209               	rrcf	??___fladd^0,f,c
  7542   007634  C009  F001         	movff	??___fladd,___fladd@b
  7543   007638  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  7544   00763C  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  7545   007640  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  7546   007644  280F               	incf	___fladd@bexp^0,w,c
  7547   007646  B4D8               	btfsc	status,2,c
  7548   007648  EF28  F03B         	goto	u2811
  7549   00764C  EF2A  F03B         	goto	u2810
  7550   007650                     u2811:
  7551   007650  EF2B  F03B         	goto	l3110
  7552   007654                     u2810:
  7553   007654  2A0F               	incf	___fladd@bexp^0,f,c
  7554   007656                     l3110:
  7555   007656  280F               	incf	___fladd@bexp^0,w,c
  7556   007658  B4D8               	btfsc	status,2,c
  7557   00765A  EF31  F03B         	goto	u2821
  7558   00765E  EF33  F03B         	goto	u2820
  7559   007662                     u2821:
  7560   007662  EF3B  F03B         	goto	l3114
  7561   007666                     u2820:
  7562   007666  500F               	movf	___fladd@bexp^0,w,c
  7563   007668  A4D8               	btfss	status,2,c
  7564   00766A  EF39  F03B         	goto	u2831
  7565   00766E  EF3B  F03B         	goto	u2830
  7566   007672                     u2831:
  7567   007672  EF4D  F03B         	goto	l3118
  7568   007676                     u2830:
  7569   007676                     l3114:
  7570   007676  0E00               	movlw	0
  7571   007678  6E01               	movwf	___fladd@b^0,c
  7572   00767A  0E00               	movlw	0
  7573   00767C  6E02               	movwf	(___fladd@b+1)^0,c
  7574   00767E  0E00               	movlw	0
  7575   007680  6E03               	movwf	(___fladd@b+2)^0,c
  7576   007682  0E00               	movlw	0
  7577   007684  6E04               	movwf	(___fladd@b+3)^0,c
  7578   007686  500F               	movf	___fladd@bexp^0,w,c
  7579   007688  A4D8               	btfss	status,2,c
  7580   00768A  EF49  F03B         	goto	u2841
  7581   00768E  EF4B  F03B         	goto	u2840
  7582   007692                     u2841:
  7583   007692  EF4D  F03B         	goto	l3118
  7584   007696                     u2840:
  7585   007696  0E00               	movlw	0
  7586   007698  6E0D               	movwf	___fladd@signs^0,c
  7587   00769A                     l3118:
  7588   00769A  A00F               	btfss	___fladd@bexp^0,0,c
  7589   00769C  EF52  F03B         	goto	u2851
  7590   0076A0  EF54  F03B         	goto	u2850
  7591   0076A4                     u2851:
  7592   0076A4  EF57  F03B         	goto	l3122
  7593   0076A8                     u2850:
  7594   0076A8  8E03               	bsf	(___fladd@b+2)^0,7,c
  7595   0076AA  EF58  F03B         	goto	l3124
  7596   0076AE                     l3122:
  7597   0076AE  9E03               	bcf	(___fladd@b+2)^0,7,c
  7598   0076B0                     l3124:
  7599   0076B0  90D8               	bcf	status,0,c
  7600   0076B2  300F               	rrcf	___fladd@bexp^0,w,c
  7601   0076B4  6E04               	movwf	(___fladd@b+3)^0,c
  7602   0076B6  AE0D               	btfss	___fladd@signs^0,7,c
  7603   0076B8  EF60  F03B         	goto	u2861
  7604   0076BC  EF62  F03B         	goto	u2860
  7605   0076C0                     u2861:
  7606   0076C0  EF63  F03B         	goto	l3130
  7607   0076C4                     u2860:
  7608   0076C4  8E04               	bsf	(___fladd@b+3)^0,7,c
  7609   0076C6                     l3130:
  7610   0076C6  C001  F001         	movff	___fladd@b,?___fladd
  7611   0076CA  C002  F002         	movff	___fladd@b+1,?___fladd+1
  7612   0076CE  C003  F003         	movff	___fladd@b+2,?___fladd+2
  7613   0076D2  C004  F004         	movff	___fladd@b+3,?___fladd+3
  7614   0076D6                     l1106:
  7615   0076D6  0012               	return		;funcret
  7616   0076D8                     __end_of___fladd:
  7617                           	callstack 0
  7618                           
  7619 ;; *************** function _serialRead *****************
  7620 ;; Defined at:
  7621 ;;		line 41 in file "serial.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;		None
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  resp            1    0[COMRAM] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      unsigned char 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0
  7636 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7638 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7639 ;;Total ram usage:        1 bytes
  7640 ;; Hardware stack levels used: 1
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_eventRead
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text50
  7649   005A40                     __ptext50:
  7650                           	callstack 0
  7651   005A40                     _serialRead:
  7652                           	callstack 28
  7653   005A40                     
  7654                           ;serial.c: 43:     char resp = 0;
  7655   005A40  0E00               	movlw	0
  7656   005A42  6E01               	movwf	serialRead@resp^0,c
  7657   005A44                     
  7658                           ;serial.c: 45:     if ((((*(volatile __near unsigned char*)0xFAB)) & (1<<(1))))
  7659   005A44  A2AB               	btfss	171,1,c	;volatile
  7660   005A46  EF27  F02D         	goto	u3121
  7661   005A4A  EF29  F02D         	goto	u3120
  7662   005A4E                     u3121:
  7663   005A4E  EF2D  F02D         	goto	l3304
  7664   005A52                     u3120:
  7665   005A52                     
  7666                           ;serial.c: 46:     {;serial.c: 47:         (((*(volatile __near unsigned char*)0xFAB)) =
      +                           ((*(volatile __near unsigned char*)0xFAB)) & (~(1<<(4))));
  7667   005A52  50AB               	movf	171,w,c	;volatile
  7668   005A54  0BEF               	andlw	239
  7669   005A56  6EAB               	movwf	171,c	;volatile
  7670   005A58                     
  7671                           ;serial.c: 48:         (((*(volatile __near unsigned char*)0xFAB)) |= (1<<(4)));
  7672   005A58  88AB               	bsf	171,4,c	;volatile
  7673   005A5A                     l3304:
  7674                           
  7675                           ;serial.c: 51:     if ((((*(volatile __near unsigned char*)0xF9E)) & (1<<(5))))
  7676   005A5A  AA9E               	btfss	158,5,c	;volatile
  7677   005A5C  EF32  F02D         	goto	u3131
  7678   005A60  EF34  F02D         	goto	u3130
  7679   005A64                     u3131:
  7680   005A64  EF36  F02D         	goto	l3308
  7681   005A68                     u3130:
  7682   005A68                     
  7683                           ;serial.c: 52:     {;serial.c: 53:         resp = (*(volatile __near unsigned char*)0xFA
      +                          E);
  7684   005A68  CFAE F001          	movff	4014,serialRead@resp	;volatile
  7685   005A6C                     l3308:
  7686                           
  7687                           ;serial.c: 55:     return resp;
  7688   005A6C  5001               	movf	serialRead@resp^0,w,c
  7689   005A6E  0012               	return		;funcret
  7690   005A70                     __end_of_serialRead:
  7691                           	callstack 0
  7692                           
  7693 ;; *************** function _butRead *****************
  7694 ;; Defined at:
  7695 ;;		line 15 in file "button.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  num             1    wreg     unsigned char 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  num             1   22[COMRAM] unsigned char 
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  1    wreg      unsigned char 
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0, cstack
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7709 ;;      Params:         0       0       0       0       0       0       0       0       0
  7710 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7711 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7712 ;;      Totals:         3       0       0       0       0       0       0       0       0
  7713 ;;Total ram usage:        3 bytes
  7714 ;; Hardware stack levels used: 1
  7715 ;; Hardware stack levels required when called: 2
  7716 ;; This function calls:
  7717 ;;		_delay_ms
  7718 ;; This function is called by:
  7719 ;;		_eventRead
  7720 ;; This function uses a non-reentrant model
  7721 ;;
  7722                           
  7723                           	psect	text51
  7724   006264                     __ptext51:
  7725                           	callstack 0
  7726   006264                     _butRead:
  7727                           	callstack 26
  7728                           
  7729                           ;incstack = 0
  7730                           ;butRead@num stored from wreg
  7731   006264  6E17               	movwf	butRead@num^0,c
  7732   006266                     
  7733                           ;button.c: 19:     if (num < 3) {
  7734   006266  0E03               	movlw	3
  7735   006268  6017               	cpfslt	butRead@num^0,c
  7736   00626A  EF39  F031         	goto	u3161
  7737   00626E  EF3B  F031         	goto	u3160
  7738   006272                     u3161:
  7739   006272  EF6B  F031         	goto	l3344
  7740   006276                     u3160:
  7741   006276                     
  7742                           ;button.c: 20:         if ((((*(volatile __near unsigned char*)0xF82)) & (1<<(num)))) {
  7743   006276  C017  F015         	movff	butRead@num,??_butRead
  7744   00627A  0E01               	movlw	1
  7745   00627C  6E16               	movwf	(??_butRead+1)^0,c
  7746   00627E  2A15               	incf	??_butRead^0,f,c
  7747   006280  EF44  F031         	goto	u3174
  7748   006284                     u3175:
  7749   006284  90D8               	bcf	status,0,c
  7750   006286  3616               	rlcf	(??_butRead+1)^0,f,c
  7751   006288                     u3174:
  7752   006288  2E15               	decfsz	??_butRead^0,f,c
  7753   00628A  EF42  F031         	goto	u3175
  7754   00628E  5016               	movf	(??_butRead+1)^0,w,c
  7755   006290  1482               	andwf	130,w,c	;volatile
  7756   006292  0900               	iorlw	0
  7757   006294  B4D8               	btfsc	status,2,c
  7758   006296  EF4F  F031         	goto	u3181
  7759   00629A  EF51  F031         	goto	u3180
  7760   00629E                     u3181:
  7761   00629E  EF5E  F031         	goto	l3338
  7762   0062A2                     u3180:
  7763   0062A2                     l3330:
  7764                           
  7765                           ;button.c: 21:             delay_ms(75);
  7766   0062A2  0E4B               	movlw	75
  7767   0062A4  6E0B               	movwf	delay_ms@ms^0,c
  7768   0062A6  0E00               	movlw	0
  7769   0062A8  6E0C               	movwf	(delay_ms@ms+1)^0,c
  7770   0062AA  0E00               	movlw	0
  7771   0062AC  6E0D               	movwf	(delay_ms@ms+2)^0,c
  7772   0062AE  0E00               	movlw	0
  7773   0062B0  6E0E               	movwf	(delay_ms@ms+3)^0,c
  7774   0062B2  ECF8  F02E         	call	_delay_ms	;wreg free
  7775   0062B6                     
  7776                           ;button.c: 22:             return 1;
  7777   0062B6  0E01               	movlw	1
  7778   0062B8  EF85  F031         	goto	l59
  7779   0062BC                     l3338:
  7780                           
  7781                           ;button.c: 24:             delay_ms(75);
  7782   0062BC  0E4B               	movlw	75
  7783   0062BE  6E0B               	movwf	delay_ms@ms^0,c
  7784   0062C0  0E00               	movlw	0
  7785   0062C2  6E0C               	movwf	(delay_ms@ms+1)^0,c
  7786   0062C4  0E00               	movlw	0
  7787   0062C6  6E0D               	movwf	(delay_ms@ms+2)^0,c
  7788   0062C8  0E00               	movlw	0
  7789   0062CA  6E0E               	movwf	(delay_ms@ms+3)^0,c
  7790   0062CC  ECF8  F02E         	call	_delay_ms	;wreg free
  7791   0062D0                     
  7792                           ;button.c: 25:             return 0;
  7793   0062D0  0E00               	movlw	0
  7794   0062D2  EF85  F031         	goto	l59
  7795   0062D6                     l3344:
  7796                           
  7797                           ;button.c: 28:         if ((((*(volatile __near unsigned char*)0xF83)) & (1<<((num + 1))
      +                          ))) {
  7798   0062D6  C017  F015         	movff	butRead@num,??_butRead
  7799   0062DA  0E01               	movlw	1
  7800   0062DC  2615               	addwf	??_butRead^0,f,c
  7801   0062DE  0E01               	movlw	1
  7802   0062E0  6E16               	movwf	(??_butRead+1)^0,c
  7803   0062E2  2A15               	incf	??_butRead^0,f,c
  7804   0062E4  EF76  F031         	goto	u3194
  7805   0062E8                     u3195:
  7806   0062E8  90D8               	bcf	status,0,c
  7807   0062EA  3616               	rlcf	(??_butRead+1)^0,f,c
  7808   0062EC                     u3194:
  7809   0062EC  2E15               	decfsz	??_butRead^0,f,c
  7810   0062EE  EF74  F031         	goto	u3195
  7811   0062F2  5016               	movf	(??_butRead+1)^0,w,c
  7812   0062F4  1483               	andwf	131,w,c	;volatile
  7813   0062F6  0900               	iorlw	0
  7814   0062F8  B4D8               	btfsc	status,2,c
  7815   0062FA  EF81  F031         	goto	u3201
  7816   0062FE  EF83  F031         	goto	u3200
  7817   006302                     u3201:
  7818   006302  EF5E  F031         	goto	l3338
  7819   006306                     u3200:
  7820   006306  EF51  F031         	goto	l3330
  7821   00630A                     l59:
  7822   00630A  0012               	return		;funcret
  7823   00630C                     __end_of_butRead:
  7824                           	callstack 0
  7825                           
  7826 ;; *************** function _smInit *****************
  7827 ;; Defined at:
  7828 ;;		line 11 in file "stateMachine.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;		None
  7833 ;; Return value:  Size  Location     Type
  7834 ;;                  1    wreg      void 
  7835 ;; Registers used:
  7836 ;;		wreg, status,2, status,0, cstack
  7837 ;; Tracked objects:
  7838 ;;		On entry : 0/0
  7839 ;;		On exit  : 0/0
  7840 ;;		Unchanged: 0/0
  7841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7842 ;;      Params:         0       0       0       0       0       0       0       0       0
  7843 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7845 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7846 ;;Total ram usage:        0 bytes
  7847 ;; Hardware stack levels used: 1
  7848 ;; Hardware stack levels required when called: 1
  7849 ;; This function calls:
  7850 ;;		_adcInit
  7851 ;;		_ledInit
  7852 ;;		_setState
  7853 ;; This function is called by:
  7854 ;;		_main
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           	psect	text52
  7859   0058B2                     __ptext52:
  7860                           	callstack 0
  7861   0058B2                     _smInit:
  7862                           	callstack 29
  7863   0058B2                     
  7864                           ;stateMachine.c: 13:     setState(STATE_TEMPO);
  7865   0058B2  0E04               	movlw	4
  7866   0058B4  EC29  F02C         	call	_setState
  7867   0058B8                     
  7868                           ;stateMachine.c: 14:     adcInit();
  7869   0058B8  EC7B  F02C         	call	_adcInit	;wreg free
  7870   0058BC                     
  7871                           ;stateMachine.c: 15:     ledInit();
  7872   0058BC  ECD4  F02C         	call	_ledInit	;wreg free
  7873   0058C0  0012               	return		;funcret
  7874   0058C2                     __end_of_smInit:
  7875                           	callstack 0
  7876                           
  7877 ;; *************** function _setState *****************
  7878 ;; Defined at:
  7879 ;;		line 24 in file "var.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;  newState        1    wreg     unsigned char 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  newState        1    0[COMRAM] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0
  7894 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7896 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7897 ;;Total ram usage:        1 bytes
  7898 ;; Hardware stack levels used: 1
  7899 ;; This function calls:
  7900 ;;		Nothing
  7901 ;; This function is called by:
  7902 ;;		_smInit
  7903 ;;		_smLoop
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text53
  7908   005852                     __ptext53:
  7909                           	callstack 0
  7910   005852                     _setState:
  7911                           	callstack 29
  7912                           
  7913                           ;incstack = 0
  7914                           ;setState@newState stored from wreg
  7915   005852  6E01               	movwf	setState@newState^0,c
  7916   005854                     
  7917                           ;var.c: 25:     state = newState;
  7918   005854  C001  F04B         	movff	setState@newState,_state
  7919   005858  0012               	return		;funcret
  7920   00585A                     __end_of_setState:
  7921                           	callstack 0
  7922                           
  7923 ;; *************** function _ledInit *****************
  7924 ;; Defined at:
  7925 ;;		line 7 in file "led.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;		None
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;		None
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      void 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, status,0
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7939 ;;      Params:         0       0       0       0       0       0       0       0       0
  7940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7942 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7943 ;;Total ram usage:        0 bytes
  7944 ;; Hardware stack levels used: 1
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_smInit
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text54
  7953   0059A8                     __ptext54:
  7954                           	callstack 0
  7955   0059A8                     _ledInit:
  7956                           	callstack 29
  7957   0059A8                     
  7958                           ;led.c: 10:   (((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(4))));
  7959   0059A8  5093               	movf	147,w,c	;volatile
  7960   0059AA  0BEF               	andlw	239
  7961   0059AC  6E93               	movwf	147,c	;volatile
  7962                           
  7963                           ;led.c: 11:   (((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(5))));
  7964   0059AE  5093               	movf	147,w,c	;volatile
  7965   0059B0  0BDF               	andlw	223
  7966   0059B2  6E93               	movwf	147,c	;volatile
  7967                           
  7968                           ;led.c: 12:   (((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(6))));
  7969   0059B4  5093               	movf	147,w,c	;volatile
  7970   0059B6  0BBF               	andlw	191
  7971   0059B8  6E93               	movwf	147,c	;volatile
  7972                           
  7973                           ;led.c: 13:   (((*(volatile __near unsigned char*)0xF93)) = ((*(volatile __near unsigned
      +                           char*)0xF93)) & (~(1<<(7))));
  7974   0059BA  5093               	movf	147,w,c	;volatile
  7975   0059BC  0B7F               	andlw	127
  7976   0059BE  6E93               	movwf	147,c	;volatile
  7977   0059C0                     
  7978                           ;led.c: 15:   (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  7979   0059C0  0E0E               	movlw	14
  7980   0059C2  6EC1               	movwf	193,c	;volatile
  7981   0059C4  0012               	return		;funcret
  7982   0059C6                     __end_of_ledInit:
  7983                           	callstack 0
  7984                           
  7985 ;; *************** function _adcInit *****************
  7986 ;; Defined at:
  7987 ;;		line 24 in file "adc.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;		None
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      void 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0
  8002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8005 ;;Total ram usage:        0 bytes
  8006 ;; Hardware stack levels used: 1
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_smInit
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text55
  8015   0058F6                     __ptext55:
  8016                           	callstack 0
  8017   0058F6                     _adcInit:
  8018                           	callstack 29
  8019   0058F6                     
  8020                           ;adc.c: 26:  (((*(volatile __near unsigned char*)0xF92)) |= (1<<(0)));
  8021   0058F6  8092               	bsf	146,0,c	;volatile
  8022                           
  8023                           ;adc.c: 27:     (((*(volatile __near unsigned char*)0xF92)) |= (1<<(1)));
  8024   0058F8  8292               	bsf	146,1,c	;volatile
  8025                           
  8026                           ;adc.c: 28:     (((*(volatile __near unsigned char*)0xF92)) |= (1<<(2)));
  8027   0058FA  8492               	bsf	146,2,c	;volatile
  8028   0058FC                     
  8029                           ;adc.c: 29:     (*(volatile __near unsigned char*)0xFC2) = 0b00000001;
  8030   0058FC  0E01               	movlw	1
  8031   0058FE  6EC2               	movwf	194,c	;volatile
  8032   005900                     
  8033                           ;adc.c: 30:  (*(volatile __near unsigned char*)0xFC1) = 0b00001100;
  8034   005900  0E0C               	movlw	12
  8035   005902  6EC1               	movwf	193,c	;volatile
  8036   005904                     
  8037                           ;adc.c: 31:  (*(volatile __near unsigned char*)0xFC0) = 0b10101010;
  8038   005904  0EAA               	movlw	170
  8039   005906  6EC0               	movwf	192,c	;volatile
  8040   005908  0012               	return		;funcret
  8041   00590A                     __end_of_adcInit:
  8042                           	callstack 0
  8043                           
  8044 ;; *************** function _outputInit *****************
  8045 ;; Defined at:
  8046 ;;		line 22 in file "output.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;		None
  8049 ;; Auto vars:     Size  Location     Type
  8050 ;;		None
  8051 ;; Return value:  Size  Location     Type
  8052 ;;                  1    wreg      void 
  8053 ;; Registers used:
  8054 ;;		wreg, status,2, status,0, cstack
  8055 ;; Tracked objects:
  8056 ;;		On entry : 0/0
  8057 ;;		On exit  : 0/0
  8058 ;;		Unchanged: 0/0
  8059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8060 ;;      Params:         0       0       0       0       0       0       0       0       0
  8061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8063 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8064 ;;Total ram usage:        0 bytes
  8065 ;; Hardware stack levels used: 1
  8066 ;; Hardware stack levels required when called: 4
  8067 ;; This function calls:
  8068 ;;		_lcdInit
  8069 ;;		_serialInit
  8070 ;; This function is called by:
  8071 ;;		_main
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           	psect	text56
  8076   00586C                     __ptext56:
  8077                           	callstack 0
  8078   00586C                     _outputInit:
  8079                           	callstack 26
  8080   00586C                     
  8081                           ;output.c: 24:     lcdInit();
  8082   00586C  ECDE  F031         	call	_lcdInit	;wreg free
  8083                           
  8084                           ;output.c: 25:     serialInit();
  8085   005870  ECC7  F02C         	call	_serialInit	;wreg free
  8086   005874  0012               	return		;funcret
  8087   005876                     __end_of_outputInit:
  8088                           	callstack 0
  8089                           
  8090 ;; *************** function _lcdInit *****************
  8091 ;; Defined at:
  8092 ;;		line 27 in file "lcd.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;		None
  8097 ;; Return value:  Size  Location     Type
  8098 ;;                  1    wreg      void 
  8099 ;; Registers used:
  8100 ;;		wreg, status,2, status,0, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0
  8107 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8109 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8110 ;;Total ram usage:        0 bytes
  8111 ;; Hardware stack levels used: 1
  8112 ;; Hardware stack levels required when called: 3
  8113 ;; This function calls:
  8114 ;;		_delay_ms
  8115 ;;		_lcdCommand
  8116 ;;		_lcdCommand4
  8117 ;; This function is called by:
  8118 ;;		_outputInit
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text57
  8123   0063BC                     __ptext57:
  8124                           	callstack 0
  8125   0063BC                     _lcdInit:
  8126                           	callstack 26
  8127   0063BC                     
  8128                           ;lcd.c: 29:     (((*(volatile __near unsigned char*)0xF96)) = ((*(volatile __near unsign
      +                          ed char*)0xF96)) & (~(1<<(1))));
  8129   0063BC  5096               	movf	150,w,c	;volatile
  8130   0063BE  0BFD               	andlw	253
  8131   0063C0  6E96               	movwf	150,c	;volatile
  8132                           
  8133                           ;lcd.c: 30:     (((*(volatile __near unsigned char*)0xF96)) = ((*(volatile __near unsign
      +                          ed char*)0xF96)) & (~(1<<(0))));
  8134   0063C2  5096               	movf	150,w,c	;volatile
  8135   0063C4  0BFE               	andlw	254
  8136   0063C6  6E96               	movwf	150,c	;volatile
  8137                           
  8138                           ;lcd.c: 33:     (((*(volatile __near unsigned char*)0xF95)) = ((*(volatile __near unsign
      +                          ed char*)0xF95)) & (~(1<<(0))));
  8139   0063C8  5095               	movf	149,w,c	;volatile
  8140   0063CA  0BFE               	andlw	254
  8141   0063CC  6E95               	movwf	149,c	;volatile
  8142                           
  8143                           ;lcd.c: 34:     (((*(volatile __near unsigned char*)0xF95)) = ((*(volatile __near unsign
      +                          ed char*)0xF95)) & (~(1<<(1))));
  8144   0063CE  5095               	movf	149,w,c	;volatile
  8145   0063D0  0BFD               	andlw	253
  8146   0063D2  6E95               	movwf	149,c	;volatile
  8147                           
  8148                           ;lcd.c: 35:     (((*(volatile __near unsigned char*)0xF95)) = ((*(volatile __near unsign
      +                          ed char*)0xF95)) & (~(1<<(2))));
  8149   0063D4  5095               	movf	149,w,c	;volatile
  8150   0063D6  0BFB               	andlw	251
  8151   0063D8  6E95               	movwf	149,c	;volatile
  8152                           
  8153                           ;lcd.c: 36:     (((*(volatile __near unsigned char*)0xF95)) = ((*(volatile __near unsign
      +                          ed char*)0xF95)) & (~(1<<(3))));
  8154   0063DA  5095               	movf	149,w,c	;volatile
  8155   0063DC  0BF7               	andlw	247
  8156   0063DE  6E95               	movwf	149,c	;volatile
  8157   0063E0                     
  8158                           ;lcd.c: 37:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  8159   0063E0  0E0E               	movlw	14
  8160   0063E2  6EC1               	movwf	193,c	;volatile
  8161   0063E4                     
  8162                           ;lcd.c: 40:     delay_ms(15);
  8163   0063E4  0E0F               	movlw	15
  8164   0063E6  6E0B               	movwf	delay_ms@ms^0,c
  8165   0063E8  0E00               	movlw	0
  8166   0063EA  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8167   0063EC  0E00               	movlw	0
  8168   0063EE  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8169   0063F0  0E00               	movlw	0
  8170   0063F2  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8171   0063F4  ECF8  F02E         	call	_delay_ms	;wreg free
  8172   0063F8                     
  8173                           ;lcd.c: 42:     lcdCommand4(0x30);
  8174   0063F8  0E30               	movlw	48
  8175   0063FA  ECBC  F030         	call	_lcdCommand4
  8176   0063FE                     
  8177                           ;lcd.c: 43:     delay_ms(2);
  8178   0063FE  0E02               	movlw	2
  8179   006400  6E0B               	movwf	delay_ms@ms^0,c
  8180   006402  0E00               	movlw	0
  8181   006404  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8182   006406  0E00               	movlw	0
  8183   006408  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8184   00640A  0E00               	movlw	0
  8185   00640C  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8186   00640E  ECF8  F02E         	call	_delay_ms	;wreg free
  8187   006412                     
  8188                           ;lcd.c: 45:     lcdCommand4(0x30);
  8189   006412  0E30               	movlw	48
  8190   006414  ECBC  F030         	call	_lcdCommand4
  8191   006418                     
  8192                           ;lcd.c: 46:     delay_ms(2);
  8193   006418  0E02               	movlw	2
  8194   00641A  6E0B               	movwf	delay_ms@ms^0,c
  8195   00641C  0E00               	movlw	0
  8196   00641E  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8197   006420  0E00               	movlw	0
  8198   006422  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8199   006424  0E00               	movlw	0
  8200   006426  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8201   006428  ECF8  F02E         	call	_delay_ms	;wreg free
  8202   00642C                     
  8203                           ;lcd.c: 48:     lcdCommand4(0x30);
  8204   00642C  0E30               	movlw	48
  8205   00642E  ECBC  F030         	call	_lcdCommand4
  8206   006432                     
  8207                           ;lcd.c: 49:     delay_ms(2);
  8208   006432  0E02               	movlw	2
  8209   006434  6E0B               	movwf	delay_ms@ms^0,c
  8210   006436  0E00               	movlw	0
  8211   006438  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8212   00643A  0E00               	movlw	0
  8213   00643C  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8214   00643E  0E00               	movlw	0
  8215   006440  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8216   006442  ECF8  F02E         	call	_delay_ms	;wreg free
  8217   006446                     
  8218                           ;lcd.c: 51:     lcdCommand4(0x20);
  8219   006446  0E20               	movlw	32
  8220   006448  ECBC  F030         	call	_lcdCommand4
  8221   00644C                     
  8222                           ;lcd.c: 52:     delay_ms(2);
  8223   00644C  0E02               	movlw	2
  8224   00644E  6E0B               	movwf	delay_ms@ms^0,c
  8225   006450  0E00               	movlw	0
  8226   006452  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8227   006454  0E00               	movlw	0
  8228   006456  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8229   006458  0E00               	movlw	0
  8230   00645A  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8231   00645C  ECF8  F02E         	call	_delay_ms	;wreg free
  8232   006460                     
  8233                           ;lcd.c: 55:     lcdCommand(0x28);
  8234   006460  0E28               	movlw	40
  8235   006462  EC26  F02F         	call	_lcdCommand
  8236   006466                     
  8237                           ;lcd.c: 56:     lcdCommand(0x01);
  8238   006466  0E01               	movlw	1
  8239   006468  EC26  F02F         	call	_lcdCommand
  8240   00646C                     
  8241                           ;lcd.c: 57:     lcdCommand(0x06);
  8242   00646C  0E06               	movlw	6
  8243   00646E  EC26  F02F         	call	_lcdCommand
  8244   006472                     
  8245                           ;lcd.c: 58:     lcdCommand(0x0F);
  8246   006472  0E0F               	movlw	15
  8247   006474  EC26  F02F         	call	_lcdCommand
  8248   006478  0012               	return		;funcret
  8249   00647A                     __end_of_lcdInit:
  8250                           	callstack 0
  8251                           
  8252 ;; *************** function _lcdCommand *****************
  8253 ;; Defined at:
  8254 ;;		line 131 in file "lcd.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  cmd             1    wreg     unsigned char 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  cmd             1   20[COMRAM] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  1    wreg      void 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0, cstack
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8268 ;;      Params:         0       0       0       0       0       0       0       0       0
  8269 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8271 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8272 ;;Total ram usage:        1 bytes
  8273 ;; Hardware stack levels used: 1
  8274 ;; Hardware stack levels required when called: 2
  8275 ;; This function calls:
  8276 ;;		_delay_50us
  8277 ;;		_delay_ms
  8278 ;;		_lcdCommand4
  8279 ;; This function is called by:
  8280 ;;		_lcdInit
  8281 ;;		_outputPrint
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           	psect	text58
  8286   005E4C                     __ptext58:
  8287                           	callstack 0
  8288   005E4C                     _lcdCommand:
  8289                           	callstack 26
  8290                           
  8291                           ;incstack = 0
  8292                           ;lcdCommand@cmd stored from wreg
  8293   005E4C  6E15               	movwf	lcdCommand@cmd^0,c
  8294   005E4E                     
  8295                           ;lcd.c: 133:     lcdCommand4(cmd);
  8296   005E4E  5015               	movf	lcdCommand@cmd^0,w,c
  8297   005E50  ECBC  F030         	call	_lcdCommand4
  8298                           
  8299                           ;lcd.c: 135:     lcdCommand4(cmd << 4);
  8300   005E54  3815               	swapf	lcdCommand@cmd^0,w,c
  8301   005E56  0BF0               	andlw	240
  8302   005E58  ECBC  F030         	call	_lcdCommand4
  8303   005E5C                     
  8304                           ;lcd.c: 136:     if ((cmd == 0x02) || (cmd == 0x01)) {
  8305   005E5C  0E02               	movlw	2
  8306   005E5E  1815               	xorwf	lcdCommand@cmd^0,w,c
  8307   005E60  B4D8               	btfsc	status,2,c
  8308   005E62  EF35  F02F         	goto	u3211
  8309   005E66  EF37  F02F         	goto	u3210
  8310   005E6A                     u3211:
  8311   005E6A  EF3F  F02F         	goto	l3366
  8312   005E6E                     u3210:
  8313   005E6E  0415               	decf	lcdCommand@cmd^0,w,c
  8314   005E70  A4D8               	btfss	status,2,c
  8315   005E72  EF3D  F02F         	goto	u3221
  8316   005E76  EF3F  F02F         	goto	u3220
  8317   005E7A                     u3221:
  8318   005E7A  EF4B  F02F         	goto	l3368
  8319   005E7E                     u3220:
  8320   005E7E                     l3366:
  8321                           
  8322                           ;lcd.c: 137:         delay_ms(2);
  8323   005E7E  0E02               	movlw	2
  8324   005E80  6E0B               	movwf	delay_ms@ms^0,c
  8325   005E82  0E00               	movlw	0
  8326   005E84  6E0C               	movwf	(delay_ms@ms+1)^0,c
  8327   005E86  0E00               	movlw	0
  8328   005E88  6E0D               	movwf	(delay_ms@ms+2)^0,c
  8329   005E8A  0E00               	movlw	0
  8330   005E8C  6E0E               	movwf	(delay_ms@ms+3)^0,c
  8331   005E8E  ECF8  F02E         	call	_delay_ms	;wreg free
  8332                           
  8333                           ;lcd.c: 138:     } else {
  8334   005E92  EF55  F02F         	goto	l213
  8335   005E96                     l3368:
  8336                           
  8337                           ;lcd.c: 139:         delay_50us(1);
  8338   005E96  0E01               	movlw	1
  8339   005E98  6E01               	movwf	delay_50us@us^0,c
  8340   005E9A  0E00               	movlw	0
  8341   005E9C  6E02               	movwf	(delay_50us@us+1)^0,c
  8342   005E9E  0E00               	movlw	0
  8343   005EA0  6E03               	movwf	(delay_50us@us+2)^0,c
  8344   005EA2  0E00               	movlw	0
  8345   005EA4  6E04               	movwf	(delay_50us@us+3)^0,c
  8346   005EA6  EC4A  F030         	call	_delay_50us	;wreg free
  8347   005EAA                     l213:
  8348   005EAA  0012               	return		;funcret
  8349   005EAC                     __end_of_lcdCommand:
  8350                           	callstack 0
  8351                           
  8352 ;; *************** function _lcdCommand4 *****************
  8353 ;; Defined at:
  8354 ;;		line 79 in file "lcd.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;  cmd             1    wreg     unsigned char 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  cmd             1    0[COMRAM] unsigned char 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      void 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2, status,0, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8368 ;;      Params:         0       0       0       0       0       0       0       0       0
  8369 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8371 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8372 ;;Total ram usage:        1 bytes
  8373 ;; Hardware stack levels used: 1
  8374 ;; Hardware stack levels required when called: 1
  8375 ;; This function calls:
  8376 ;;		_pulse
  8377 ;; This function is called by:
  8378 ;;		_lcdInit
  8379 ;;		_lcdCommand
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text59
  8384   006178                     __ptext59:
  8385                           	callstack 0
  8386   006178                     _lcdCommand4:
  8387                           	callstack 26
  8388                           
  8389                           ;incstack = 0
  8390                           ;lcdCommand4@cmd stored from wreg
  8391   006178  6E01               	movwf	lcdCommand4@cmd^0,c
  8392   00617A                     
  8393                           ;lcd.c: 80:     (((*(volatile __near unsigned char*)0xF84)) = ((*(volatile __near unsign
      +                          ed char*)0xF84)) & (~(1<<(1))));
  8394   00617A  5084               	movf	132,w,c	;volatile
  8395   00617C  0BFD               	andlw	253
  8396   00617E  6E84               	movwf	132,c	;volatile
  8397   006180                     
  8398                           ;lcd.c: 81:     if (((cmd) & (1<<(4)))) {
  8399   006180  A801               	btfss	lcdCommand4@cmd^0,4,c
  8400   006182  EFC5  F030         	goto	u2961
  8401   006186  EFC7  F030         	goto	u2960
  8402   00618A                     u2961:
  8403   00618A  EFCA  F030         	goto	l3190
  8404   00618E                     u2960:
  8405   00618E                     
  8406                           ;lcd.c: 82:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(3)));
  8407   00618E  8683               	bsf	131,3,c	;volatile
  8408                           
  8409                           ;lcd.c: 83:     } else {
  8410   006190  EFCD  F030         	goto	l3192
  8411   006194                     l3190:
  8412                           
  8413                           ;lcd.c: 84:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near un
      +                          signed char*)0xF83)) & (~(1<<(3))));
  8414   006194  5083               	movf	131,w,c	;volatile
  8415   006196  0BF7               	andlw	247
  8416   006198  6E83               	movwf	131,c	;volatile
  8417   00619A                     l3192:
  8418                           
  8419                           ;lcd.c: 86:     if (((cmd) & (1<<(5)))) {
  8420   00619A  AA01               	btfss	lcdCommand4@cmd^0,5,c
  8421   00619C  EFD2  F030         	goto	u2971
  8422   0061A0  EFD4  F030         	goto	u2970
  8423   0061A4                     u2971:
  8424   0061A4  EFD7  F030         	goto	l3196
  8425   0061A8                     u2970:
  8426   0061A8                     
  8427                           ;lcd.c: 87:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(2)));
  8428   0061A8  8483               	bsf	131,2,c	;volatile
  8429                           
  8430                           ;lcd.c: 88:     } else {
  8431   0061AA  EFDA  F030         	goto	l3198
  8432   0061AE                     l3196:
  8433                           
  8434                           ;lcd.c: 89:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near un
      +                          signed char*)0xF83)) & (~(1<<(2))));
  8435   0061AE  5083               	movf	131,w,c	;volatile
  8436   0061B0  0BFB               	andlw	251
  8437   0061B2  6E83               	movwf	131,c	;volatile
  8438   0061B4                     l3198:
  8439                           
  8440                           ;lcd.c: 91:     if (((cmd) & (1<<(6)))) {
  8441   0061B4  AC01               	btfss	lcdCommand4@cmd^0,6,c
  8442   0061B6  EFDF  F030         	goto	u2981
  8443   0061BA  EFE1  F030         	goto	u2980
  8444   0061BE                     u2981:
  8445   0061BE  EFE4  F030         	goto	l3202
  8446   0061C2                     u2980:
  8447   0061C2                     
  8448                           ;lcd.c: 92:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(1)));
  8449   0061C2  8283               	bsf	131,1,c	;volatile
  8450                           
  8451                           ;lcd.c: 93:     } else {
  8452   0061C4  EFE7  F030         	goto	l3204
  8453   0061C8                     l3202:
  8454                           
  8455                           ;lcd.c: 94:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near un
      +                          signed char*)0xF83)) & (~(1<<(1))));
  8456   0061C8  5083               	movf	131,w,c	;volatile
  8457   0061CA  0BFD               	andlw	253
  8458   0061CC  6E83               	movwf	131,c	;volatile
  8459   0061CE                     l3204:
  8460                           
  8461                           ;lcd.c: 96:     if (((cmd) & (1<<(7)))) {
  8462   0061CE  AE01               	btfss	lcdCommand4@cmd^0,7,c
  8463   0061D0  EFEC  F030         	goto	u2991
  8464   0061D4  EFEE  F030         	goto	u2990
  8465   0061D8                     u2991:
  8466   0061D8  EFF1  F030         	goto	l3208
  8467   0061DC                     u2990:
  8468   0061DC                     
  8469                           ;lcd.c: 97:         (((*(volatile __near unsigned char*)0xF83)) |= (1<<(0)));
  8470   0061DC  8083               	bsf	131,0,c	;volatile
  8471                           
  8472                           ;lcd.c: 98:     } else {
  8473   0061DE  EFF4  F030         	goto	l3210
  8474   0061E2                     l3208:
  8475                           
  8476                           ;lcd.c: 99:         (((*(volatile __near unsigned char*)0xF83)) = ((*(volatile __near un
      +                          signed char*)0xF83)) & (~(1<<(0))));
  8477   0061E2  5083               	movf	131,w,c	;volatile
  8478   0061E4  0BFE               	andlw	254
  8479   0061E6  6E83               	movwf	131,c	;volatile
  8480   0061E8                     l3210:
  8481                           
  8482                           ;lcd.c: 101:     pulse();
  8483   0061E8  EC31  F02C         	call	_pulse	;wreg free
  8484   0061EC  0012               	return		;funcret
  8485   0061EE                     __end_of_lcdCommand4:
  8486                           	callstack 0
  8487                           
  8488 ;; *************** function _pulse *****************
  8489 ;; Defined at:
  8490 ;;		line 74 in file "lcd.c"
  8491 ;; Parameters:    Size  Location     Type
  8492 ;;		None
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;		None
  8495 ;; Return value:  Size  Location     Type
  8496 ;;                  1    wreg      void 
  8497 ;; Registers used:
  8498 ;;		wreg, status,2, status,0
  8499 ;; Tracked objects:
  8500 ;;		On entry : 0/0
  8501 ;;		On exit  : 0/0
  8502 ;;		Unchanged: 0/0
  8503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8504 ;;      Params:         0       0       0       0       0       0       0       0       0
  8505 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8506 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8507 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8508 ;;Total ram usage:        0 bytes
  8509 ;; Hardware stack levels used: 1
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_lcdCommand4
  8514 ;;		_lcdData4
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           	psect	text60
  8519   005862                     __ptext60:
  8520                           	callstack 0
  8521   005862                     _pulse:
  8522                           	callstack 25
  8523   005862                     
  8524                           ;lcd.c: 75:     (((*(volatile __near unsigned char*)0xF84)) |= (1<<(0)));
  8525   005862  8084               	bsf	132,0,c	;volatile
  8526   005864                     
  8527                           ;lcd.c: 76:     (((*(volatile __near unsigned char*)0xF84)) = ((*(volatile __near unsign
      +                          ed char*)0xF84)) & (~(1<<(0))));
  8528   005864  5084               	movf	132,w,c	;volatile
  8529   005866  0BFE               	andlw	254
  8530   005868  6E84               	movwf	132,c	;volatile
  8531   00586A  0012               	return		;funcret
  8532   00586C                     __end_of_pulse:
  8533                           	callstack 0
  8534                           
  8535 ;; *************** function _delay_ms *****************
  8536 ;; Defined at:
  8537 ;;		line 61 in file "lcd.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  ms              4   10[COMRAM] unsigned long 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  i               4   16[COMRAM] unsigned long 
  8542 ;;  l               2   14[COMRAM] volatile unsigned int 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8552 ;;      Params:         4       0       0       0       0       0       0       0       0
  8553 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8555 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8556 ;;Total ram usage:       10 bytes
  8557 ;; Hardware stack levels used: 1
  8558 ;; Hardware stack levels required when called: 1
  8559 ;; This function calls:
  8560 ;;		_delay_50us
  8561 ;; This function is called by:
  8562 ;;		_butRead
  8563 ;;		_lcdInit
  8564 ;;		_lcdCommand
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text61
  8569   005DF0                     __ptext61:
  8570                           	callstack 0
  8571   005DF0                     _delay_ms:
  8572                           	callstack 26
  8573   005DF0                     
  8574                           ;lcd.c: 62:     volatile unsigned int l = 0;
  8575   005DF0  0E00               	movlw	0
  8576   005DF2  6E10               	movwf	(delay_ms@l+1)^0,c	;volatile
  8577   005DF4  0E00               	movlw	0
  8578   005DF6  6E0F               	movwf	delay_ms@l^0,c	;volatile
  8579                           
  8580                           ;lcd.c: 63:     for (unsigned long i = 0; i < ms; i++)
  8581   005DF8  0E00               	movlw	0
  8582   005DFA  6E11               	movwf	delay_ms@i^0,c
  8583   005DFC  0E00               	movlw	0
  8584   005DFE  6E12               	movwf	(delay_ms@i+1)^0,c
  8585   005E00  0E00               	movlw	0
  8586   005E02  6E13               	movwf	(delay_ms@i+2)^0,c
  8587   005E04  0E00               	movlw	0
  8588   005E06  6E14               	movwf	(delay_ms@i+3)^0,c
  8589   005E08  EF16  F02F         	goto	l3166
  8590   005E0C                     l3162:
  8591                           
  8592                           ;lcd.c: 64:         delay_50us(20);
  8593   005E0C  0E14               	movlw	20
  8594   005E0E  6E01               	movwf	delay_50us@us^0,c
  8595   005E10  0E00               	movlw	0
  8596   005E12  6E02               	movwf	(delay_50us@us+1)^0,c
  8597   005E14  0E00               	movlw	0
  8598   005E16  6E03               	movwf	(delay_50us@us+2)^0,c
  8599   005E18  0E00               	movlw	0
  8600   005E1A  6E04               	movwf	(delay_50us@us+3)^0,c
  8601   005E1C  EC4A  F030         	call	_delay_50us	;wreg free
  8602   005E20  0E01               	movlw	1
  8603   005E22  2611               	addwf	delay_ms@i^0,f,c
  8604   005E24  0E00               	movlw	0
  8605   005E26  2212               	addwfc	(delay_ms@i+1)^0,f,c
  8606   005E28  2213               	addwfc	(delay_ms@i+2)^0,f,c
  8607   005E2A  2214               	addwfc	(delay_ms@i+3)^0,f,c
  8608   005E2C                     l3166:
  8609   005E2C  500B               	movf	delay_ms@ms^0,w,c
  8610   005E2E  5C11               	subwf	delay_ms@i^0,w,c
  8611   005E30  500C               	movf	(delay_ms@ms+1)^0,w,c
  8612   005E32  5812               	subwfb	(delay_ms@i+1)^0,w,c
  8613   005E34  500D               	movf	(delay_ms@ms+2)^0,w,c
  8614   005E36  5813               	subwfb	(delay_ms@i+2)^0,w,c
  8615   005E38  500E               	movf	(delay_ms@ms+3)^0,w,c
  8616   005E3A  5814               	subwfb	(delay_ms@i+3)^0,w,c
  8617   005E3C  A0D8               	btfss	status,0,c
  8618   005E3E  EF23  F02F         	goto	u2931
  8619   005E42  EF25  F02F         	goto	u2930
  8620   005E46                     u2931:
  8621   005E46  EF06  F02F         	goto	l3162
  8622   005E4A                     u2930:
  8623   005E4A  0012               	return		;funcret
  8624   005E4C                     __end_of_delay_ms:
  8625                           	callstack 0
  8626                           
  8627 ;; *************** function _delay_50us *****************
  8628 ;; Defined at:
  8629 ;;		line 67 in file "lcd.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  us              4    0[COMRAM] unsigned long 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;  i               4    4[COMRAM] unsigned long 
  8634 ;;  l               2    8[COMRAM] volatile unsigned int 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  1    wreg      void 
  8637 ;; Registers used:
  8638 ;;		wreg, status,2, status,0
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8644 ;;      Params:         4       0       0       0       0       0       0       0       0
  8645 ;;      Locals:         6       0       0       0       0       0       0       0       0
  8646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8647 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8648 ;;Total ram usage:       10 bytes
  8649 ;; Hardware stack levels used: 1
  8650 ;; This function calls:
  8651 ;;		Nothing
  8652 ;; This function is called by:
  8653 ;;		_delay_ms
  8654 ;;		_lcdCommand
  8655 ;;		_lcdData
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           	psect	text62
  8660   006094                     __ptext62:
  8661                           	callstack 0
  8662   006094                     _delay_50us:
  8663                           	callstack 26
  8664   006094                     
  8665                           ;lcd.c: 68:     volatile unsigned int l = 0;
  8666   006094  0E00               	movlw	0
  8667   006096  6E0A               	movwf	(delay_50us@l+1)^0,c	;volatile
  8668   006098  0E00               	movlw	0
  8669   00609A  6E09               	movwf	delay_50us@l^0,c	;volatile
  8670                           
  8671                           ;lcd.c: 69:     for (unsigned long i = 0; i < us; i++)
  8672   00609C  0E00               	movlw	0
  8673   00609E  6E05               	movwf	delay_50us@i^0,c
  8674   0060A0  0E00               	movlw	0
  8675   0060A2  6E06               	movwf	(delay_50us@i+1)^0,c
  8676   0060A4  0E00               	movlw	0
  8677   0060A6  6E07               	movwf	(delay_50us@i+2)^0,c
  8678   0060A8  0E00               	movlw	0
  8679   0060AA  6E08               	movwf	(delay_50us@i+3)^0,c
  8680   0060AC  EF73  F030         	goto	l176
  8681   0060B0                     l2892:
  8682                           
  8683                           ;lcd.c: 70:         for (l = 0; l < 19; l++);
  8684   0060B0  0E00               	movlw	0
  8685   0060B2  6E0A               	movwf	(delay_50us@l+1)^0,c	;volatile
  8686   0060B4  0E00               	movlw	0
  8687   0060B6  6E09               	movwf	delay_50us@l^0,c	;volatile
  8688   0060B8                     l2894:
  8689   0060B8  500A               	movf	(delay_50us@l+1)^0,w,c	;volatile
  8690   0060BA  E109               	bnz	u2420
  8691   0060BC  0E13               	movlw	19
  8692   0060BE  5C09               	subwf	delay_50us@l^0,w,c	;volatile
  8693   0060C0  A0D8               	btfss	status,0,c
  8694   0060C2  EF65  F030         	goto	u2421
  8695   0060C6  EF67  F030         	goto	u2420
  8696   0060CA                     u2421:
  8697   0060CA  EF69  F030         	goto	l2898
  8698   0060CE                     u2420:
  8699   0060CE  EF6D  F030         	goto	l2902
  8700   0060D2                     l2898:
  8701   0060D2  4A09               	infsnz	delay_50us@l^0,f,c	;volatile
  8702   0060D4  2A0A               	incf	(delay_50us@l+1)^0,f,c	;volatile
  8703   0060D6  EF5C  F030         	goto	l2894
  8704   0060DA                     l2902:
  8705   0060DA  0E01               	movlw	1
  8706   0060DC  2605               	addwf	delay_50us@i^0,f,c
  8707   0060DE  0E00               	movlw	0
  8708   0060E0  2206               	addwfc	(delay_50us@i+1)^0,f,c
  8709   0060E2  2207               	addwfc	(delay_50us@i+2)^0,f,c
  8710   0060E4  2208               	addwfc	(delay_50us@i+3)^0,f,c
  8711   0060E6                     l176:
  8712   0060E6  5001               	movf	delay_50us@us^0,w,c
  8713   0060E8  5C05               	subwf	delay_50us@i^0,w,c
  8714   0060EA  5002               	movf	(delay_50us@us+1)^0,w,c
  8715   0060EC  5806               	subwfb	(delay_50us@i+1)^0,w,c
  8716   0060EE  5003               	movf	(delay_50us@us+2)^0,w,c
  8717   0060F0  5807               	subwfb	(delay_50us@i+2)^0,w,c
  8718   0060F2  5004               	movf	(delay_50us@us+3)^0,w,c
  8719   0060F4  5808               	subwfb	(delay_50us@i+3)^0,w,c
  8720   0060F6  A0D8               	btfss	status,0,c
  8721   0060F8  EF80  F030         	goto	u2431
  8722   0060FC  EF82  F030         	goto	u2430
  8723   006100                     u2431:
  8724   006100  EF58  F030         	goto	l2892
  8725   006104                     u2430:
  8726   006104  0012               	return		;funcret
  8727   006106                     __end_of_delay_50us:
  8728                           	callstack 0
  8729                           
  8730 ;; *************** function _eventInit *****************
  8731 ;; Defined at:
  8732 ;;		line 9 in file "event.c"
  8733 ;; Parameters:    Size  Location     Type
  8734 ;;		None
  8735 ;; Auto vars:     Size  Location     Type
  8736 ;;		None
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  1    wreg      void 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0, cstack
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8746 ;;      Params:         0       0       0       0       0       0       0       0       0
  8747 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8748 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8749 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8750 ;;Total ram usage:        0 bytes
  8751 ;; Hardware stack levels used: 1
  8752 ;; Hardware stack levels required when called: 1
  8753 ;; This function calls:
  8754 ;;		_butInit
  8755 ;;		_serialInit
  8756 ;; This function is called by:
  8757 ;;		_main
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text63
  8762   0058D2                     __ptext63:
  8763                           	callstack 0
  8764   0058D2                     _eventInit:
  8765                           	callstack 29
  8766   0058D2                     
  8767                           ;event.c: 10:     butInit();
  8768   0058D2  EC45  F02C         	call	_butInit	;wreg free
  8769   0058D6                     
  8770                           ;event.c: 11:     serialInit();
  8771   0058D6  ECC7  F02C         	call	_serialInit	;wreg free
  8772   0058DA                     
  8773                           ;event.c: 12:     key_ant = 0;
  8774   0058DA  0E00               	movlw	0
  8775   0058DC  6E47               	movwf	(_key_ant+1)^0,c
  8776   0058DE  0E00               	movlw	0
  8777   0058E0  6E46               	movwf	_key_ant^0,c
  8778   0058E2  0012               	return		;funcret
  8779   0058E4                     __end_of_eventInit:
  8780                           	callstack 0
  8781                           
  8782 ;; *************** function _serialInit *****************
  8783 ;; Defined at:
  8784 ;;		line 23 in file "serial.c"
  8785 ;; Parameters:    Size  Location     Type
  8786 ;;		None
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;		None
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  1    wreg      void 
  8791 ;; Registers used:
  8792 ;;		wreg, status,2, status,0
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8798 ;;      Params:         0       0       0       0       0       0       0       0       0
  8799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8800 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8801 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8802 ;;Total ram usage:        0 bytes
  8803 ;; Hardware stack levels used: 1
  8804 ;; This function calls:
  8805 ;;		Nothing
  8806 ;; This function is called by:
  8807 ;;		_outputInit
  8808 ;;		_eventInit
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           	psect	text64
  8813   00598E                     __ptext64:
  8814                           	callstack 0
  8815   00598E                     _serialInit:
  8816                           	callstack 29
  8817   00598E                     
  8818                           ;serial.c: 24:     (*(volatile __near unsigned char*)0xFAC) = 0b00101100;
  8819   00598E  0E2C               	movlw	44
  8820   005990  6EAC               	movwf	172,c	;volatile
  8821                           
  8822                           ;serial.c: 25:     (*(volatile __near unsigned char*)0xFAB) = 0b10010000;
  8823   005992  0E90               	movlw	144
  8824   005994  6EAB               	movwf	171,c	;volatile
  8825                           
  8826                           ;serial.c: 26:     (*(volatile __near unsigned char*)0xFB8) = 0b00001000;
  8827   005996  0E08               	movlw	8
  8828   005998  6EB8               	movwf	184,c	;volatile
  8829                           
  8830                           ;serial.c: 27:     (*(volatile __near unsigned char*)0xFB0) = 0b00000000;
  8831   00599A  0E00               	movlw	0
  8832   00599C  6EB0               	movwf	176,c	;volatile
  8833                           
  8834                           ;serial.c: 28:     (*(volatile __near unsigned char*)0xFAF) = 0b00100010;
  8835   00599E  0E22               	movlw	34
  8836   0059A0  6EAF               	movwf	175,c	;volatile
  8837   0059A2                     
  8838                           ;serial.c: 29:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<(6)));
  8839   0059A2  8C94               	bsf	148,6,c	;volatile
  8840   0059A4                     
  8841                           ;serial.c: 30:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<(7)));
  8842   0059A4  8E94               	bsf	148,7,c	;volatile
  8843   0059A6  0012               	return		;funcret
  8844   0059A8                     __end_of_serialInit:
  8845                           	callstack 0
  8846                           
  8847 ;; *************** function _butInit *****************
  8848 ;; Defined at:
  8849 ;;		line 6 in file "button.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;		None
  8852 ;; Auto vars:     Size  Location     Type
  8853 ;;		None
  8854 ;; Return value:  Size  Location     Type
  8855 ;;                  1    wreg      void 
  8856 ;; Registers used:
  8857 ;;		status,2, status,0
  8858 ;; Tracked objects:
  8859 ;;		On entry : 0/0
  8860 ;;		On exit  : 0/0
  8861 ;;		Unchanged: 0/0
  8862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8863 ;;      Params:         0       0       0       0       0       0       0       0       0
  8864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8867 ;;Total ram usage:        0 bytes
  8868 ;; Hardware stack levels used: 1
  8869 ;; This function calls:
  8870 ;;		Nothing
  8871 ;; This function is called by:
  8872 ;;		_eventInit
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	text65
  8877   00588A                     __ptext65:
  8878                           	callstack 0
  8879   00588A                     _butInit:
  8880                           	callstack 29
  8881   00588A                     
  8882                           ;button.c: 8:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<(0)));
  8883   00588A  8094               	bsf	148,0,c	;volatile
  8884                           
  8885                           ;button.c: 9:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<(1)));
  8886   00588C  8294               	bsf	148,1,c	;volatile
  8887                           
  8888                           ;button.c: 10:     (((*(volatile __near unsigned char*)0xF94)) |= (1<<(2)));
  8889   00588E  8494               	bsf	148,2,c	;volatile
  8890                           
  8891                           ;button.c: 11:     (((*(volatile __near unsigned char*)0xF95)) |= (1<<(4)));
  8892   005890  8895               	bsf	149,4,c	;volatile
  8893                           
  8894                           ;button.c: 12:     (((*(volatile __near unsigned char*)0xF95)) |= (1<<(5)));
  8895   005892  8A95               	bsf	149,5,c	;volatile
  8896   005894  0012               	return		;funcret
  8897   005896                     __end_of_butInit:
  8898                           	callstack 0
  8899                           
  8900                           	psect	rparam
  8901   000000                     
  8902                           	psect	idloc
  8903                           
  8904                           ;Config register IDLOC0 @ 0x200000
  8905                           ;	unspecified, using default values
  8906   200000                     	org	2097152
  8907   200000  FF                 	db	255
  8908                           
  8909                           ;Config register IDLOC1 @ 0x200001
  8910                           ;	unspecified, using default values
  8911   200001                     	org	2097153
  8912   200001  FF                 	db	255
  8913                           
  8914                           ;Config register IDLOC2 @ 0x200002
  8915                           ;	unspecified, using default values
  8916   200002                     	org	2097154
  8917   200002  FF                 	db	255
  8918                           
  8919                           ;Config register IDLOC3 @ 0x200003
  8920                           ;	unspecified, using default values
  8921   200003                     	org	2097155
  8922   200003  FF                 	db	255
  8923                           
  8924                           ;Config register IDLOC4 @ 0x200004
  8925                           ;	unspecified, using default values
  8926   200004                     	org	2097156
  8927   200004  FF                 	db	255
  8928                           
  8929                           ;Config register IDLOC5 @ 0x200005
  8930                           ;	unspecified, using default values
  8931   200005                     	org	2097157
  8932   200005  FF                 	db	255
  8933                           
  8934                           ;Config register IDLOC6 @ 0x200006
  8935                           ;	unspecified, using default values
  8936   200006                     	org	2097158
  8937   200006  FF                 	db	255
  8938                           
  8939                           ;Config register IDLOC7 @ 0x200007
  8940                           ;	unspecified, using default values
  8941   200007                     	org	2097159
  8942   200007  FF                 	db	255
  8943                           
  8944                           	psect	config
  8945                           
  8946                           ;Config register CONFIG1L @ 0x300000
  8947                           ;	unspecified, using default values
  8948                           ;	PLL Prescaler Selection bits
  8949                           ;	PLLDIV = 0x0, unprogrammed default
  8950                           ;	System Clock Postscaler Selection bits
  8951                           ;	CPUDIV = 0x0, unprogrammed default
  8952                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  8953                           ;	USBDIV = 0x0, unprogrammed default
  8954   300000                     	org	3145728
  8955   300000  00                 	db	0
  8956                           
  8957                           ;Config register CONFIG1H @ 0x300001
  8958                           ;	Oscillator Selection bits
  8959                           ;	FOSC = HS, HS oscillator (HS)
  8960                           ;	Fail-Safe Clock Monitor Enable bit
  8961                           ;	FCMEN = 0x0, unprogrammed default
  8962                           ;	Internal/External Oscillator Switchover bit
  8963                           ;	IESO = 0x0, unprogrammed default
  8964   300001                     	org	3145729
  8965   300001  0C                 	db	12
  8966                           
  8967                           ;Config register CONFIG2L @ 0x300002
  8968                           ;	unspecified, using default values
  8969                           ;	Power-up Timer Enable bit
  8970                           ;	PWRT = 0x1, unprogrammed default
  8971                           ;	Brown-out Reset Enable bits
  8972                           ;	BOR = 0x3, unprogrammed default
  8973                           ;	Brown-out Reset Voltage bits
  8974                           ;	BORV = 0x3, unprogrammed default
  8975                           ;	USB Voltage Regulator Enable bit
  8976                           ;	VREGEN = 0x0, unprogrammed default
  8977   300002                     	org	3145730
  8978   300002  1F                 	db	31
  8979                           
  8980                           ;Config register CONFIG2H @ 0x300003
  8981                           ;	Watchdog Timer Enable bit
  8982                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8983                           ;	Watchdog Timer Postscale Select bits
  8984                           ;	WDTPS = 0xF, unprogrammed default
  8985   300003                     	org	3145731
  8986   300003  1E                 	db	30
  8987                           
  8988                           ; Padding undefined space
  8989   300004                     	org	3145732
  8990   300004  FF                 	db	255
  8991                           
  8992                           ;Config register CONFIG3H @ 0x300005
  8993                           ;	CCP2 MUX bit
  8994                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  8995                           ;	PORTB A/D Enable bit
  8996                           ;	PBADEN = 0x1, unprogrammed default
  8997                           ;	Low-Power Timer 1 Oscillator Enable bit
  8998                           ;	LPT1OSC = 0x0, unprogrammed default
  8999                           ;	MCLR Pin Enable bit
  9000                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  9001   300005                     	org	3145733
  9002   300005  82                 	db	130
  9003                           
  9004                           ;Config register CONFIG4L @ 0x300006
  9005                           ;	Stack Full/Underflow Reset Enable bit
  9006                           ;	STVREN = 0x1, unprogrammed default
  9007                           ;	Single-Supply ICSP Enable bit
  9008                           ;	LVP = OFF, Single-Supply ICSP disabled
  9009                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  9010                           ;	ICPRT = ON, ICPORT enabled
  9011                           ;	Extended Instruction Set Enable bit
  9012                           ;	XINST = 0x0, unprogrammed default
  9013                           ;	Background Debugger Enable bit
  9014                           ;	DEBUG = 0x1, unprogrammed default
  9015   300006                     	org	3145734
  9016   300006  A1                 	db	161
  9017                           
  9018                           ; Padding undefined space
  9019   300007                     	org	3145735
  9020   300007  FF                 	db	255
  9021                           
  9022                           ;Config register CONFIG5L @ 0x300008
  9023                           ;	unspecified, using default values
  9024                           ;	Code Protection bit
  9025                           ;	CP0 = 0x1, unprogrammed default
  9026                           ;	Code Protection bit
  9027                           ;	CP1 = 0x1, unprogrammed default
  9028                           ;	Code Protection bit
  9029                           ;	CP2 = 0x1, unprogrammed default
  9030                           ;	Code Protection bit
  9031                           ;	CP3 = 0x1, unprogrammed default
  9032   300008                     	org	3145736
  9033   300008  0F                 	db	15
  9034                           
  9035                           ;Config register CONFIG5H @ 0x300009
  9036                           ;	unspecified, using default values
  9037                           ;	Boot Block Code Protection bit
  9038                           ;	CPB = 0x1, unprogrammed default
  9039                           ;	Data EEPROM Code Protection bit
  9040                           ;	CPD = 0x1, unprogrammed default
  9041   300009                     	org	3145737
  9042   300009  C0                 	db	192
  9043                           
  9044                           ;Config register CONFIG6L @ 0x30000A
  9045                           ;	unspecified, using default values
  9046                           ;	Write Protection bit
  9047                           ;	WRT0 = 0x1, unprogrammed default
  9048                           ;	Write Protection bit
  9049                           ;	WRT1 = 0x1, unprogrammed default
  9050                           ;	Write Protection bit
  9051                           ;	WRT2 = 0x1, unprogrammed default
  9052                           ;	Write Protection bit
  9053                           ;	WRT3 = 0x1, unprogrammed default
  9054   30000A                     	org	3145738
  9055   30000A  0F                 	db	15
  9056                           
  9057                           ;Config register CONFIG6H @ 0x30000B
  9058                           ;	unspecified, using default values
  9059                           ;	Configuration Register Write Protection bit
  9060                           ;	WRTC = 0x1, unprogrammed default
  9061                           ;	Boot Block Write Protection bit
  9062                           ;	WRTB = 0x1, unprogrammed default
  9063                           ;	Data EEPROM Write Protection bit
  9064                           ;	WRTD = 0x1, unprogrammed default
  9065   30000B                     	org	3145739
  9066   30000B  E0                 	db	224
  9067                           
  9068                           ;Config register CONFIG7L @ 0x30000C
  9069                           ;	unspecified, using default values
  9070                           ;	Table Read Protection bit
  9071                           ;	EBTR0 = 0x1, unprogrammed default
  9072                           ;	Table Read Protection bit
  9073                           ;	EBTR1 = 0x1, unprogrammed default
  9074                           ;	Table Read Protection bit
  9075                           ;	EBTR2 = 0x1, unprogrammed default
  9076                           ;	Table Read Protection bit
  9077                           ;	EBTR3 = 0x1, unprogrammed default
  9078   30000C                     	org	3145740
  9079   30000C  0F                 	db	15
  9080                           
  9081                           ;Config register CONFIG7H @ 0x30000D
  9082                           ;	unspecified, using default values
  9083                           ;	Boot Block Table Read Protection bit
  9084                           ;	EBTRB = 0x1, unprogrammed default
  9085   30000D                     	org	3145741
  9086   30000D  40                 	db	64
  9087                           tosu	equ	0xFFF
  9088                           tosh	equ	0xFFE
  9089                           tosl	equ	0xFFD
  9090                           stkptr	equ	0xFFC
  9091                           pclatu	equ	0xFFB
  9092                           pclath	equ	0xFFA
  9093                           pcl	equ	0xFF9
  9094                           tblptru	equ	0xFF8
  9095                           tblptrh	equ	0xFF7
  9096                           tblptrl	equ	0xFF6
  9097                           tablat	equ	0xFF5
  9098                           prodh	equ	0xFF4
  9099                           prodl	equ	0xFF3
  9100                           indf0	equ	0xFEF
  9101                           postinc0	equ	0xFEE
  9102                           postdec0	equ	0xFED
  9103                           preinc0	equ	0xFEC
  9104                           plusw0	equ	0xFEB
  9105                           fsr0h	equ	0xFEA
  9106                           fsr0l	equ	0xFE9
  9107                           wreg	equ	0xFE8
  9108                           indf1	equ	0xFE7
  9109                           postinc1	equ	0xFE6
  9110                           postdec1	equ	0xFE5
  9111                           preinc1	equ	0xFE4
  9112                           plusw1	equ	0xFE3
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           bsr	equ	0xFE0
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           preinc2	equ	0xFDC
  9120                           plusw2	equ	0xFDB
  9121                           fsr2h	equ	0xFDA
  9122                           fsr2l	equ	0xFD9
  9123                           status	equ	0xFD8

Data Sizes:
    Strings     349
    Constant    0
    Data        24
    BSS         22
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      78
    BANK0           160      0      24
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    msgs	PTR unsigned char [2][6] size(2) Largest target is 17
		 -> STR_12(CODE[17]), STR_11(CODE[16]), STR_10(CODE[17]), STR_9(CODE[16]), 
		 -> STR_8(CODE[14]), STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> STR_4(CODE[14]), STR_3(CODE[14]), STR_2(CODE[14]), STR_1(CODE[14]), 

    lcdString@msg	PTR unsigned char  size(2) Largest target is 21
		 -> STR_40(CODE[17]), STR_39(CODE[17]), STR_37(CODE[17]), STR_32(CODE[21]), 
		 -> STR_31(CODE[6]), STR_27(CODE[21]), STR_26(CODE[6]), STR_22(CODE[21]), 
		 -> STR_21(CODE[6]), STR_17(CODE[21]), STR_16(CODE[6]), STR_13(CODE[21]), 
		 -> STR_12(CODE[17]), STR_11(CODE[16]), STR_10(CODE[17]), STR_9(CODE[16]), 
		 -> STR_8(CODE[14]), STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> STR_4(CODE[14]), STR_3(CODE[14]), STR_2(CODE[14]), STR_1(CODE[14]), 

    serialString@str	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_38(CODE[17]), STR_36(CODE[4]), STR_35(CODE[6]), STR_34(CODE[4]), 
		 -> STR_33(CODE[22]), STR_30(CODE[6]), STR_29(CODE[4]), STR_28(CODE[22]), 
		 -> STR_25(CODE[6]), STR_24(CODE[4]), STR_23(CODE[22]), STR_20(CODE[6]), 
		 -> STR_19(CODE[4]), STR_18(CODE[22]), STR_15(CODE[4]), STR_14(CODE[22]), 
		 -> STR_12(CODE[17]), STR_11(CODE[16]), STR_10(CODE[17]), STR_9(CODE[16]), 
		 -> STR_8(CODE[14]), STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), 
		 -> STR_4(CODE[14]), STR_3(CODE[14]), STR_2(CODE[14]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _timerReset->___wmul
    _smLoop->_outputPrint
    _setLanguage->_dsWriteData
    _outputPrint->_lcdInt
    _outputPrint->_serialInt
    _serialString->_serialSend
    _serialInt->_getAlarmLevel1a
    _serialInt->_getAlarmLevel1b
    _serialInt->_getAlarmLevel2a
    _serialInt->_getAlarmLevel2b
    _lcdString->_lcdData
    _lcdInt->_getAlarmLevel1a
    _lcdInt->_getAlarmLevel1b
    _lcdInt->_getAlarmLevel2a
    _lcdInt->_getAlarmLevel2b
    _lcdData->_delay_50us
    ___awmod->___awdiv
    _getLanguage->_dsReadData
    _getAlarmLevel2b->_dsWriteData
    _getAlarmLevel2a->_dsWriteData
    _getAlarmLevel1b->_dsWriteData
    _getAlarmLevel1a->_dsWriteData
    _dsReadData->_i2cReadByte
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _eventRead->_setAlarmLevel1a
    _eventRead->_setAlarmLevel1b
    _eventRead->_setAlarmLevel2a
    _eventRead->_setAlarmLevel2b
    _setTime->_getTime
    _setAlarmLevel2b->_getAlarmLevel2b
    _setAlarmLevel2a->_getAlarmLevel2a
    _setAlarmLevel1b->_getAlarmLevel1b
    _setAlarmLevel1a->_getAlarmLevel1a
    _dsWriteData->___fladd
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _butRead->_delay_ms
    _smInit->_setState
    _lcdInit->_lcdCommand
    _lcdCommand->_delay_ms
    _delay_ms->_delay_50us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  141909
                          _eventInit
                            _getTime
                         _outputInit
                             _smInit
                             _smLoop
                          _timerInit
                         _timerReset
                          _timerWait
                            _varInit
 ---------------------------------------------------------------------------------
 (1) _varInit                                              0     0      0       0
                             _dsInit
 ---------------------------------------------------------------------------------
 (2) _dsInit                                               0     0      0       0
                            _i2cInit
 ---------------------------------------------------------------------------------
 (3) _i2cInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           4     2      2    4382
                                              6 COMRAM     4     2      2
                             ___wmul
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4215
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               6     6      0  134664
                                             48 COMRAM     6     6      0
                            _adcRead
                          _eventRead
                    _getAlarmLevel1a
                    _getAlarmLevel1b
                    _getAlarmLevel2a
                    _getAlarmLevel2b
                        _getLanguage
                           _getState
                            _getTime
                           _ledState
                        _outputPrint
                    _setAlarmLevel1a
                    _setAlarmLevel1b
                    _setAlarmLevel2a
                    _setAlarmLevel2b
                        _setLanguage
                           _setState
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0    5171
                                             23 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                         20    16      4   48808
                                             28 COMRAM    20    16      4
                            _adcRead
                    _getAlarmLevel1a
                    _getAlarmLevel1b
                    _getAlarmLevel2a
                    _getAlarmLevel2b
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                             _lcdInt
                          _lcdString
                          _serialInt
                         _serialSend
                       _serialString
 ---------------------------------------------------------------------------------
 (3) _serialString                                         2     0      2    1739
                                              1 COMRAM     2     0      2
                         _serialSend
 ---------------------------------------------------------------------------------
 (3) _serialInt                                            2     0      2    4649
                                             26 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                            _adcRead (ARG)
                    _getAlarmLevel1a (ARG)
                    _getAlarmLevel1b (ARG)
                    _getAlarmLevel2a (ARG)
                    _getAlarmLevel2b (ARG)
                            _getTime (ARG)
                         _serialSend
 ---------------------------------------------------------------------------------
 (4) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            6     4      2    1911
                                             11 COMRAM     6     4      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    5080
                                             26 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                            _adcRead (ARG)
                    _getAlarmLevel1a (ARG)
                    _getAlarmLevel1b (ARG)
                    _getAlarmLevel2a (ARG)
                    _getAlarmLevel2b (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     453
                                             10 COMRAM     1     1      0
                         _delay_50us
                           _lcdData4
 ---------------------------------------------------------------------------------
 (5) _lcdData4                                             1     1      0      88
                                              0 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1968
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1820
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0    2183
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel2b                                      3     1      2    7377
                                             23 COMRAM     3     1      2
                         _dsReadData
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel2a                                      3     1      2    7377
                                             23 COMRAM     3     1      2
                         _dsReadData
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel1b                                      3     1      2    7377
                                             23 COMRAM     3     1      2
                         _dsReadData
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel1a                                      3     1      2    7377
                                             23 COMRAM     3     1      2
                         _dsReadData
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (4) _dsReadData                                           5     3      2    2183
                                              7 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (5) _i2cReadByte                                          6     5      1     279
                                              1 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (3) _adcRead                                              4     2      2    1003
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ledState                                             4     3      1    1924
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                           11     9      2   23603
                                             28 COMRAM     9     7      2
                            _butRead
                         _serialRead
                    _setAlarmLevel1a
                    _setAlarmLevel1b
                    _setAlarmLevel2a
                    _setAlarmLevel2b
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setTime                                              2     0      2     250
                                              2 COMRAM     2     0      2
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel2b                                      2     0      2    5443
                                             26 COMRAM     2     0      2
                        _dsWriteData
                    _getAlarmLevel2b (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel2a                                      2     0      2    5443
                                             26 COMRAM     2     0      2
                        _dsWriteData
                    _getAlarmLevel2a (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel1b                                      2     0      2    5443
                                             26 COMRAM     2     0      2
                        _dsWriteData
                    _getAlarmLevel1b (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel1a                                      2     0      2    5443
                                             26 COMRAM     2     0      2
                        _dsWriteData
                    _getAlarmLevel1a (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          7     5      2    5149
                                             16 COMRAM     7     5      2
                            ___fladd
                             ___flge
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2    1099
                                              1 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0      44
                                              0 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0       0
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0       0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0      23
                                              0 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8     486
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2388
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _butRead                                              3     3      0    1194
                                             20 COMRAM     3     3      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _smInit                                               0     0      0      22
                            _adcInit
                            _ledInit
                           _setState
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ledInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _outputInit                                           0     0      0    2841
                            _lcdInit
                         _serialInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              0     0      0    2841
                           _delay_ms
                         _lcdCommand
                        _lcdCommand4
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0    1625
                                             20 COMRAM     1     1      0
                         _delay_50us
                           _delay_ms
                        _lcdCommand4
 ---------------------------------------------------------------------------------
 (4) _lcdCommand4                                          1     1      0      88
                                              0 COMRAM     1     1      0
                              _pulse
 ---------------------------------------------------------------------------------
 (6) _pulse                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                            10     6      4    1128
                                             10 COMRAM    10     6      4
                         _delay_50us
 ---------------------------------------------------------------------------------
 (5) _delay_50us                                          10     6      4     321
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (1) _eventInit                                            0     0      0       0
                            _butInit
                         _serialInit
 ---------------------------------------------------------------------------------
 (2) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _butInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eventInit
     _butInit
     _serialInit
   _getTime
   _outputInit
     _lcdInit
       _delay_ms
         _delay_50us
       _lcdCommand
         _delay_50us
         _delay_ms
         _lcdCommand4
           _pulse
       _lcdCommand4
     _serialInit
   _smInit
     _adcInit
     _ledInit
     _setState
   _smLoop
     _adcRead
     _eventRead
       _butRead
         _delay_ms
       _serialRead
       _setAlarmLevel1a
         _dsWriteData
           ___fladd
           ___flge
           _i2cWriteByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
               _read_SCL
               _read_SDA
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_stop
               _I2C_delay
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
         _getAlarmLevel1a (ARG)
           _dsReadData
             _i2cReadByte
               _i2c_read_bit
               _i2c_stop
               _i2c_write_bit
             _i2cWriteByte
           _dsWriteData
       _setAlarmLevel1b
         _dsWriteData
         _getAlarmLevel1b (ARG)
           _dsReadData
           _dsWriteData
       _setAlarmLevel2a
         _dsWriteData
         _getAlarmLevel2a (ARG)
           _dsReadData
           _dsWriteData
       _setAlarmLevel2b
         _dsWriteData
         _getAlarmLevel2b (ARG)
           _dsReadData
           _dsWriteData
       _setTime
         _getTime (ARG)
     _getAlarmLevel1a
     _getAlarmLevel1b
     _getAlarmLevel2a
     _getAlarmLevel2b
     _getLanguage
       _dsReadData
     _getState
     _getTime
     _ledState
     _outputPrint
       _adcRead
       _getAlarmLevel1a
       _getAlarmLevel1b
       _getAlarmLevel2a
       _getAlarmLevel2b
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdInt (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _adcRead (ARG)
         _getAlarmLevel1a (ARG)
         _getAlarmLevel1b (ARG)
         _getAlarmLevel2a (ARG)
         _getAlarmLevel2b (ARG)
         _getTime (ARG)
         _lcdData (ARG)
           _delay_50us
           _lcdData4
             _pulse
       _lcdString (ARG)
         _lcdData
       _serialInt (ARG)
         ___awdiv
         ___awmod
         _adcRead (ARG)
         _getAlarmLevel1a (ARG)
         _getAlarmLevel1b (ARG)
         _getAlarmLevel2a (ARG)
         _getAlarmLevel2b (ARG)
         _getTime (ARG)
         _serialSend (ARG)
       _serialSend (ARG)
       _serialString (ARG)
         _serialSend
     _setAlarmLevel1a
     _setAlarmLevel1b
     _setAlarmLevel2a
     _setAlarmLevel2b
     _setLanguage
       _dsWriteData
     _setState
     _setTime
   _timerInit
   _timerReset
     ___wmul
     _getTime (ARG)
   _timerWait
   _varInit
     _dsInit
       _i2cInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBIGSFR           A0      0       0      21        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      18       5       15.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      4E       1       82.1%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      66       6        0.0%
DATA                 0      0      66       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Jul 04 16:53:12 2023

                             _a 0049         __end_of_setAlarmLevel1a 5BB4         __end_of_setAlarmLevel1b 5BEE  
       __end_of_setAlarmLevel2a 5C28         __end_of_setAlarmLevel2b 5C62                    lcdString@msg 000C  
                            l31 5962                              l34 5974                              l42 67FA  
                            l43 68D6                              l28 59A6                              l54 5894  
                            l39 5A6E                              l72 5932                              l81 58B0  
                            l49 5B0A                              l66 584A                              l59 630A  
                            l75 5948                              l91 5CA6                  setTime@newTime 0003  
                            l69 5840                              l78 58A2                              l98 5A3E  
                  ___awdiv@sign 0006             ___wmul@multiplicand 0003                   ??_i2cReadByte 0003  
         i2cWriteByte@send_stop 0002                  i2cReadByte@bit 0005                             l120 5F0A  
                           l113 5AA0                             l107 5DEE                             l220 67DC  
                           l213 5EAA                             l126 5D40                             l206 6176  
                           l216 59EA                             l153 66E2                             l242 6608  
                           l226 5D96                             l139 5850                             l324 5874  
                           l156 5CEC                             l181 6104                             l173 5E4A  
                           l229 59C4                             l167 6478                             l271 5908  
                           l503 5BEC                             l176 60E6                             l184 586A  
                           l512 5C60                             l280 6262                             l440 58C2  
                           l195 61EC                             l507 607E                             l515 595E  
                           l347 7E9E                             l427 6DF0                             l443 58D0  
                           l508 6092                             l541 58E2                             l277 6238  
                           l470 5858                             l390 58C0                             l550 6E7E  
                           l518 591C                             l446 5B78                             l279 6246  
                           l480 5F58                             l800 653C                             l464 58F4  
                           l481 5F6C                             l473 5888                             l449 5860  
                           l554 6EA2                             l490 6030                             l394 6A32  
                           l467 5844                             l476 587E                             l396 6A80  
                           l485 5BB2                             l813 63BA                             l494 5C26  
                           l566 7216                             l398 6ACE                             l489 601C  
                           l569 5A10                             l834 6994                             l498 5FBA  
                           l499 5FCE                             l839 69DA                     ledState@num 0004  
                           _pos 0048                    ___awmod@sign 000E                             wreg 0FE8  
              i2c_write_bit@bit 0001                   ?_i2cWriteByte 0002          i2cWriteByte@send_start 0004  
               i2cReadByte@nack 0004                 i2cReadByte@byte 0007                            l1114 7520  
                          l1106 76D6                            l1123 75F0                            l1124 75DE  
                          l2030 59C0                            l3000 7344                            l3002 7348  
                          l3010 7358                            l2060 5900                            l2028 59A8  
                          l3020 73C8                            l3012 735C                            l3004 734C  
                          l2062 5904                            l3102 7600                            l3110 7656  
                          l3030 73F2                            l3022 73D4                            l3014 7386  
                          l3006 7350                            l3200 61C2                            l2056 58F6  
                          l3120 76A8                            l3112 7666                            l3104 760C  
                          l3040 7448                            l3032 7414                            l3024 73D8  
                          l3016 73A2                            l3008 7354                            l4000 6BE6  
                          l1097 7406                            l3210 61E8                            l3202 61C8  
                          l2058 58FC                            l3130 76C6                            l3122 76AE  
                          l3114 7676                            l3106 761A                            l3050 7482  
                          l3042 7456                            l3034 7424                            l3026 73E6  
                          l3018 73B2                            l1098 73F4                            l4010 6C3C  
                          l4002 6BF0                            l1099 73BA                            l3204 61CE  
                          l3300 5A52                            l3124 76B0                            l3116 7696  
                          l3108 7654                            l3060 74EE                            l3052 7484  
                          l3044 7464                            l3028 73E8                            l3140 6944  
                          l3220 6494                            l3212 59C8                            l4020 6C90  
                          l4012 6C4E                            l4004 6C02                            l3206 61DC  
                          l3302 5A58                            l3126 76B6                            l3118 769A  
                          l3070 7546                            l3062 74F0                            l3054 748E  
                          l3046 7470                            l3038 7438                            l3150 69D2  
                          l3142 6954                            l3134 68D8                            l3230 64BA  
                          l3222 6498                            l3214 647A                            l4030 6CE6  
                          l4022 6CA4                            l4014 6C58                            l4006 6C16  
                          l3160 5DF0                            l3208 61E2                            l3304 5A5A  
                          l3128 76C4                            l3080 7574                            l3064 7500  
                          l3048 7474                            l3056 7494                            l3152 69D8  
                          l3144 6962                            l3136 6906                            l3400 6218  
                          l3240 64F0                            l3232 64CC                            l3224 64A6  
                          l3216 647E                            l3312 67DE                            l3320 5ADA  
                          l4040 6D3A                            l4032 6CF8                            l4024 6CB6  
                          l4016 6C6A                            l4008 6C28                            l3162 5E0C  
                          l3330 62A2                            l3306 5A68                            l3082 7582  
                          l3074 755A                            l3090 75A0                            l3058 74BA  
                          l3066 7510                            l3146 6974                            l3138 6916  
                          l3410 6252                            l3402 621C                            l3170 5CE4  
                          l3242 6506                            l3234 64D4                            l3250 651C  
                          l3226 64AE                            l3218 648C                            l3314 67EC  
                          l3322 5AEA                            l4210 6D96                            l4042 6D46  
                          l4034 6D0C                            l4026 6CC0                            l4018 6C7E  
                          l2460 58D2                            l3164 5E20                            l3500 63E4  
                          l3340 62D0                            l3332 62B6                            l3308 5A6C  
                          l3084 758A                            l3076 7564                            l3068 7536  
                          l3092 75AE                            l3148 6982                            l3412 625A  
                          l3404 6230                            l3420 5F2C                            l3252 652C  
                          l3244 650E                            l3236 64DC                            l3228 64B2  
                          l3260 6310                            l3156 5962                            l3316 67F4  
                          l3324 5AEE                            l4044 6D58                            l4036 6D1E  
                          l4028 6CD2                            l4052 6D80                            l2452 585A  
                          l2462 58D6                            l3166 5E2C                            l3190 6194  
                          l3510 642C                            l3502 63F8                            l3326 6266  
                          l3094 75B2                            l3086 758E                            l3078 7572  
                          l3182 667C                            l3174 660C                            l3406 6234  
                          l3422 5F3A                            l3430 5FE0                            l3254 6534  
                          l3246 6510                            l3238 64EA                            l3270 6340  
                          l3262 631E                            l3158 5970                            l3318 5AD6  
                          l4046 6D64                            l4038 6D28                            l4054 6DCC  
                          l2454 585E                            l4062 5AA2                            l2464 58DA  
                          l3192 619A                            l3184 617A                            l3360 5E4E  
                          l3520 6466                            l3512 6432                            l3504 63FE  
                          l3328 6276                            l3344 62D6                            l3096 75C0  
                          l3088 759E                            l2800 5A3A                            l3176 6636  
                          l3408 624C                            l3168 5CA8                            l3424 5F4A  
                          l3416 5F0C                            l3440 5F6E                            l3432 5FF0  
                          l3248 6516                            l3280 6386                            l3272 6352  
                          l3264 6326                            l3600 7894                            l4056 6DD8  
                          l4048 6D76                            l2456 58E4                            l4064 5AB6  
                          l3194 61A8                            l3186 6180                            l3362 5E5C  
                          l3522 646C                            l3514 6446                            l3506 6412  
                          l3338 62BC                            l3098 75D6                            l2810 5DBA  
                          l2802 5D9A                            l3178 6646                            l3530 6562  
                          l3418 5F1C                            l3442 5F7E                            l3434 5FFE  
                          l3290 63B2                            l3282 638E                            l3274 635A  
                          l3266 632A                            l3258 630C                            l3370 66E4  
                          l3610 78A6                            l1850 5846                            l2458 58F0  
                          l4066 5AC6                            l3196 61AE                            l3188 618E  
                          l3364 5E6E                            l3524 6472                            l3516 644C  
                          l3508 6418                            l2820 5DEA                            l2812 5DCE  
                          l2804 5DAA                            l3540 65BA                            l3532 656C  
                          l3444 5F8E                            l3436 600E                            l3428 5FD0  
                          l3460 6070                            l3452 6032                            l3284 6394  
                          l3276 6362                            l3268 6338                            l3380 6760  
                          l3372 66F2                            l3700 7BC2                            l3620 7928  
                          l3612 78C2                            l4068 5ACA                            l2902 60DA  
                          l3198 61B4                            l3366 5E7E                            l3518 6460  
                          l2830 5A92                            l2822 5A70                            l2814 5DDE  
                          l2806 5DB2                            l3470 5B7A                            l3542 65CC  
                          l3534 657C                            l3526 6540                            l3446 5F9C  
                          l3454 6042                            l3294 5880                            l3278 6370  
                          l3286 639A                            l2910 611E                            l3382 6790  
                          l3374 66FA                            l3390 5D6A                            l3702 7BCE  
                          l3710 7C08                            l3630 796A                            l3622 7934  
                          l3614 78CE                            l3606 789C                            l3550 76D8  
                          l2590 58C2                            l2840 5864                            l3368 5E96  
                          l3296 5A40                            l2752 591E                            l2760 5936  
                          l2832 5A96                            l2824 5A74                            l2816 5DE2  
                          l2808 5DB6                            l3472 5B96                            l3480 5C18  
                          l3800 6E48                            l3544 65D2                            l3536 6586  
                          l3528 6550                            l3448 5FAC                            l3456 6052  
                          l3464 594A                            l3288 63AA                            l2920 614C  
                          l2912 6124                            l2904 6108                            l3384 67C0  
                          l3376 6700                            l3392 5D6E                            l3720 7C76  
                          l3712 7C1C                            l3704 7BDE                            l3640 79E2  
                          l3632 79A8                            l3624 794C                            l3616 790C  
                          l3608 78A2                            l3560 774C                            l3552 76EC  
                          l3298 5A44                            l2754 5920                            l2834 5A9E  
                          l2826 5A78                            l2770 5C72                            l2818 5DE6  
                          l2842 5EAE                            l3474 5BA4                            l3482 5BB4  
                          l3490 5C44                            l3810 6E86                            l3802 6E50  
                          l3546 65E2                            l3538 65AA                            l3394 61EE  
                          l3458 6060                            l3466 595C                            l2930 6172  
                          l2922 6152                            l2914 6132                            l2906 610A  
                          l3378 6730                            l3386 5D42                            l3722 7C82  
                          l3714 7C22                            l3706 7BEA                            l3650 79FC  
                          l3642 79EE                            l3634 79AE                            l3618 7918  
                          l3626 7952                            l3570 7766                            l3562 7758  
                          l3554 76F8                            l2940 7244                            l2932 7218  
                          l2764 5896                            l2828 5A8C                            l2780 5C96  
                          l2772 5C76                            l2860 5EF2                            l2852 5EC6  
                          l2844 5EBE                            l3484 5BD0                            l3476 5BEE  
                          l3492 5C52                            l3900 716C                            l3820 6EC4  
                          l3812 6E8C                            l3804 6E58                            l3548 65E8  
                          l3396 6200                            l2924 6158                            l2916 6138  
                          l2908 6118                            l3388 5D4E                            l3740 7CE0  
                          l3732 7CAE                            l3724 7C9A                            l3716 7C60  
                          l3708 7C02                            l3660 7A72                            l3652 7A00  
                          l3636 79BE                            l3628 7964                            l3580 77DC  
                          l3572 776A                            l3556 7736                            l1990 59A2  
                          l2838 5862                            l2950 727E                            l2942 7254  
                          l2934 7224                            l2758 5934                            l2766 58A4  
                          l2782 5C9A                            l2774 5C7A                            l2790 5A16  
                          l2862 5EF6                            l2854 5EDC                            l2846 5EC2  
                          l3486 5BDE                            l3478 5C0A                            l3494 5876  
                          l3902 717E                            l3830 6F0E                            l3910 71C0  
                          l3822 6ED4                            l3814 6E9E                            l3806 6E6E  
                          l3398 6204                            l2926 6166                            l2918 613E  
                          l3750 7D5E                            l3742 7D1E                            l3734 7CB4  
                          l3726 7CA6                            l3718 7C66                            l3670 7AC0  
                          l3662 7A82                            l3654 7A1C                            l3638 79CA  
                          l3590 784E                            l3582 77EC                            l3574 7786  
                          l3558 773C                            l1992 59A4                            l3496 63BC  
                          l2960 72AC                            l2952 7284                            l2944 7264  
                          l2936 7232                            l2784 5C9E                            l2776 5C8E  
                          l2768 5C62                            l2792 5A1A                            l2864 5F06  
                          l2856 5EE0                            l3488 5C28                            l3920 7206  
                          l3912 71D2                            l3904 7190                            l3840 6F68  
                          l3832 6F20                            l3816 6EB2                            l3824 6ED8  
                          l3808 6E76                            l2880 5D24                            l2928 616C  
                          l3744 7D2A                            l3736 7CB8                            l3752 7D64  
                          l3680 7B26                            l3672 7AC6                            l3664 7A8E  
                          l3656 7A28                            l3648 79F6                            l3592 7854  
                          l3576 7792                            l3568 7760                            l3584 77F2  
                          l1994 588A                            l2890 6094                            l3498 63E0  
                          l2970 72E0                            l2962 72AE                            l2954 7296  
                          l2946 7266                            l2938 7234                            l2786 5CA2  
                          l2778 5C92                            l2794 5A2E                            l2858 5EE2  
                          l3922 720E                            l3914 71DA                            l3906 71A2  
                          l3850 6FBC                            l3842 6F7A                            l3834 6F32  
                          l3826 6EEA                            l3818 6EC2                            l2882 5D2A  
                          l2874 5CFC                            l3770 7DF0                            l3754 7D78  
                          l3746 7D3A                            l3738 7CD4                            l3690 7B52  
                          l3682 7B3E                            l3674 7B04                            l3666 7AA6  
                          l3658 7A66                            l3594 7864                            l3586 7804  
                          l3578 77D0                            l1988 598E                            l2892 60B0  
                          l3940 58B2                            l2980 731C                            l2964 72BE  
                          l2972 72E8                            l2956 7298                            l2948 726E  
                          l2796 5A32                            l2788 5A12                            l3916 71EC  
                          l3908 71B4                            l3860 7016                            l3852 6FCE  
                          l3844 6F8C                            l3836 6F44                            l3828 6EEE  
                          l2884 5D3A                            l2876 5D0A                            l2868 5CF0  
                          l3780 7E6C                            l3772 7DFC                            l3764 7DCA  
                          l3756 7D84                            l3748 7D46                            l3692 7B58  
                          l3684 7B4A                            l3676 7B0A                            l3668 7AAC  
                          l3596 7870                            l3588 7810                            l3932 59EC  
                          l1996 584C                            l2894 60B8                            l3942 58B8  
                          l2990 7330                            l2982 7320                            l2974 72F8  
                          l2966 72CE                            l2958 729E                            l2798 5A36  
                          l3918 71F4                            l3870 706A                            l3854 6FE0  
                          l3862 7022                            l3838 6F56                            l3846 6F98  
                          l3790 6DFA                            l2886 5D3E                            l2878 5D0E  
                          l3782 7E80                            l3774 7E3A                            l3766 7DD0  
                          l3758 7DC2                            l3694 7B5C                            l3678 7B1A  
                          l3598 7888                            l3926 590C                            l3934 5A08  
                          l3950 5B62                            l3944 58BC                            l2992 7334  
                          l2984 7324                            l2976 730A                            l2968 72DE  
                          l3880 70BE                            l3872 707C                            l3864 7034  
                          l3856 6FF2                            l3848 6FAA                            l3792 6E0C  
                          l3928 5842                            l3784 7E98                            l3776 7E40  
                          l3768 7DD4                            l3696 7B78                            l3960 69E4  
                          l3952 5B6A                            l2898 60D2                            l3938 586C  
                          l3786 5854                            l2994 7338                            l2986 7328  
                          l2978 7318                            l3890 7118                            l3882 70D0  
                          l3874 708E                            l3866 7046                            l3858 7004  
                          l3794 6E22                            l3778 7E54                            l3698 7B84  
                          l3970 6AB6                            l3962 6A1A                            l3954 5B6E  
                          l3946 5B42                            l2996 733C                            l2988 732C  
                          l3892 712A                            l3884 70E2                            l3876 70A0  
                          l3868 7058                            l3796 6E2A                            l3788 6DF2  
                          l3980 6B32                            l3972 6AC4                            l3964 6A28  
                          l3956 5B72                            l3948 5B5E                            l2998 7340  
                          l3886 70F4                            l3894 7136                            l3878 70AC  
                          l3798 6E32                            l3990 6B88                            l3982 6B46  
                          l3974 6B04                            l3966 6A68                            l3958 69DC  
                          l3896 7148                            l3888 7106                            l3992 6B9A  
                          l3984 6B58                            l3976 6B12                            l3968 6A76  
                          l3898 715A                            l3994 6BAE                            l3986 6B6C  
                          l3978 6B20                            l3996 6BC0                            l3988 6B7E  
                          l3998 6BD4                            STR_1 7FCE                            STR_2 7F96  
                          STR_3 7FEA                            STR_4 7FB2                            STR_5 7FC0  
                          STR_6 7F88                            STR_7 7FDC                            STR_8 7FA4  
                          STR_9 7F68                            u3000 648C                            u2120 58D0  
                          u3001 6488                            u2121 58CC                            u3010 64A6  
                          u3011 64A2                            u2300 5A2E                            u3020 64CC  
                          u3100 6386                            u2301 5A2A                            u3021 64C8  
                          u3101 6382                            u2310 5DAA                            u3030 64EA  
                          u3110 63AA                            u2311 5DA6                            u3031 64E6  
                          u3111 63A6                            u3200 6306                            u3120 5A52  
                          u2240 5930                            u2320 5DCE                            u4000 7106  
                          u2400 5D24                            u3040 6506                            u3201 6302  
                          u3121 5A4E                            u2241 592A                            u2321 5DCA  
                          u4001 7102                            u2401 5D20                            u3041 6502  
                          u3210 5E6E                            u3130 5A68                            u2250 5932  
                          u2330 5DDE                            u4010 7118                            u2410 5D3A  
                          u3050 652C                            u3211 5E6A                            u3131 5A64  
                          u2331 5DDA                            u4011 7114                            u2411 5D36  
                          u3051 6528                            u2420 60CE                            u3220 5E7E  
                          u2500 7254                            u2260 5946                            u2340 5A8C  
                          u4100 71D2                            u4020 712A                            u3300 5F4A  
                          u3060 631E                            u3140 67EC                            u2421 60CA  
                          u3221 5E7A                            u2501 7250                            u2261 5940  
                          u2341 5A88                            u4101 71CE                            u4021 7126  
                          u3301 5F46                            u3061 631A                            u3141 67E8  
                          u2430 6104                            u2510 7296                            u2270 5948  
                          u2350 5EBE                            u4110 71EC                            u4030 7148  
                          u3310 5FF0                            u3070 6338                            u3230 66F2  
                          u3150 5B0A                            u2431 6100                            u2511 7292  
                          u2351 5EBA                            u4111 71E8                            u4031 7144  
                          u3311 5FEC                            u3071 6334                            u3231 66EE  
                          u3151 5B06                            u3160 6276                            u2600 73C8  
                          u2520 72AC                            u2280 5C72                            u2360 5ED6  
                          u3400 5C18                            u4120 7206                            u4040 715A  
                          u3320 600E                            u3080 6352                            u2440 6118  
                          u3240 5D96                            u4200 6B9A                            u3161 6272  
                          u2601 73C4                            u2521 72A8                            u2281 5C6E  
                          u2361 5ED0                            u3401 5C14                            u4121 7202  
                          u4041 7156                            u3321 600A                            u3081 634E  
                          u2441 6114                            u3241 5D92                            u4201 6B96  
                          u2610 73E6                            u2530 72BE                            u2290 5C8E  
                          u2370 5ED8                            u3410 5BD0                            u4050 716C  
                          u3250 6200                            u3330 5F8E                            u3090 6370  
                          u2450 6132                            u4210 6BC0                            u4130 6A1A  
                          u2611 73E2                            u2531 72BA                            u2291 5C8A  
                          u3411 5BCC                            u4051 7168                            u3251 61FC  
                          u3331 5F8A                            u3091 636C                            u2451 612E  
                          u4211 6BBC                            u4131 6A16                            u3180 62A2  
                          u2700 7536                            u2620 7406                            u2540 72CE  
                          u2380 5EF2                            u3420 5BDE                            u4060 717E  
                          u3500 65CC                            u3260 6218                            u3340 5FAC  
                          u2460 614C                            u4300 6CF8                            u4220 6BE6  
                          u4140 6A68                            u3181 629E                            u2701 7532  
                          u2621 7402                            u2541 72CA                            u2381 5EEE  
                          u3421 5BDA                            u4061 717A                            u3501 65C8  
                          u3261 6214                            u3341 5FA8                            u2461 6148  
                          u4301 6CF4                            u4221 6BE2                            u4141 6A64  
                          u3174 6288                            u2710 7546                            u2630 7414  
                          u2550 730A                            u2390 5F06                            u3430 5C44  
                          u4070 7190                            u3510 65E2                            u3270 6230  
                          u3350 6052                            u2470 6166                            u4310 6D1E  
                          u4230 6C02                            u4150 6AB6                            u3175 6284  
                          u2711 7542                            u2631 7410                            u2551 7306  
                          u2391 5F02                            u3431 5C40                            u4071 718C  
                          u3511 65DE                            u3271 622C                            u3351 604E  
                          u2471 6162                            u4311 6D1A                            u4231 6BFE  
                          u4151 6AB2                            u2800 761A                            u2720 7572  
                          u2640 7424                            u2560 7318                            u2480 7232  
                          u3440 5C52                            u4080 71A2                            u3280 6246  
                          u3360 6070                            u3600 7B78                            u4320 6D3A  
                          u4240 6C28                            u4160 6B04                            u2801 7616  
                          u2721 756E                            u2641 7420                            u2561 7314  
                          u2481 722E                            u3441 5C4E                            u4081 719E  
                          u3281 6242                            u3361 606C                            u3601 7B74  
                          u4321 6D36                            u4241 6C24                            u4161 6B00  
                          u3194 62EC                            u2810 7654                            u2730 7582  
                          u2650 7456                            u2570 7386                            u2490 7244  
                          u3370 5B96                            u4090 71B4                            u3450 6550  
                          u3290 5F2C                            u3610 7C1C                            u3530 76EC  
                          u4330 6D58                            u4250 6C4E                            u4170 6B32  
                          u3195 62E8                            u2811 7650                            u2731 757E  
                          u2651 7452                            u2571 7382                            u2491 7240  
                          u3371 5B92                            u4091 71B0                            u3451 654C  
                          u3291 5F28                            u3611 7C18                            u3531 76E8  
                          u4331 6D54                            u4251 6C4A                            u4171 6B2E  
                          u2820 7666                            u2740 759E                            u2660 7464  
                          u2580 739E                            u2900 6982                            u3380 5BA4  
                          u3700 6E6E                            u3524 65FE                            u3460 6562  
                          u3620 7CD4                            u3540 7786                            u4340 6D76  
                          u4260 6C6A                            u4180 6B58                            u2821 7662  
                          u2741 759A                            u2661 7460                            u2581 7398  
                          u2901 697E                            u3381 5BA0                            u3701 6E6A  
                          u3525 65FA                            u3461 655E                            u3621 7CD0  
                          u3541 7782                            u4341 6D72                            u4261 6C66  
                          u4181 6B54                            u2830 7676                            u2750 75AE  
                          u2670 7482                            u2590 73A0                            u2910 69D2  
                          u3390 5C0A                            u3710 6E9E                            u3470 657C  
                          u3630 7D78                            u3550 7804                            u4270 6C90  
                          u4190 6B7E                            u2831 7672                            u2751 75AA  
                          u2671 747E                            u2911 69CE                            u3391 5C06  
                          u3711 6E9A                            u3471 6578                            u3631 7D74  
                          u3551 7800                            u4271 6C8C                            u4191 6B7A  
                          u2840 7696                            u2760 75C0                            u2680 74BA  
                          u3800 6F7A                            u3720 6EB2                            u2920 5970  
                          u3640 7DF0                            u3560 78C2                            u4280 6CB6  
                          u2841 7692                            u2761 75BC                            u2681 74B6  
                          u3801 6F76                            u3721 6EAE                            u2921 596C  
                          u3641 7DEC                            u3561 78BE                            u4281 6CB2  
                          u2930 5E4A                            u2850 76A8                            u2770 75D6  
                          u2690 7500                            u3810 6F8C                            u3730 6ED4  
                          u3490 65BA                            u3650 7E54                            u3570 7964  
                          u4290 6CD2                            u2931 5E46                            u2851 76A4  
                          u2771 75D2                            u2691 74FC                            u3811 6F88  
                          u3731 6ED0                            u3491 65B6                            u3651 7E50  
                          u3571 7960                            u4291 6CCE                            u2860 76C4  
                          u2780 75EC                            u2940 6678                            u3900 7046  
                          u3820 6FAA                            u3740 6EEA                            u3484 659C  
                          u3660 7E80                            u3580 7A1C                            u2861 76C0  
                          u2781 75E8                            u2941 6674                            u3901 7042  
                          u3821 6FA6                            u3741 6EE6                            u3485 6598  
                          u3661 7E7C                            u3581 7A18                            u2790 7600  
                          u2870 6906                            u2950 66E2                            u3910 7058  
                          u3830 6FBC                            u3750 6F20                            u3670 6E0C  
                          u3590 7AC0                            u2791 75FC                            u2871 6902  
                          u2951 66DE                            u3911 7054                            u3831 6FB8  
                          u3751 6F1C                            u3671 6E08                            u3591 7ABC  
                          u2960 618E                            u2880 6944                            u3920 706A  
                          u3840 6FCE                            u3760 6F32                            u3680 6E22  
                          u2961 618A                            u2881 6940                            u3921 7066  
                          u3841 6FCA                            u3761 6F2E                            u3681 6E1E  
                          u2970 61A8                            u2890 6962                            u3930 707C  
                          u3850 6FE0                            u3770 6F44                            u3690 6E48  
                          u2971 61A4                            u2891 695E                            u3931 7078  
                          u3851 6FDC                            u3771 6F40                            u3691 6E44  
                          u2980 61C2                            u3940 708E                            u3860 6FF2  
                          u3780 6F56                            u2981 61BE                            u3941 708A  
                          u3861 6FEE                            u3781 6F52                            u2990 61DC  
                          u3950 70A0                            u3870 7004                            u3790 6F68  
                          u2991 61D8                            u3951 709C                            u3871 7000  
                          u3791 6F64                            u3960 70BE                            u3880 7016  
                          u3961 70BA                            u3881 7012                            u3970 70D0  
                          u3890 7034                            u3971 70CC                            u3891 7030  
                          u3980 70E2                            u3981 70DE                            u3990 70F4  
                          u3991 70F0                     _outputPrint 76D8                            _main 5AA2  
                          _msgs 0060                            _time 004D  setAlarmLevel2b@newAlarmLevel2b 001B  
                          fsr2h 0FDA                            indf2 0FDF                            fsr1l 0FE1  
                          fsr2l 0FD9                   ?_i2c_read_bit 0001                            prodh 0FF4  
                          prodl 0FF3                            start 0000                    ___param_bank 0000  
               __end_of_i2cInit 584C                 __end_of___fladd 76D8                           ?_main 0001  
               __end_of_adcInit 590A                 __end_of_adcRead 6264                 __end_of___awdiv 653E  
                         STR_10 7F46                           STR_11 7F78                           STR_20 7FF8  
                         STR_12 7F57                           STR_21 7FF8                           STR_13 7F0F  
                         STR_22 7F0F                           STR_30 7FF8                           STR_14 7EF9  
                         STR_15 7F20                           STR_31 7FF8                           STR_23 7EE3  
                         STR_24 7F20                           STR_32 7F0F                           STR_40 7F24  
                         STR_16 7FF8                           STR_17 7F0F                           STR_25 7FF8  
                         STR_33 7ECD                           STR_34 7F20                           STR_26 7FF8  
                         STR_18 7EB7                           STR_19 7F20                           STR_27 7F0F  
                         STR_35 7FF8                           STR_36 7F20                           STR_28 7EA1  
               __end_of___awmod 63BC                           STR_29 7F20                           STR_37 7F35  
                         STR_38 7F35                           STR_39 7F24                 ___awdiv@divisor 0003  
               ___awdiv@counter 0005                   ledState@state 0001                 __end_of_lcdData 59EC  
               __end_of_lcdInit 647A                  ??_i2cWriteByte 0004                 __end_of_getTime 588A  
               __end_of_ledInit 59C6             __end_of_i2cReadByte 5D42              outputPrint@numTela 001D  
               __end_of_butInit 5896                 __end_of_butRead 630C                           _state 004B  
                         _pulse 5862                 __end_of_varInit 58F6                 __end_of_setTime 5880  
                         tablat 0FF5               __end_of_I2C_delay 5842                   _i2c_write_bit 5D98  
                         status 0FD8                  ??_i2c_read_bit 0001                 __initialization 5B0C  
                  __end_of_main 5AD6                 i2cWriteByte@bit 0005                ?_setAlarmLevel1a 001B  
              ?_setAlarmLevel1b 001B                ?_setAlarmLevel2a 001B                ?_setAlarmLevel2b 001B  
              __end_of_i2c_stop 5A40                    ?_setLanguage 0001                          ??_main 0037  
                 __activetblptr 0002                     eventRead@ev 0021                ___awdiv@dividend 0001  
                        ?_pulse 0001                  ?_i2c_write_bit 0001                       ??_i2cInit 0001  
              __end_of_lcdData4 6178                __end_of_delay_ms 5E4C              dsWriteData@address 0011  
              __end_of_getState 5846                __end_of_ledState 660A                          ___flge 68D8  
                     ??___fladd 0009                          ___wmul 59EC                       ??_adcInit 0001  
                     ??_adcRead 0003                       ??___awdiv 0005                       ??___awmod 000D  
                        _dsInit 584C                          _lcdInt 66E4                          _buffer 0037  
              __end_of_read_SDA 594A                __end_of_read_SCL 5934                          _smInit 58B2  
                        clear_0 5B32                          _smLoop 69DC                ___awdiv@quotient 0007  
               ___awmod@divisor 000B                       ??_lcdData 000B                          isa$std 0001  
                   _i2cReadByte 5CEE                       ??_lcdInit 0016                 ___awmod@counter 000D  
                     ??_getTime 0003                       ??_ledInit 0001                       ??_butInit 0001  
                     ??_butRead 0015                __end_of_setState 585A                    __mediumconst 7EA0  
                     ??_varInit 0001                       ??_setTime 0005                          tblptrh 0FF7  
                        tblptrl 0FF6                          tblptru 0FF8                      ___flge@ff1 0001  
                    ___flge@ff2 0005                      __accesstop 0060         __end_of__initialization 5B38  
                 ___rparam_used 0001                outputPrint@i_302 002B                outputPrint@i_312 002F  
              outputPrint@i_308 002D                outputPrint@i_290 0027                outputPrint@i_296 0029  
          __end_of_i2cWriteByte 5F0C                  __pcstackCOMRAM 0001                    __pidataBANK0 5976  
                 __end_of_pulse 586C                i2cWriteByte@byte 0003               __end_of_i2c_start 5CA8  
          __end_of_i2c_read_bit 5AA2                 ??_i2c_write_bit 0001                         ??_pulse 0001  
                  ?_outputPrint 001D                       ?_i2c_stop 0001                      _delay_50us 6094  
                    __pnvCOMRAM 004D                      _dsReadData 5CA8                dsReadData@result 000B  
                  outputPrint@i 0025                         ?___flge 0001                      _lcdCommand 5E4C  
                       ?___wmul 0001                         ?_dsInit 0001                         ?_lcdInt 001B  
                  eventRead@ser 0025                         ?_smInit 0001                         ?_smLoop 0001  
          i2cReadByte@send_stop 0002                       ?_lcdData4 0001                       ?_delay_ms 000B  
                lcdCommand4@cmd 0001                       ?_getState 0001                       ?_ledState 0001  
             __end_of_clear_SDA 58B2               __end_of_clear_SCL 58A4                       ?_read_SDA 0001  
                     ?_read_SCL 0001                      ??_i2c_stop 0001                         _i2cInit 5846  
                     _I2C_delay 5840                         __Hparam 0000               ??_getAlarmLevel1a 001A  
             ??_getAlarmLevel1b 001A               ??_getAlarmLevel2a 001A               ??_getAlarmLevel2b 001A  
                     ?_setState 0001                         __Lparam 0000                   ?_serialString 0002  
             __end_of_lcdString 5D98                         ___fladd 7218                         _adcInit 58F6  
                       _adcRead 61EE                         ___awdiv 647A                         ___awmod 630C  
                       __pcinit 5B0C                  serialRead@resp 0001                         _lcdData 59C6  
                       __ramtop 0800                         _lcdInit 63BC                         __ptext0 5AA2  
                       __ptext1 58E4                         __ptext2 584C                         __ptext3 5846  
                       _getTime 5880                         __ptext4 58C2                         __ptext5 5B42  
                       __ptext6 59EC                         _ledInit 59A8                         __ptext7 585A  
                       __ptext8 69DC                         __ptext9 590A                         _butInit 588A  
                       _butRead 6264               __end_of_eventInit 58E4               __end_of_eventRead 7218  
                       _key_ant 0046                ___awmod@dividend 0009                     serialSend@c 0001  
                       _varInit 58E4                         _setTime 5876                      ??_lcdData4 0001  
                    ??_delay_ms 000F                      ??_getState 0001                         _started 004C  
                    ??_ledState 0002                      delay_ms@ms 000B            end_of_initialization 5B38  
                    ??_read_SDA 0001                      ??_read_SCL 0001                     ?_delay_50us 0001  
                 __Lmediumconst 7EA0               __end_of_serialInt 68D8                     ?_dsReadData 0008  
                    ?_I2C_delay 0001               __end_of_timerInit 5862               __end_of_timerWait 58D2  
                ??_serialString 0004                      ??_setState 0001                      _serialInit 598E  
                    _serialRead 5A40                      _serialSend 5960                         postdec1 0FE5  
                       postdec2 0FDD                     ?_lcdCommand 0001                         postinc0 0FEE  
                       postinc2 0FDE                   ??_lcdCommand4 0001                   ??_getLanguage 000D  
                    _timerReset 5B42                    ?_i2cReadByte 0002                 i2c_read_bit@bit 0001  
                   ___fladd@grs 0010                      lcdString@i 0010                    _i2cWriteByte 5EAC  
                 ??_dsWriteData 0013                      butRead@num 0017                      _outputInit 586C  
                  _i2c_read_bit 5A70                  __end_of___flge 69DC               outputPrint@idioma 001F  
                adcRead@ADvalor 0003                  __end_of___wmul 5A12                  __end_of_dsInit 5852  
                __end_of_lcdInt 67DE                  __end_of_smInit 58C2                  __end_of_smLoop 6DF2  
           __end_of_lcdCommand4 61EE             start_initialization 5B0C             __end_of_getLanguage 5960  
                     _i2c_start 5C62                    smLoop@evento 0036                     ??_I2C_delay 0001  
           __end_of_dsWriteData 66E4                     ?_serialInit 0001                     ?_serialRead 0001  
                   ?_serialSend 0001                        ??___flge 0009                        ??___wmul 0005  
                      ??_dsInit 0001                        ??_lcdInt 001D                     __pdataBANK0 0060  
                      ??_smInit 0002                     ?_timerReset 0007                        ??_smLoop 0031  
             dsReadData@address 0008                       ___fladd@a 0005                       ___fladd@b 0001  
                   __pbssCOMRAM 0037            __end_of_serialString 5B0C                      ?_i2c_start 0001  
              setState@newState 0001                 _getAlarmLevel1a 5F0C                 _getAlarmLevel1b 5F6E  
               _getAlarmLevel2a 5FD0                 _getAlarmLevel2b 6032           __end_of_i2c_write_bit 5DF0  
             ??_setAlarmLevel1a 001D               ??_setAlarmLevel1b 001D               ??_setAlarmLevel2a 001D  
             ??_setAlarmLevel2b 001D                        ?_i2cInit 0001                     ?_outputInit 0001  
                     _clear_SDA 58A4                       _clear_SCL 5896                   __pmediumconst 7EA0  
                      ?___fladd 0001                        ?_adcInit 0001                        ?_adcRead 0001  
                      ?___awdiv 0001                        ?___awmod 0009                     _lcdCommand4 6178  
                     _lcdString 5D42                     _getLanguage 594A                        ?_lcdData 0001  
                 ??_setLanguage 0018                        ?_lcdInit 0001                        ?_getTime 0001  
                      ?_ledInit 0001                        ?_butInit 0001                        ?_butRead 0001  
                 lcdCommand@cmd 0015                    delay_50us@us 0001                   eventRead@temp 0023  
                      ?_varInit 0001                        ?_setTime 0003                       _eventInit 58D2  
                     _eventRead 6DF2                     _dsWriteData 660A                    ??_delay_50us 0005  
                ___wmul@product 0005                    ??_dsReadData 000A                       delay_ms@i 0011  
                     delay_ms@l 000F                      ?_clear_SDA 0001                      ?_clear_SCL 0001  
                     _serialInt 67DE                       lcdInt@val 001B                    ??_lcdCommand 0015  
                     _timerInit 585A                       _timerWait 58C2                      ?_lcdString 000C  
             ___wmul@multiplier 0001         __end_of_getAlarmLevel1a 5F6E         __end_of_getAlarmLevel1b 5FD0  
       __end_of_getAlarmLevel2a 6032         __end_of_getAlarmLevel2b 6094              __end_of_delay_50us 6106  
            __end_of_dsReadData 5CEE                      ?_eventInit 0001                      ?_eventRead 001D  
                   ??_i2c_start 0001             __end_of_setLanguage 591E                timerReset@ciclos 0009  
                     copy_data0 5B20              __end_of_lcdCommand 5EAC                    lcdData@valor 000B  
                      _i2c_stop 5A12                        __Hrparam 0000                      ?_serialInt 001B  
                      __Lrparam 0000                dsWriteData@value 0013  setAlarmLevel1a@newAlarmLevel1a 001B  
                    ?_timerInit 0001                      ?_timerWait 0001                        adcRead@a 0001  
                      _lcdData4 6106                        _delay_ms 5DF0                        __ptext10 76D8  
                      __ptext11 5AD6                        __ptext20 5880                        __ptext12 67DE  
                      __ptext21 594A                        __ptext13 5960                        __ptext30 5842  
                      __ptext22 6032                        __ptext14 5D42                        __ptext31 6DF2  
                      __ptext23 5FD0                        __ptext15 66E4                        __ptext40 5A12  
                      __ptext32 5876                        __ptext24 5F6E                        __ptext16 59C6  
                      __ptext41 5C62                        __ptext33 5C28                        __ptext25 5F0C  
                      __ptext17 6106                        __ptext50 5A40                        __ptext42 58A4  
                      __ptext34 5BEE                        __ptext26 5CA8                        __ptext18 630C  
                      __ptext51 6264                        __ptext43 5A70                        __ptext35 5BB4  
                      __ptext27 5CEE                        __ptext19 647A                        __ptext60 5862  
                      __ptext52 58B2                        __ptext44 5934                        __ptext36 5B7A  
                      __ptext28 61EE                        __ptext61 5DF0                        __ptext53 5852  
                      __ptext45 591E                        __ptext37 660A                        __ptext29 653E  
                      __ptext62 6094                        __ptext54 59A8                        __ptext46 5896  
                      __ptext38 5EAC                        __ptext63 58D2                        __ptext55 58F6  
                      __ptext47 5840                        __ptext39 5D98                        __ptext64 598E  
                      __ptext56 586C                        __ptext48 68D8                        __ptext65 588A  
                      __ptext57 63BC                        __ptext49 7218                        __ptext58 5E4C  
                      __ptext59 6178                        _getState 5842                        _ledState 653E  
                   _smLoop$1291 0034                     delay_50us@i 0005                     delay_50us@l 0009  
                 ??_outputPrint 0021                        _language 004A                        _read_SDA 5934  
                      _read_SCL 591E                    serialInt@val 001B                     ??_clear_SDA 0001  
                   ??_clear_SCL 0001                    ??_serialInit 0001                    ??_serialRead 0001  
                  ??_serialSend 0001                        _setState 5852                    _serialString 5AD6  
                      isa$xinst 0000                     ??_lcdString 000E                    ??_timerReset 0009  
                   lcdData4@cmd 0001                     _setLanguage 590A          setLanguage@newLanguage 0018  
setAlarmLevel1b@newAlarmLevel1b 001B                 timerReset@tempo 0007                 _setAlarmLevel1a 5B7A  
               _setAlarmLevel1b 5BB4                 _setAlarmLevel2a 5BEE                 _setAlarmLevel2b 5C28  
              ?_getAlarmLevel1a 0018                ?_getAlarmLevel1b 0018                ?_getAlarmLevel2a 0018  
              ?_getAlarmLevel2b 0018                     ??_eventInit 0001                     ??_eventRead 001F  
            getAlarmLevel1a@tmp 001A              getAlarmLevel1b@tmp 001A              getAlarmLevel2a@tmp 001A  
            getAlarmLevel2b@tmp 001A              __end_of_serialInit 59A8              __end_of_serialRead 5A70  
            __end_of_serialSend 5976                    ??_outputInit 0016              __end_of_timerReset 5B7A  
           __end_of_outputPrint 7EA0                     ??_serialInt 001D                     ??_timerInit 0001  
                   ??_timerWait 0001                    ?_lcdCommand4 0001                    ?_getLanguage 0001  
               serialString@str 0002              __end_of_outputInit 5876  setAlarmLevel2a@newAlarmLevel2a 001B  
                 ___fladd@signs 000D                    ?_dsWriteData 0011                    ___fladd@aexp 000E  
                  ___fladd@bexp 000F                    dsWriteData@i 0014  
